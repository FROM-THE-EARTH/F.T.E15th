
gimbalver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb18  0800bb18  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb18  0800bb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb20  0800bb20  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb20  0800bb20  0000cb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb24  0800bb24  0000cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bb28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001e0  0800bd08  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800bd08  0000d650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e50  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cca  00000000  00000000  00024060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00026d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001049  00000000  00000000  000281e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020198  00000000  00000000  00029231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ad9  00000000  00000000  000493c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc82f  00000000  00000000  00061ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e6d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e4c  00000000  00000000  0012e714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00135560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b670 	.word	0x0800b670

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b670 	.word	0x0800b670

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <I2cReadBytes>:
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, &data, 1, 100);
	return data;
}

static void I2cReadBytes(uint8_t add, uint8_t reg, uint8_t *data, uint8_t count)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, data, count, 100);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b299      	uxth	r1, r3
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	b29a      	uxth	r2, r3
 8001056:	797b      	ldrb	r3, [r7, #5]
 8001058:	b29b      	uxth	r3, r3
 800105a:	2064      	movs	r0, #100	@ 0x64
 800105c:	9002      	str	r0, [sp, #8]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <I2cReadBytes+0x40>)
 8001068:	f001 fb6c 	bl	8002744 <HAL_I2C_Mem_Read>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000200 	.word	0x20000200

08001078 <BNO055_ReadGyr>:
	*x = (float)_x / 16;
	*y = (float)_y / 16;
	*z = (float)_z / 16;
}

void BNO055_ReadGyr(float* x,float* y,float* z){
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	uint8_t data[6]={};
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	2300      	movs	r3, #0
 800108a:	833b      	strh	r3, [r7, #24]

	I2cReadBytes(BNO055_ADRESS,BNO055_GYR_DATA_X_LSB,data,6);
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <BNO055_ReadGyr+0xa4>)
 800108e:	7818      	ldrb	r0, [r3, #0]
 8001090:	f107 0214 	add.w	r2, r7, #20
 8001094:	2306      	movs	r3, #6
 8001096:	2114      	movs	r1, #20
 8001098:	f7ff ffcc 	bl	8001034 <I2cReadBytes>
	//printf("%d,%d\r\n",data[0],data[1]);

	int16_t _x,_y,_z;
	_x = data[1] << 8 | data[0];
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	83fb      	strh	r3, [r7, #30]
	_y = data[3] << 8 | data[2];
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	83bb      	strh	r3, [r7, #28]
	_z = data[5] << 8 | data[4];
 80010b8:	7e7b      	ldrb	r3, [r7, #25]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7e3b      	ldrb	r3, [r7, #24]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	837b      	strh	r3, [r7, #26]

#if BNO055_UNIT_SEL_GYR == BNO055_UNIT_SEL_GYR_Dps
	*x = (float)_x / 16;
 80010c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80010d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)_y / 16;
 80010e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)_z / 16;
 80010fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800110a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edc3 7a00 	vstr	s15, [r3]
	*x = (float)_x / 900;
	*y = (float)_y / 900;
	*z = (float)_z / 900;
#endif
	//printf("%f , %f , %f\r\n",x,y,z);
}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001fc 	.word	0x200001fc

08001120 <A4988_Initialize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void A4988_Initialize(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MDEN_GPIO_Port,MDEN_Pin,GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800112a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112e:	f001 faf1 	bl	8002714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS1_GPIO_Port,MDMS1_Pin,GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f001 faea 	bl	8002714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS2_GPIO_Port,MDMS2_Pin,GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	@ 0x40
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <A4988_Initialize+0x38>)
 8001146:	f001 fae5 	bl	8002714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS3_GPIO_Port,MDMS3_Pin,GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2101      	movs	r1, #1
 800114e:	4802      	ldr	r0, [pc, #8]	@ (8001158 <A4988_Initialize+0x38>)
 8001150:	f001 fae0 	bl	8002714 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	48000400 	.word	0x48000400
 800115c:	00000000 	.word	0x00000000

08001160 <A4988_STEP>:

void A4988_STEP(uint16_t interval){
 8001160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	80fb      	strh	r3, [r7, #6]
	if(stopState == 0){
 800116c:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <A4988_STEP+0xe8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05e      	beq.n	8001232 <A4988_STEP+0xd2>
		return ;
	}
	if(stepState == 0){
 8001174:	4b35      	ldr	r3, [pc, #212]	@ (800124c <A4988_STEP+0xec>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d120      	bne.n	80011be <A4988_STEP+0x5e>
		if(stepInterval != interval - 1){
 800117c:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <A4988_STEP+0xf0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3b01      	subs	r3, #1
 8001186:	429a      	cmp	r2, r3
 8001188:	d00e      	beq.n	80011a8 <A4988_STEP+0x48>
			stepInterval = interval - 1;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	3b01      	subs	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <A4988_STEP+0xf0>)
 8001192:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim7, stepInterval);
 8001194:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <A4988_STEP+0xf0>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <A4988_STEP+0xf4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <A4988_STEP+0xf0>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <A4988_STEP+0xf4>)
 80011a6:	60da      	str	r2, [r3, #12]
		}
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b2:	f001 faaf 	bl	8002714 <HAL_GPIO_WritePin>
		stepState = 1;
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <A4988_STEP+0xec>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e03a      	b.n	8001234 <A4988_STEP+0xd4>
	}else{
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f001 faa4 	bl	8002714 <HAL_GPIO_WritePin>
		stepState = 0;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <A4988_STEP+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
		mangle += onepulse_motorangle*mdir/ms;
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <A4988_STEP+0xf8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9de 	bl	8000598 <__aeabi_f2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <A4988_STEP+0xfc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9c5 	bl	8000574 <__aeabi_i2d>
 80011ea:	a315      	add	r3, pc, #84	@ (adr r3, 8001240 <A4988_STEP+0xe0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4690      	mov	r8, r2
 80011fa:	4699      	mov	r9, r3
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <A4988_STEP+0x100>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9b7 	bl	8000574 <__aeabi_i2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4640      	mov	r0, r8
 800120c:	4649      	mov	r1, r9
 800120e:	f7ff fb45 	bl	800089c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f85f 	bl	80002dc <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fd07 	bl	8000c38 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <A4988_STEP+0xf8>)
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e000      	b.n	8001234 <A4988_STEP+0xd4>
		return ;
 8001232:	bf00      	nop
		//printf("onepulse");
	}

}
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800123c:	f3af 8000 	nop.w
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	3feccccc 	.word	0x3feccccc
 8001248:	2000048c 	.word	0x2000048c
 800124c:	20000478 	.word	0x20000478
 8001250:	2000047c 	.word	0x2000047c
 8001254:	200002ec 	.word	0x200002ec
 8001258:	20000480 	.word	0x20000480
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004
 8001264:	00000000 	.word	0x00000000

08001268 <HAL_TIM_PeriodElapsedCallback>:
    HAL_GPIO_WritePin(MDMS2_GPIO_Port, MDMS2_Pin, (MS & 0b010) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MDMS3_GPIO_Port, MDMS3_Pin, (MS & 0b100) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a9a      	ldr	r2, [pc, #616]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d160      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0xd4>
        BNO055_ReadGyr(&Gyr_x, &Gyr_y, &Gyr_z);
 800127a:	4a9a      	ldr	r2, [pc, #616]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800127c:	499a      	ldr	r1, [pc, #616]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800127e:	489b      	ldr	r0, [pc, #620]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001280:	f7ff fefa 	bl	8001078 <BNO055_ReadGyr>
        //printf("%f , %f , %f\r\n",Gyr_x,Gyr_y,Gyr_z); // @suppress("Float formatting support")
        if(Gyr_z == now_z){
 8001284:	4b97      	ldr	r3, [pc, #604]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b99      	ldr	r3, [pc, #612]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	eeb4 7a67 	vcmp.f32	s14, s15
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	d105      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
        	bnoemergency++;
 800129a:	4b96      	ldr	r3, [pc, #600]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a94      	ldr	r2, [pc, #592]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e002      	b.n	80012ac <HAL_TIM_PeriodElapsedCallback+0x44>
        }else{
        	bnoemergency = 0;
 80012a6:	4b93      	ldr	r3, [pc, #588]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
        }
        if(bnoemergency == 10){
 80012ac:	4b91      	ldr	r3, [pc, #580]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	d10b      	bne.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x64>
        	HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
 80012b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012b8:	2204      	movs	r2, #4
 80012ba:	498f      	ldr	r1, [pc, #572]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80012bc:	488f      	ldr	r0, [pc, #572]	@ (80014fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012be:	f003 fb1f 	bl	8004900 <HAL_UART_Transmit>
        	HAL_NVIC_SystemReset();
 80012c2:	f000 ffc8 	bl	8002256 <HAL_NVIC_SystemReset>
        	bnoemergency = 0;
 80012c6:	4b8b      	ldr	r3, [pc, #556]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
        }
        pre_z = now_z;
 80012cc:	4b88      	ldr	r3, [pc, #544]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a8b      	ldr	r2, [pc, #556]	@ (8001500 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80012d2:	6013      	str	r3, [r2, #0]
        now_z = Gyr_z;
 80012d4:	4b83      	ldr	r3, [pc, #524]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a85      	ldr	r2, [pc, #532]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012da:	6013      	str	r3, [r2, #0]
        tangle += (now_z + Gyr_z) * 0.01 * 0.5;
 80012dc:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f959 	bl	8000598 <__aeabi_f2d>
 80012e6:	4680      	mov	r8, r0
 80012e8:	4689      	mov	r9, r1
 80012ea:	4b81      	ldr	r3, [pc, #516]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	4b7c      	ldr	r3, [pc, #496]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	ee17 0a90 	vmov	r0, s15
 80012fe:	f7ff f94b 	bl	8000598 <__aeabi_f2d>
 8001302:	a373      	add	r3, pc, #460	@ (adr r3, 80014d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f99e 	bl	8000648 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b7b      	ldr	r3, [pc, #492]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800131a:	f7ff f995 	bl	8000648 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4640      	mov	r0, r8
 8001324:	4649      	mov	r1, r9
 8001326:	f7fe ffd9 	bl	80002dc <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc81 	bl	8000c38 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a72      	ldr	r2, [pc, #456]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800133a:	6013      	str	r3, [r2, #0]
        //printf("%f\r\n",tangle);
	}
    if(htim == &htim6){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a73      	ldr	r2, [pc, #460]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	f040 80b7 	bne.w	80014b4 <HAL_TIM_PeriodElapsedCallback+0x24c>
        float diffangle = tangle - mangle;
 8001346:	4b6f      	ldr	r3, [pc, #444]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001356:	edc7 7a03 	vstr	s15, [r7, #12]
        if((diffangle < (onepulse_motorangle/ms)*5) && (diffangle > -(onepulse_motorangle/ms)*5) ){
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4680      	mov	r8, r0
 8001362:	4689      	mov	r9, r1
 8001364:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f903 	bl	8000574 <__aeabi_i2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	a159      	add	r1, pc, #356	@ (adr r1, 80014d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001378:	f7ff fa90 	bl	800089c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b63      	ldr	r3, [pc, #396]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800138a:	f7ff f95d 	bl	8000648 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4640      	mov	r0, r8
 8001394:	4649      	mov	r1, r9
 8001396:	f7ff fbc9 	bl	8000b2c <__aeabi_dcmplt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d028      	beq.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x18a>
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff f8f9 	bl	8000598 <__aeabi_f2d>
 80013a6:	4680      	mov	r8, r0
 80013a8:	4689      	mov	r9, r1
 80013aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8e0 	bl	8000574 <__aeabi_i2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	a147      	add	r1, pc, #284	@ (adr r1, 80014d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80013ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7ff f937 	bl	8000648 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4640      	mov	r0, r8
 80013e0:	4649      	mov	r1, r9
 80013e2:	f7ff fbc1 	bl	8000b68 <__aeabi_dcmpgt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x18a>
        	diffangle = 0;
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
        }
        int pulse = diffangle / (onepulse_motorangle / ms);
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff f8d0 	bl	8000598 <__aeabi_f2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8b7 	bl	8000574 <__aeabi_i2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	a133      	add	r1, pc, #204	@ (adr r1, 80014d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800140c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001410:	f7ff fa44 	bl	800089c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7ff fa3e 	bl	800089c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbbe 	bl	8000ba8 <__aeabi_d2iz>
 800142c:	4603      	mov	r3, r0
 800142e:	60bb      	str	r3, [r7, #8]
        //printf("%f\r\n",diffangle);

        if (pulse < 0) {
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da0d      	bge.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x1ea>
            mdir = -1;
 8001436:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f001 f965 	bl	8002714 <HAL_GPIO_WritePin>
            pulse = -pulse;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	425b      	negs	r3, r3
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	e00b      	b.n	800146a <HAL_TIM_PeriodElapsedCallback+0x202>
        } else if (pulse > 0) {
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd08      	ble.n	800146a <HAL_TIM_PeriodElapsedCallback+0x202>
            mdir = 1;
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	f001 f955 	bl	8002714 <HAL_GPIO_WritePin>
        }

        if (pulse > 0) {
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd0a      	ble.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x21e>
            mInterval = 100 / pulse;
 8001470:	2264      	movs	r2, #100	@ 0x64
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	fb92 f3f3 	sdiv	r3, r2, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800147c:	801a      	strh	r2, [r3, #0]
            stopState = 1;
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e005      	b.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x22a>
        } else {
            mInterval = 100; // ゼロ除算防止
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001488:	2264      	movs	r2, #100	@ 0x64
 800148a:	801a      	strh	r2, [r3, #0]
            stopState = 0;
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
        }
        if(mInterval < 34){
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b21      	cmp	r3, #33	@ 0x21
 8001498:	d802      	bhi.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x238>
        	mInterval = 34;
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800149c:	2222      	movs	r2, #34	@ 0x22
 800149e:	801a      	strh	r2, [r3, #0]
        }


        if (tim7init == 0) {
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x24c>
            HAL_TIM_Base_Start_IT(&htim7);
 80014a8:	4820      	ldr	r0, [pc, #128]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80014aa:	f002 fcfd 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
            tim7init = 1;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
        }
        //printf("%f,%f\r\n",tangle,mangle);
    }

    if(htim == &htim7){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d104      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x25e>
    	//printf("tim7");
        A4988_STEP(mInterval);
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe4d 	bl	8001160 <A4988_STEP>
    }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014d0:	47ae147b 	.word	0x47ae147b
 80014d4:	3f847ae1 	.word	0x3f847ae1
 80014d8:	cccccccd 	.word	0xcccccccd
 80014dc:	3feccccc 	.word	0x3feccccc
 80014e0:	20000254 	.word	0x20000254
 80014e4:	20000468 	.word	0x20000468
 80014e8:	20000464 	.word	0x20000464
 80014ec:	20000460 	.word	0x20000460
 80014f0:	20000470 	.word	0x20000470
 80014f4:	20000474 	.word	0x20000474
 80014f8:	0800b6a4 	.word	0x0800b6a4
 80014fc:	20000338 	.word	0x20000338
 8001500:	2000046c 	.word	0x2000046c
 8001504:	20000484 	.word	0x20000484
 8001508:	3fe00000 	.word	0x3fe00000
 800150c:	200002a0 	.word	0x200002a0
 8001510:	20000480 	.word	0x20000480
 8001514:	20000004 	.word	0x20000004
 8001518:	40140000 	.word	0x40140000
 800151c:	20000000 	.word	0x20000000
 8001520:	2000047e 	.word	0x2000047e
 8001524:	2000048c 	.word	0x2000048c
 8001528:	20000488 	.word	0x20000488
 800152c:	200002ec 	.word	0x200002ec

08001530 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	//printf("receive\r\n");
	//printf("%d\r\n",buffer[0]);

	if(buffer[0] == 13){
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_UART_RxCpltCallback+0xbc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b0d      	cmp	r3, #13
 800153e:	d140      	bne.n	80015c2 <HAL_UART_RxCpltCallback+0x92>
		//printf("ok\r\n");
		if(data[0] == 97){
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_UART_RxCpltCallback+0xc0>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b61      	cmp	r3, #97	@ 0x61
 8001546:	d127      	bne.n	8001598 <HAL_UART_RxCpltCallback+0x68>
			for(int i=0;i<datapos-1;i++){
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e00b      	b.n	8001566 <HAL_UART_RxCpltCallback+0x36>
				num_char[i] = data[i+1];
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_UART_RxCpltCallback+0xc0>)
 8001554:	5cd1      	ldrb	r1, [r2, r3]
 8001556:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <HAL_UART_RxCpltCallback+0xc4>)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	460a      	mov	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<datapos-1;i++){
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbed      	blt.n	800154e <HAL_UART_RxCpltCallback+0x1e>
			}
			num_char[datapos-1] = '\0';
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <HAL_UART_RxCpltCallback+0xc4>)
 800157a:	2100      	movs	r1, #0
 800157c:	54d1      	strb	r1, [r2, r3]
			cangle = strtof(num_char, NULL);
 800157e:	2100      	movs	r1, #0
 8001580:	481c      	ldr	r0, [pc, #112]	@ (80015f4 <HAL_UART_RxCpltCallback+0xc4>)
 8001582:	f006 f993 	bl	80078ac <strtof>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_UART_RxCpltCallback+0xcc>)
 800158c:	edc3 7a00 	vstr	s15, [r3]
			mangle = cangle;
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_UART_RxCpltCallback+0xcc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1a      	ldr	r2, [pc, #104]	@ (8001600 <HAL_UART_RxCpltCallback+0xd0>)
 8001596:	6013      	str	r3, [r2, #0]
			//printf("%f\r\n",cangle);
		}
		for(int i =0;i < datapos;i++){
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	e007      	b.n	80015ae <HAL_UART_RxCpltCallback+0x7e>
			//printf("%d\r\n",data[i]);
			//printf("i:%d,data:%d\r\n",i,data[i]);

			data[i] = 0;
 800159e:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <HAL_UART_RxCpltCallback+0xc0>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		for(int i =0;i < datapos;i++){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf2      	blt.n	800159e <HAL_UART_RxCpltCallback+0x6e>
		}
		datapos = -1;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e00a      	b.n	80015d8 <HAL_UART_RxCpltCallback+0xa8>
	}else{
		data[datapos] = buffer[0];
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_UART_RxCpltCallback+0xbc>)
 80015c8:	7811      	ldrb	r1, [r2, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_UART_RxCpltCallback+0xc0>)
 80015cc:	54d1      	strb	r1, [r2, r3]
		//printf("%d\r\n",data[datapos]);
		datapos++;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015d6:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4904      	ldr	r1, [pc, #16]	@ (80015ec <HAL_UART_RxCpltCallback+0xbc>)
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <HAL_UART_RxCpltCallback+0xd4>)
 80015de:	f003 fa1d 	bl	8004a1c <HAL_UART_Receive_IT>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000490 	.word	0x20000490
 80015f0:	200004b0 	.word	0x200004b0
 80015f4:	200004d4 	.word	0x200004d4
 80015f8:	200004d0 	.word	0x200004d0
 80015fc:	200004f8 	.word	0x200004f8
 8001600:	20000480 	.word	0x20000480
 8001604:	20000338 	.word	0x20000338

08001608 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	printf("uart_error\r\n");
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <HAL_UART_ErrorCallback+0x2c>)
 8001612:	f007 f933 	bl	800887c <puts>
	HAL_UART_Abort(huart);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f003 fa4c 	bl	8004ab4 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, buffer, size);
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_UART_ErrorCallback+0x30>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4905      	ldr	r1, [pc, #20]	@ (800163c <HAL_UART_ErrorCallback+0x34>)
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <HAL_UART_ErrorCallback+0x38>)
 8001628:	f003 f9f8 	bl	8004a1c <HAL_UART_Receive_IT>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800b688 	.word	0x0800b688
 8001638:	20000008 	.word	0x20000008
 800163c:	20000490 	.word	0x20000490
 8001640:	20000338 	.word	0x20000338

08001644 <_write>:


int _write(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	b29a      	uxth	r2, r3
 8001654:	230a      	movs	r3, #10
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <_write+0x24>)
 800165a:	f003 f951 	bl	8004900 <HAL_UART_Transmit>
  return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200003cc 	.word	0x200003cc

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <main+0x6c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f007 f907 	bl	800888c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 fc60 	bl	8001f42 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001682:	f000 f833 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001686:	f000 f98b 	bl	80019a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800168a:	f000 f93d 	bl	8001908 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800168e:	f000 f8fd 	bl	800188c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001692:	f000 f8c5 	bl	8001820 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001696:	f000 f875 	bl	8001784 <MX_TIM4_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 800169a:	4810      	ldr	r0, [pc, #64]	@ (80016dc <main+0x70>)
 800169c:	f002 fc04 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80016a0:	480f      	ldr	r0, [pc, #60]	@ (80016e0 <main+0x74>)
 80016a2:	f002 fc01 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
  A4988_Initialize();
 80016a6:	f7ff fd3b 	bl	8001120 <A4988_Initialize>
//	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
//	  //HAL_GPIO_TogglePin(MDDIR_GPIO_Port, MDDIR_Pin);
//	  HAL_Delay(200);
	  printf("HEllo\r\n");
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <main+0x78>)
 80016ac:	f007 f8e6 	bl	800887c <puts>
	  if(n%2==0){
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <main+0x7c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <main+0x5e>
	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c6:	f001 f825 	bl	8002714 <HAL_GPIO_WritePin>
	  }
	  n = n+1;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <main+0x7c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <main+0x7c>)
 80016d2:	6013      	str	r3, [r2, #0]
	  printf("HEllo\r\n");
 80016d4:	e7e9      	b.n	80016aa <main+0x3e>
 80016d6:	bf00      	nop
 80016d8:	20000190 	.word	0x20000190
 80016dc:	200002a0 	.word	0x200002a0
 80016e0:	20000254 	.word	0x20000254
 80016e4:	0800b694 	.word	0x0800b694
 80016e8:	200004f4 	.word	0x200004f4

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	@ 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	2238      	movs	r2, #56	@ 0x38
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 fa7a 	bl	8008bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001712:	f001 fb9f 	bl	8002e54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2340      	movs	r3, #64	@ 0x40
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2302      	movs	r3, #2
 8001726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001728:	2302      	movs	r3, #2
 800172a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800172c:	2301      	movs	r3, #1
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001730:	230a      	movs	r3, #10
 8001732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001734:	2302      	movs	r3, #2
 8001736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001738:	2302      	movs	r3, #2
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fc39 	bl	8002fbc <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001750:	f000 f97c 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2303      	movs	r3, #3
 800175a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2102      	movs	r1, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 ff37 	bl	80035e0 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001778:	f000 f968 	bl	8001a4c <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3750      	adds	r7, #80	@ 0x50
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017a4:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <MX_TIM4_Init+0x98>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017aa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80017ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017b8:	2263      	movs	r2, #99	@ 0x63
 80017ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017c8:	4813      	ldr	r0, [pc, #76]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017ca:	f002 fb15 	bl	8003df8 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80017d4:	f000 f93a 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <MX_TIM4_Init+0x94>)
 80017e6:	f002 fd19 	bl	800421c <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017f0:	f000 f92c 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_TIM4_Init+0x94>)
 8001802:	f002 ff65 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800180c:	f000 f91e 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000254 	.word	0x20000254
 800181c:	40000800 	.word	0x40000800

08001820 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001830:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001832:	4a15      	ldr	r2, [pc, #84]	@ (8001888 <MX_TIM6_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001838:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800183c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001846:	2209      	movs	r2, #9
 8001848:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_TIM6_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001852:	f002 fad1 	bl	8003df8 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800185c:	f000 f8f6 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_TIM6_Init+0x64>)
 800186e:	f002 ff2f 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001878:	f000 f8e8 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002a0 	.word	0x200002a0
 8001888:	40001000 	.word	0x40001000

0800188c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */


  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <MX_TIM7_Init+0x70>)
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <MX_TIM7_Init+0x74>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80018a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018be:	480f      	ldr	r0, [pc, #60]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018c0:	f002 fa9a 	bl	8003df8 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018ca:	f000 f8bf 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4808      	ldr	r0, [pc, #32]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018dc:	f002 fef8 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80018e6:	f000 f8b1 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  htim7.Init.Period = stepInterval;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_TIM7_Init+0x78>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b02      	ldr	r3, [pc, #8]	@ (80018fc <MX_TIM7_Init+0x70>)
 80018f2:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200002ec 	.word	0x200002ec
 8001900:	40001400 	.word	0x40001400
 8001904:	2000047c 	.word	0x2000047c

08001908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <MX_USART2_UART_Init+0x94>)
 8001910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001950:	4811      	ldr	r0, [pc, #68]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001952:	f002 ff85 	bl	8004860 <HAL_UART_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800195c:	f000 f876 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001960:	2100      	movs	r1, #0
 8001962:	480d      	ldr	r0, [pc, #52]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001964:	f005 f8cf 	bl	8006b06 <HAL_UARTEx_SetTxFifoThreshold>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800196e:	f000 f86d 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001972:	2100      	movs	r1, #0
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001976:	f005 f904 	bl	8006b82 <HAL_UARTEx_SetRxFifoThreshold>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001980:	f000 f864 	bl	8001a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <MX_USART2_UART_Init+0x90>)
 8001986:	f005 f885 	bl	8006a94 <HAL_UARTEx_DisableFifoMode>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001990:	f000 f85c 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200003cc 	.word	0x200003cc
 800199c:	40004400 	.word	0x40004400

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_GPIO_Init+0xa4>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 51cc 	mov.w	r1, #6528	@ 0x1980
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f0:	f000 fe90 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDMS3_Pin|MDMS2_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2141      	movs	r1, #65	@ 0x41
 80019f8:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <MX_GPIO_Init+0xa8>)
 80019fa:	f000 fe8b 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDDIR_Pin MDMS1_Pin MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin;
 80019fe:	f44f 53cc 	mov.w	r3, #6528	@ 0x1980
 8001a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1a:	f000 fcf9 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDMS3_Pin MDMS2_Pin */
  GPIO_InitStruct.Pin = MDMS3_Pin|MDMS2_Pin;
 8001a1e:	2341      	movs	r3, #65	@ 0x41
 8001a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_GPIO_Init+0xa8>)
 8001a36:	f000 fceb 	bl	8002410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000400 	.word	0x48000400

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\r\n");
 8001a54:	4801      	ldr	r0, [pc, #4]	@ (8001a5c <Error_Handler+0x10>)
 8001a56:	f006 ff11 	bl	800887c <puts>
 8001a5a:	e7fb      	b.n	8001a54 <Error_Handler+0x8>
 8001a5c:	0800b69c 	.word	0x0800b69c

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a96:	f001 fa81 	bl	8002f9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_TIM_Base_MspInit+0xac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d114      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a26      	ldr	r2, [pc, #152]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	201e      	movs	r0, #30
 8001ad8:	f000 fb95 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001adc:	201e      	movs	r0, #30
 8001ade:	f000 fbac 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ae2:	e032      	b.n	8001b4a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b5c <HAL_TIM_Base_MspInit+0xb4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d114      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aee:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2102      	movs	r1, #2
 8001b0a:	2036      	movs	r0, #54	@ 0x36
 8001b0c:	f000 fb7b 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b10:	2036      	movs	r0, #54	@ 0x36
 8001b12:	f000 fb92 	bl	800223a <HAL_NVIC_EnableIRQ>
}
 8001b16:	e018      	b.n	8001b4a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a10      	ldr	r2, [pc, #64]	@ (8001b60 <HAL_TIM_Base_MspInit+0xb8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d113      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b26:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2037      	movs	r0, #55	@ 0x37
 8001b40:	f000 fb61 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b44:	2037      	movs	r0, #55	@ 0x37
 8001b46:	f000 fb78 	bl	800223a <HAL_NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40001000 	.word	0x40001000
 8001b60:	40001400 	.word	0x40001400

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09c      	sub	sp, #112	@ 0x70
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	2244      	movs	r2, #68	@ 0x44
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f007 f835 	bl	8008bf4 <memset>
  if(huart->Instance==USART1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a46      	ldr	r2, [pc, #280]	@ (8001ca8 <HAL_UART_MspInit+0x144>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d140      	bne.n	8001c16 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 ff39 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bac:	f7ff ff4e 	bl	8001a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bba:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	4a37      	ldr	r2, [pc, #220]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd4:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001be0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c00:	f000 fc06 	bl	8002410 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2025      	movs	r0, #37	@ 0x25
 8001c0a:	f000 fafc 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c0e:	2025      	movs	r0, #37	@ 0x25
 8001c10:	f000 fb13 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c14:	e043      	b.n	8001c9e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_UART_MspInit+0x14c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d13e      	bne.n	8001c9e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fef3 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001c38:	f7ff ff08 	bl	8001a4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_UART_MspInit+0x148>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f000 fbc1 	bl	8002410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2026      	movs	r0, #38	@ 0x26
 8001c94:	f000 fab7 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c98:	2026      	movs	r0, #38	@ 0x26
 8001c9a:	f000 face 	bl	800223a <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3770      	adds	r7, #112	@ 0x70
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0a:	f000 f96d 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <TIM4_IRQHandler+0x10>)
 8001d1a:	f002 f92f 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000254 	.word	0x20000254

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <USART1_IRQHandler+0x10>)
 8001d2e:	f002 ffcf 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000338 	.word	0x20000338

08001d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <USART2_IRQHandler+0x10>)
 8001d42:	f002 ffc5 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003cc 	.word	0x200003cc

08001d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM6_DAC_IRQHandler+0x10>)
 8001d56:	f002 f911 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002a0 	.word	0x200002a0

08001d64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <TIM7_IRQHandler+0x10>)
 8001d6a:	f002 f907 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002ec 	.word	0x200002ec

08001d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_kill>:

int _kill(int pid, int sig)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d92:	f006 ff93 	bl	8008cbc <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2216      	movs	r2, #22
 8001d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_exit>:

void _exit (int status)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffe7 	bl	8001d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <_exit+0x12>

08001dbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e00a      	b.n	8001de6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd0:	f3af 8000 	nop.w
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dbf0      	blt.n	8001dd0 <_read+0x12>
  }

  return len;
 8001dee:	687b      	ldr	r3, [r7, #4]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e20:	605a      	str	r2, [r3, #4]
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_isatty>:

int _isatty(int file)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f006 ff14 	bl	8008cbc <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20008000 	.word	0x20008000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200004fc 	.word	0x200004fc
 8001ec8:	20000650 	.word	0x20000650

08001ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <SystemInit+0x20>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <SystemInit+0x20>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ef2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff ffea 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	@ (8001f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	@ (8001f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	@ (8001f3c <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f006 fed3 	bl	8008cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f22:	f7ff fba3 	bl	800166c <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   r0, =_estack
 8001f28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f34:	0800bb28 	.word	0x0800bb28
  ldr r2, =_sbss
 8001f38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f3c:	20000650 	.word	0x20000650

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>

08001f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f94f 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f80e 	bl	8001f74 <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	e001      	b.n	8001f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f64:	f7ff fd7c 	bl	8001a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f68:	79fb      	ldrb	r3, [r7, #7]

}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <HAL_InitTick+0x68>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d022      	beq.n	8001fce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_InitTick+0x6c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_InitTick+0x68>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f95e 	bl	800225e <HAL_SYSTICK_Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d809      	bhi.n	8001fc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	f000 f926 	bl	8002206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_InitTick+0x70>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e004      	b.n	8001fd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e001      	b.n	8001fd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000014 	.word	0x20000014
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20000010 	.word	0x20000010

08001fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_IncTick+0x1c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_IncTick+0x20>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a03      	ldr	r2, [pc, #12]	@ (8002004 <HAL_IncTick+0x1c>)
 8001ff8:	6013      	str	r3, [r2, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	20000500 	.word	0x20000500
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000500 	.word	0x20000500

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	@ (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <__NVIC_SystemReset+0x24>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002192:	4904      	ldr	r1, [pc, #16]	@ (80021a4 <__NVIC_SystemReset+0x24>)
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_SystemReset+0x28>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800219a:	f3bf 8f4f 	dsb	sy
}
 800219e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <__NVIC_SystemReset+0x20>
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	05fa0004 	.word	0x05fa0004

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff78 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff13 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff2a 	bl	800206c <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff7a 	bl	8002118 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff49 	bl	80020c4 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff1d 	bl	8002088 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800225a:	f7ff ff91 	bl	8002180 <__NVIC_SystemReset>

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffa0 	bl	80021ac <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d005      	beq.n	800229a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2204      	movs	r2, #4
 8002292:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e037      	b.n	800230a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 020e 	bic.w	r2, r2, #14
 80022a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002308:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d00d      	beq.n	800235c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2204      	movs	r2, #4
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e047      	b.n	80023ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020e 	bic.w	r2, r2, #14
 800236a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002386:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800238a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f202 	lsl.w	r2, r1, r2
 800239e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
    }
  }
  return status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800241e:	e15a      	b.n	80026d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 814c 	beq.w	80026d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d005      	beq.n	8002450 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800244c:	2b02      	cmp	r3, #2
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d017      	beq.n	80024ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d123      	bne.n	8002542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80a6 	beq.w	80026d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002584:	4b5b      	ldr	r3, [pc, #364]	@ (80026f4 <HAL_GPIO_Init+0x2e4>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002588:	4a5a      	ldr	r2, [pc, #360]	@ (80026f4 <HAL_GPIO_Init+0x2e4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002590:	4b58      	ldr	r3, [pc, #352]	@ (80026f4 <HAL_GPIO_Init+0x2e4>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259c:	4a56      	ldr	r2, [pc, #344]	@ (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025c6:	d01f      	beq.n	8002608 <HAL_GPIO_Init+0x1f8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_GPIO_Init+0x2ec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d019      	beq.n	8002604 <HAL_GPIO_Init+0x1f4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002700 <HAL_GPIO_Init+0x2f0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_GPIO_Init+0x1f0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4a      	ldr	r2, [pc, #296]	@ (8002704 <HAL_GPIO_Init+0x2f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00d      	beq.n	80025fc <HAL_GPIO_Init+0x1ec>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a49      	ldr	r2, [pc, #292]	@ (8002708 <HAL_GPIO_Init+0x2f8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <HAL_GPIO_Init+0x1e8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_GPIO_Init+0x2fc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_GPIO_Init+0x1e4>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e00a      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025f4:	2306      	movs	r3, #6
 80025f6:	e008      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 80025fc:	2303      	movs	r3, #3
 80025fe:	e004      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_GPIO_Init+0x1fa>
 8002608:	2300      	movs	r3, #0
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261a:	4937      	ldr	r1, [pc, #220]	@ (80026f8 <HAL_GPIO_Init+0x2e8>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002628:	4b39      	ldr	r3, [pc, #228]	@ (8002710 <HAL_GPIO_Init+0x300>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800264c:	4a30      	ldr	r2, [pc, #192]	@ (8002710 <HAL_GPIO_Init+0x300>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002652:	4b2f      	ldr	r3, [pc, #188]	@ (8002710 <HAL_GPIO_Init+0x300>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002676:	4a26      	ldr	r2, [pc, #152]	@ (8002710 <HAL_GPIO_Init+0x300>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_GPIO_Init+0x300>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ca:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f ae9d 	bne.w	8002420 <HAL_GPIO_Init+0x10>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	48000400 	.word	0x48000400
 8002700:	48000800 	.word	0x48000800
 8002704:	48000c00 	.word	0x48000c00
 8002708:	48001000 	.word	0x48001000
 800270c:	48001400 	.word	0x48001400
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002730:	e002      	b.n	8002738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	f040 80fd 	bne.w	8002966 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_I2C_Mem_Read+0x34>
 8002772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0f1      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2C_Mem_Read+0x4e>
 800278e:	2302      	movs	r3, #2
 8002790:	e0ea      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800279a:	f7ff fc37 	bl	800200c <HAL_GetTick>
 800279e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2319      	movs	r3, #25
 80027a6:	2201      	movs	r2, #1
 80027a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f95b 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0d5      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2222      	movs	r2, #34	@ 0x22
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e4:	88f8      	ldrh	r0, [r7, #6]
 80027e6:	893a      	ldrh	r2, [r7, #8]
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4603      	mov	r3, r0
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f8bf 	bl	8002978 <I2C_RequestMemoryRead>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0ad      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d90e      	bls.n	8002834 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22ff      	movs	r2, #255	@ 0xff
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <HAL_I2C_Mem_Read+0x22c>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fadf 	bl	8002df0 <I2C_TransferConfig>
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_I2C_Mem_Read+0x22c>)
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 face 	bl	8002df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	2200      	movs	r2, #0
 800285c:	2104      	movs	r1, #4
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f902 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07c      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <HAL_I2C_Mem_Read+0x1d0>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d130      	bne.n	8002914 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f8d3 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e04d      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2bff      	cmp	r3, #255	@ 0xff
 80028d4:	d90e      	bls.n	80028f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	@ 0xff
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fa7f 	bl	8002df0 <I2C_TransferConfig>
 80028f2:	e00f      	b.n	8002914 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	b2da      	uxtb	r2, r3
 8002904:	8979      	ldrh	r1, [r7, #10]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa6e 	bl	8002df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d19a      	bne.n	8002854 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f940 	bl	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01a      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_I2C_Mem_Read+0x230>)
 8002946:	400b      	ands	r3, r1
 8002948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	80002400 	.word	0x80002400
 8002974:	fe00e800 	.word	0xfe00e800

08002978 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4603      	mov	r3, r0
 8002988:	817b      	strh	r3, [r7, #10]
 800298a:	460b      	mov	r3, r1
 800298c:	813b      	strh	r3, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <I2C_RequestMemoryRead+0xa4>)
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2300      	movs	r3, #0
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fa26 	bl	8002df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8b6 	bl	8002b1a <I2C_WaitOnTXISFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e02c      	b.n	8002a12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d105      	bne.n	80029ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029be:	893b      	ldrh	r3, [r7, #8]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80029c8:	e015      	b.n	80029f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f89c 	bl	8002b1a <I2C_WaitOnTXISFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e012      	b.n	8002a12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2140      	movs	r1, #64	@ 0x40
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f831 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	80002000 	.word	0x80002000

08002a20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d103      	bne.n	8002a3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d007      	beq.n	8002a5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	619a      	str	r2, [r3, #24]
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a78:	e03b      	b.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f8d6 	bl	8002c30 <I2C_IsErrorOccurred>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e041      	b.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d02d      	beq.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7ff fab9 	bl	800200c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x44>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d122      	bne.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d113      	bne.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d0b4      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b26:	e033      	b.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f87f 	bl	8002c30 <I2C_IsErrorOccurred>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e031      	b.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d025      	beq.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b44:	f7ff fa62 	bl	800200c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11a      	bne.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d013      	beq.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d1c4      	bne.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb4:	e02f      	b.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f838 	bl	8002c30 <I2C_IsErrorOccurred>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e02d      	b.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7ff fa1f 	bl	800200c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11a      	bne.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d013      	beq.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d1c8      	bne.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d068      	beq.n	8002d2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c64:	e049      	b.n	8002cfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d045      	beq.n	8002cfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c6e:	f7ff f9cd 	bl	800200c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <I2C_IsErrorOccurred+0x54>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d13a      	bne.n	8002cfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca6:	d121      	bne.n	8002cec <I2C_IsErrorOccurred+0xbc>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cae:	d01d      	beq.n	8002cec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d01a      	beq.n	8002cec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cc6:	f7ff f9a1 	bl	800200c <HAL_GetTick>
 8002cca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ccc:	e00e      	b.n	8002cec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cce:	f7ff f99d 	bl	800200c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b19      	cmp	r3, #25
 8002cda:	d907      	bls.n	8002cec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cea:	e006      	b.n	8002cfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d1e9      	bne.n	8002cce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d003      	beq.n	8002d10 <I2C_IsErrorOccurred+0xe0>
 8002d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0aa      	beq.n	8002c66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01c      	beq.n	8002dde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fe3b 	bl	8002a20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <I2C_IsErrorOccurred+0x1bc>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3728      	adds	r7, #40	@ 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	fe00e800 	.word	0xfe00e800

08002df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e08:	7a7b      	ldrb	r3, [r7, #9]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	0d5b      	lsrs	r3, r3, #21
 8002e2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <I2C_TransferConfig+0x60>)
 8002e30:	430b      	orrs	r3, r1
 8002e32:	43db      	mvns	r3, r3
 8002e34:	ea02 0103 	and.w	r1, r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	03ff63ff 	.word	0x03ff63ff

08002e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d141      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e62:	4b4b      	ldr	r3, [pc, #300]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6e:	d131      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e70:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e76:	4a46      	ldr	r2, [pc, #280]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e80:	4b43      	ldr	r3, [pc, #268]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e88:	4a41      	ldr	r2, [pc, #260]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e90:	4b40      	ldr	r3, [pc, #256]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2232      	movs	r2, #50	@ 0x32
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea6:	e002      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eba:	d102      	bne.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f2      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ec2:	4b33      	ldr	r3, [pc, #204]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ece:	d158      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e057      	b.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eda:	4a2d      	ldr	r2, [pc, #180]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ee0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ee4:	e04d      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eec:	d141      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eee:	4b28      	ldr	r3, [pc, #160]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d131      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f02:	4a23      	ldr	r2, [pc, #140]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0c:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f14:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2232      	movs	r2, #50	@ 0x32
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a1c      	ldr	r2, [pc, #112]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f32:	e002      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d102      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f2      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5a:	d112      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e011      	b.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f70:	e007      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f72:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f7a:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40007000 	.word	0x40007000
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002faa:	6093      	str	r3, [r2, #8]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40007000 	.word	0x40007000

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e2fe      	b.n	80035cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b97      	ldr	r3, [pc, #604]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b94      	ldr	r3, [pc, #592]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3e>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_OscConfig+0x44>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b8d      	ldr	r3, [pc, #564]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e2d9      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x74>
 8003022:	4b85      	ldr	r3, [pc, #532]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a84      	ldr	r2, [pc, #528]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b7f      	ldr	r3, [pc, #508]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7e      	ldr	r2, [pc, #504]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b7c      	ldr	r3, [pc, #496]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7b      	ldr	r2, [pc, #492]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003054:	4b78      	ldr	r3, [pc, #480]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a77      	ldr	r2, [pc, #476]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a74      	ldr	r2, [pc, #464]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe ffca 	bl	800200c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe ffc6 	bl	800200c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e29e      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308e:	4b6a      	ldr	r3, [pc, #424]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xc0>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe ffb6 	bl	800200c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe ffb2 	bl	800200c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	@ 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e28a      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b6:	4b60      	ldr	r3, [pc, #384]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0xe8>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d2:	4b59      	ldr	r3, [pc, #356]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030dc:	4b56      	ldr	r3, [pc, #344]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d102      	bne.n	80030f2 <HAL_RCC_OscConfig+0x136>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_OscConfig+0x13c>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d11f      	bne.n	8003138 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_OscConfig+0x154>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e25d      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b49      	ldr	r3, [pc, #292]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	4946      	ldr	r1, [pc, #280]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003124:	4b45      	ldr	r3, [pc, #276]	@ (800323c <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe ff23 	bl	8001f74 <HAL_InitTick>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d043      	beq.n	80031bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e249      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d023      	beq.n	8003188 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3c      	ldr	r2, [pc, #240]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe ff5e 	bl	800200c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe ff5a 	bl	800200c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e232      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003166:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	492d      	ldr	r1, [pc, #180]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
 8003186:	e01a      	b.n	80031be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800318e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe ff3a 	bl	800200c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319c:	f7fe ff36 	bl	800200c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e20e      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ae:	4b22      	ldr	r3, [pc, #136]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1e0>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d041      	beq.n	800324e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01c      	beq.n	800320c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d8:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe ff13 	bl	800200c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe ff0f 	bl	800200c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1e7      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ef      	beq.n	80031ea <HAL_RCC_OscConfig+0x22e>
 800320a:	e020      	b.n	800324e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003212:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe fef6 	bl	800200c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003222:	e00d      	b.n	8003240 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe fef2 	bl	800200c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d906      	bls.n	8003240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1ca      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003240:	4b8c      	ldr	r3, [pc, #560]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ea      	bne.n	8003224 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80a6 	beq.w	80033a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003260:	4b84      	ldr	r3, [pc, #528]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_OscConfig+0x2b4>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x2b6>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b7f      	ldr	r3, [pc, #508]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	4a7e      	ldr	r2, [pc, #504]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003280:	6593      	str	r3, [r2, #88]	@ 0x58
 8003282:	4b7c      	ldr	r3, [pc, #496]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800328e:	2301      	movs	r3, #1
 8003290:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	4b79      	ldr	r3, [pc, #484]	@ (8003478 <HAL_RCC_OscConfig+0x4bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329e:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCC_OscConfig+0x4bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a75      	ldr	r2, [pc, #468]	@ (8003478 <HAL_RCC_OscConfig+0x4bc>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032aa:	f7fe feaf 	bl	800200c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fe feab 	bl	800200c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e183      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003478 <HAL_RCC_OscConfig+0x4bc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d108      	bne.n	80032ea <HAL_RCC_OscConfig+0x32e>
 80032d8:	4b66      	ldr	r3, [pc, #408]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	4a65      	ldr	r2, [pc, #404]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e8:	e024      	b.n	8003334 <HAL_RCC_OscConfig+0x378>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d110      	bne.n	8003314 <HAL_RCC_OscConfig+0x358>
 80032f2:	4b60      	ldr	r3, [pc, #384]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003302:	4b5c      	ldr	r3, [pc, #368]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003308:	4a5a      	ldr	r2, [pc, #360]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003312:	e00f      	b.n	8003334 <HAL_RCC_OscConfig+0x378>
 8003314:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331a:	4a56      	ldr	r2, [pc, #344]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003324:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fe66 	bl	800200c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7fe fe62 	bl	800200c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e138      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b46      	ldr	r3, [pc, #280]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ed      	beq.n	8003344 <HAL_RCC_OscConfig+0x388>
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fe4f 	bl	800200c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe fe4b 	bl	800200c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e121      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003388:	4b3a      	ldr	r3, [pc, #232]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ed      	bne.n	8003372 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003396:	7ffb      	ldrb	r3, [r7, #31]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	4a34      	ldr	r2, [pc, #208]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fe1e 	bl	800200c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d4:	f7fe fe1a 	bl	800200c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0f2      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e6:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x418>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe fe01 	bl	800200c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340e:	f7fe fdfd 	bl	800200c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0d5      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80c9 	beq.w	80035ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003438:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b0c      	cmp	r3, #12
 8003442:	f000 8083 	beq.w	800354c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d15e      	bne.n	800350c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a08      	ldr	r2, [pc, #32]	@ (8003474 <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fdd7 	bl	800200c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	e00c      	b.n	800347c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fdd3 	bl	800200c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d905      	bls.n	800347c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0ab      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	4b55      	ldr	r3, [pc, #340]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ec      	bne.n	8003462 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003488:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <HAL_RCC_OscConfig+0x61c>)
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a11      	ldr	r1, [r2, #32]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003498:	3a01      	subs	r2, #1
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034a2:	0212      	lsls	r2, r2, #8
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034aa:	0852      	lsrs	r2, r2, #1
 80034ac:	3a01      	subs	r2, #1
 80034ae:	0552      	lsls	r2, r2, #21
 80034b0:	4311      	orrs	r1, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0652      	lsls	r2, r2, #25
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034c2:	06d2      	lsls	r2, r2, #27
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4943      	ldr	r1, [pc, #268]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d8:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a3d      	ldr	r2, [pc, #244]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fd92 	bl	800200c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fd8e 	bl	800200c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e066      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	4b35      	ldr	r3, [pc, #212]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x530>
 800350a:	e05e      	b.n	80035ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a30      	ldr	r2, [pc, #192]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 8003512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fd78 	bl	800200c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fd74 	bl	800200c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04c      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003532:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	4924      	ldr	r1, [pc, #144]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <HAL_RCC_OscConfig+0x620>)
 8003546:	4013      	ands	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
 800354a:	e03e      	b.n	80035ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e039      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003558:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_RCC_OscConfig+0x618>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d12c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d123      	bne.n	80035c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d11b      	bne.n	80035c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	019f800c 	.word	0x019f800c
 80035dc:	feeefffc 	.word	0xfeeefffc

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e11e      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b91      	ldr	r3, [pc, #580]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d910      	bls.n	8003628 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b8e      	ldr	r3, [pc, #568]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 020f 	bic.w	r2, r3, #15
 800360e:	498c      	ldr	r1, [pc, #560]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b8a      	ldr	r3, [pc, #552]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e106      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d073      	beq.n	800371c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d129      	bne.n	8003690 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363c:	4b81      	ldr	r3, [pc, #516]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0f4      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800364c:	f000 f99e 	bl	800398c <RCC_GetSysClockFreqFromPLLSource>
 8003650:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4a7c      	ldr	r2, [pc, #496]	@ (8003848 <HAL_RCC_ClockConfig+0x268>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d93f      	bls.n	80036da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800365a:	4b7a      	ldr	r3, [pc, #488]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800366e:	2b00      	cmp	r3, #0
 8003670:	d033      	beq.n	80036da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d12f      	bne.n	80036da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800367a:	4b72      	ldr	r3, [pc, #456]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003682:	4a70      	ldr	r2, [pc, #448]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003688:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e024      	b.n	80036da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0c6      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b66      	ldr	r3, [pc, #408]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0be      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036b8:	f000 f8ce 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4a61      	ldr	r2, [pc, #388]	@ (8003848 <HAL_RCC_ClockConfig+0x268>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d909      	bls.n	80036da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80036d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b5a      	ldr	r3, [pc, #360]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4957      	ldr	r1, [pc, #348]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fe fc8e 	bl	800200c <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe fc8a 	bl	800200c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e095      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b4e      	ldr	r3, [pc, #312]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003734:	4b43      	ldr	r3, [pc, #268]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a42      	ldr	r2, [pc, #264]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800373a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800373e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800374c:	4b3d      	ldr	r3, [pc, #244]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003754:	4a3b      	ldr	r2, [pc, #236]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800375a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b39      	ldr	r3, [pc, #228]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4936      	ldr	r1, [pc, #216]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
 800376e:	e008      	b.n	8003782 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b80      	cmp	r3, #128	@ 0x80
 8003774:	d105      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003776:	4b33      	ldr	r3, [pc, #204]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4a32      	ldr	r2, [pc, #200]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 800377c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003780:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003782:	4b2f      	ldr	r3, [pc, #188]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d21d      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 020f 	bic.w	r2, r3, #15
 8003798:	4929      	ldr	r1, [pc, #164]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037a0:	f7fe fc34 	bl	800200c <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fe fc30 	bl	800200c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e03b      	b.n	8003836 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <HAL_RCC_ClockConfig+0x260>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1ed      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4917      	ldr	r1, [pc, #92]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490f      	ldr	r1, [pc, #60]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800380a:	f000 f825 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490c      	ldr	r1, [pc, #48]	@ (800384c <HAL_RCC_ClockConfig+0x26c>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x270>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_RCC_ClockConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fba0 	bl	8001f74 <HAL_InitTick>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	04c4b400 	.word	0x04c4b400
 800384c:	0800b6a8 	.word	0x0800b6a8
 8003850:	2000000c 	.word	0x2000000c
 8003854:	20000010 	.word	0x20000010

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800385e:	4b2c      	ldr	r3, [pc, #176]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d102      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800386a:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xbc>)
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e047      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003870:	4b27      	ldr	r3, [pc, #156]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d102      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800387c:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xc0>)
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e03e      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003882:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d136      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800388e:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3301      	adds	r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68d2      	ldr	r2, [r2, #12]
 80038b8:	0a12      	lsrs	r2, r2, #8
 80038ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
      break;
 80038c4:	e00c      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c6:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d0:	68d2      	ldr	r2, [r2, #12]
 80038d2:	0a12      	lsrs	r2, r2, #8
 80038d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	0e5b      	lsrs	r3, r3, #25
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e001      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003900:	693b      	ldr	r3, [r7, #16]
}
 8003902:	4618      	mov	r0, r3
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	0800b6b8 	.word	0x0800b6b8

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003964:	f7ff ffda 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	0800b6b8 	.word	0x0800b6b8

0800398c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d10c      	bne.n	80039ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ba:	68d2      	ldr	r2, [r2, #12]
 80039bc:	0a12      	lsrs	r2, r2, #8
 80039be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
    break;
 80039c8:	e00c      	b.n	80039e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ca:	4a12      	ldr	r2, [pc, #72]	@ (8003a14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	0a12      	lsrs	r2, r2, #8
 80039d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
    break;
 80039e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e4:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0e5b      	lsrs	r3, r3, #25
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039fe:	687b      	ldr	r3, [r7, #4]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	007a1200 	.word	0x007a1200
 8003a14:	00f42400 	.word	0x00f42400

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8098 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a52:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a62:	4b3a      	ldr	r3, [pc, #232]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a39      	ldr	r2, [pc, #228]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe facd 	bl	800200c <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a74:	e009      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe fac9 	bl	800200c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	74fb      	strb	r3, [r7, #19]
        break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8a:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ef      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d159      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01e      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d019      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab8:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac4:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae4:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe fa89 	bl	800200c <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	e00b      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fa85 	bl	800200c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	74fb      	strb	r3, [r7, #19]
            break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ec      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2a:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	4903      	ldr	r1, [pc, #12]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b40:	e008      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	74bb      	strb	r3, [r7, #18]
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b54:	7c7b      	ldrb	r3, [r7, #17]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	4aa5      	ldr	r2, [pc, #660]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b72:	4ba0      	ldr	r3, [pc, #640]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f023 0203 	bic.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	499c      	ldr	r1, [pc, #624]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b94:	4b97      	ldr	r3, [pc, #604]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 020c 	bic.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4994      	ldr	r1, [pc, #592]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	498b      	ldr	r1, [pc, #556]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd8:	4b86      	ldr	r3, [pc, #536]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4983      	ldr	r1, [pc, #524]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bfa:	4b7e      	ldr	r3, [pc, #504]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	497a      	ldr	r1, [pc, #488]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c1c:	4b75      	ldr	r3, [pc, #468]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	4972      	ldr	r1, [pc, #456]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4969      	ldr	r1, [pc, #420]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c60:	4b64      	ldr	r3, [pc, #400]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4961      	ldr	r1, [pc, #388]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c82:	4b5c      	ldr	r3, [pc, #368]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	4958      	ldr	r1, [pc, #352]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca4:	4b53      	ldr	r3, [pc, #332]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	4950      	ldr	r1, [pc, #320]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cdc:	4b45      	ldr	r3, [pc, #276]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	4942      	ldr	r1, [pc, #264]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d015      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d14:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	4934      	ldr	r1, [pc, #208]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d32:	d105      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d34:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a2e      	ldr	r2, [pc, #184]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4c:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	4926      	ldr	r1, [pc, #152]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a20      	ldr	r2, [pc, #128]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d015      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d84:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	4918      	ldr	r1, [pc, #96]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da2:	d105      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	490a      	ldr	r1, [pc, #40]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dda:	d105      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003de8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000

08003df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e049      	b.n	8003e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fe42 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 fb12 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e04a      	b.n	8003f56 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d013      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x6c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x6c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x6c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x6c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d115      	bne.n	8003f40 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	4b17      	ldr	r3, [pc, #92]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d015      	beq.n	8003f52 <HAL_TIM_Base_Start_IT+0xaa>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d011      	beq.n	8003f52 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e008      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e000      	b.n	8003f54 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa2c 	bl	8004424 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa1e 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa2f 	bl	8004438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa06 	bl	8004424 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f9f8 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa09 	bl	8004438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9e0 	bl	8004424 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9d2 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9e3 	bl	8004438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0210 	mvn.w	r2, #16
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2208      	movs	r2, #8
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9ba 	bl	8004424 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9ac 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9bd 	bl	8004438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd f8c0 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fb69 	bl	80047e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb61 	bl	80047fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f977 	bl	800444c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0220 	mvn.w	r2, #32
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb29 	bl	80047d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00c      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb35 	bl	8004810 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80041c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb2d 	bl	8004824 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb25 	bl	8004838 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800420a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb1d 	bl	800484c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIM_ConfigClockSource+0x1c>
 8004234:	2302      	movs	r3, #2
 8004236:	e0de      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x1da>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a63      	ldr	r2, [pc, #396]	@ (8004400 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f000 80a9 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004278:	4a61      	ldr	r2, [pc, #388]	@ (8004400 <HAL_TIM_ConfigClockSource+0x1e4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f200 80ae 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 8004280:	4a60      	ldr	r2, [pc, #384]	@ (8004404 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 80a1 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004288:	4a5e      	ldr	r2, [pc, #376]	@ (8004404 <HAL_TIM_ConfigClockSource+0x1e8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f200 80a6 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 8004290:	4a5d      	ldr	r2, [pc, #372]	@ (8004408 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f000 8099 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004298:	4a5b      	ldr	r2, [pc, #364]	@ (8004408 <HAL_TIM_ConfigClockSource+0x1ec>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f200 809e 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042a0:	4a5a      	ldr	r2, [pc, #360]	@ (800440c <HAL_TIM_ConfigClockSource+0x1f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f000 8091 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 80042a8:	4a58      	ldr	r2, [pc, #352]	@ (800440c <HAL_TIM_ConfigClockSource+0x1f0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f200 8096 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042b4:	f000 8089 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 80042b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042bc:	f200 808e 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c4:	d03e      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x128>
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ca:	f200 8087 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d2:	f000 8086 	beq.w	80043e2 <HAL_TIM_ConfigClockSource+0x1c6>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	d87f      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042dc:	2b70      	cmp	r3, #112	@ 0x70
 80042de:	d01a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0xfa>
 80042e0:	2b70      	cmp	r3, #112	@ 0x70
 80042e2:	d87b      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042e4:	2b60      	cmp	r3, #96	@ 0x60
 80042e6:	d050      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x16e>
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d877      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042ec:	2b50      	cmp	r3, #80	@ 0x50
 80042ee:	d03c      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x14e>
 80042f0:	2b50      	cmp	r3, #80	@ 0x50
 80042f2:	d873      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d058      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x18e>
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d86f      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 80042fc:	2b30      	cmp	r3, #48	@ 0x30
 80042fe:	d064      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004300:	2b30      	cmp	r3, #48	@ 0x30
 8004302:	d86b      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d060      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d867      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004310:	2b10      	cmp	r3, #16
 8004312:	d05a      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x1ae>
 8004314:	e062      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004326:	f000 f9b3 	bl	8004690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	609a      	str	r2, [r3, #8]
      break;
 8004342:	e04f      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004354:	f000 f99c 	bl	8004690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e03c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	461a      	mov	r2, r3
 8004378:	f000 f90e 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2150      	movs	r1, #80	@ 0x50
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f967 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8004388:	e02c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004396:	461a      	mov	r2, r3
 8004398:	f000 f92d 	bl	80045f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2160      	movs	r1, #96	@ 0x60
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f957 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e01c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 f8ee 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2140      	movs	r1, #64	@ 0x40
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f947 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e00c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f000 f93e 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043da:	e003      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      break;
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80043e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	00100070 	.word	0x00100070
 8004404:	00100040 	.word	0x00100040
 8004408:	00100030 	.word	0x00100030
 800440c:	00100020 	.word	0x00100020

08004410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a42      	ldr	r2, [pc, #264]	@ (800457c <TIM_Base_SetConfig+0x11c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3f      	ldr	r2, [pc, #252]	@ (8004580 <TIM_Base_SetConfig+0x120>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3e      	ldr	r2, [pc, #248]	@ (8004584 <TIM_Base_SetConfig+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3d      	ldr	r2, [pc, #244]	@ (8004588 <TIM_Base_SetConfig+0x128>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d108      	bne.n	80044aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a33      	ldr	r2, [pc, #204]	@ (800457c <TIM_Base_SetConfig+0x11c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01b      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b8:	d017      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <TIM_Base_SetConfig+0x120>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004584 <TIM_Base_SetConfig+0x124>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004588 <TIM_Base_SetConfig+0x128>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2d      	ldr	r2, [pc, #180]	@ (800458c <TIM_Base_SetConfig+0x12c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004590 <TIM_Base_SetConfig+0x130>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004594 <TIM_Base_SetConfig+0x134>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a16      	ldr	r2, [pc, #88]	@ (800457c <TIM_Base_SetConfig+0x11c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00f      	beq.n	8004548 <TIM_Base_SetConfig+0xe8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <TIM_Base_SetConfig+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <TIM_Base_SetConfig+0xe8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a16      	ldr	r2, [pc, #88]	@ (800458c <TIM_Base_SetConfig+0x12c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0xe8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0xe8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <TIM_Base_SetConfig+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]
  }
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800466c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	f043 0307 	orr.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e065      	b.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d013      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a13      	ldr	r2, [pc, #76]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10c      	bne.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800478e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40014000 	.word	0x40014000

080047d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e042      	b.n	80048f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fd f96d 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2224      	movs	r2, #36	@ 0x24
 800488e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f834 	bl	8005918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fd65 	bl	8005380 <UART_SetConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e01b      	b.n	80048f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f8b3 	bl	8005a5c <UART_CheckIdleState>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	2b20      	cmp	r3, #32
 8004918:	d17b      	bne.n	8004a12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Transmit+0x26>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e074      	b.n	8004a14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2221      	movs	r2, #33	@ 0x21
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493a:	f7fd fb67 	bl	800200c <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d108      	bne.n	800496c <HAL_UART_Transmit+0x6c>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e003      	b.n	8004974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004974:	e030      	b.n	80049d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f915 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03d      	b.n	8004a14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3302      	adds	r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e007      	b.n	80049c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1c8      	bne.n	8004976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2140      	movs	r1, #64	@ 0x40
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 f8de 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e006      	b.n	8004a14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	@ 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d137      	bne.n	8004aa4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UART_Receive_IT+0x24>
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e030      	b.n	8004aa6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <HAL_UART_Receive_IT+0x94>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01f      	beq.n	8004a94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69f9      	ldr	r1, [r7, #28]
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 f8f6 	bl	8005c8c <UART_Start_Receive_IT>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	e000      	b.n	8004aa6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3728      	adds	r7, #40	@ 0x28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40008000 	.word	0x40008000

08004ab4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b0a0      	sub	sp, #128	@ 0x80
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004acc:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8004ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004adc:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004ae0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b00:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b12:	657a      	str	r2, [r7, #84]	@ 0x54
 8004b14:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e3      	bne.n	8004aee <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d118      	bne.n	8004b60 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d137      	bne.n	8004bde <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d019      	beq.n	8004bde <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bae:	2200      	movs	r2, #0
 8004bb0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd fb5d 	bl	8002276 <HAL_DMA_Abort>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fc15 	bl	80023f6 <HAL_DMA_GetError>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d105      	bne.n	8004bde <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e073      	b.n	8004cc6 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d13b      	bne.n	8004c64 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c0c:	61ba      	str	r2, [r7, #24]
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01c      	beq.n	8004c64 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fb1b 	bl	8002276 <HAL_DMA_Abort>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00e      	beq.n	8004c64 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd fbd2 	bl	80023f6 <HAL_DMA_GetError>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d105      	bne.n	8004c64 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e030      	b.n	8004cc6 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	220f      	movs	r2, #15
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c84:	d107      	bne.n	8004c96 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0210 	orr.w	r2, r2, #16
 8004c94:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0208 	orr.w	r2, r2, #8
 8004ca4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3780      	adds	r7, #128	@ 0x80
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004cfe:	4013      	ands	r3, r2
 8004d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11b      	bne.n	8004d44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8300 	beq.w	800533a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
      }
      return;
 8004d42:	e2fa      	b.n	800533a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8123 	beq.w	8004f94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d52:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <HAL_UART_IRQHandler+0x2b8>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f8c <HAL_UART_IRQHandler+0x2bc>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8116 	beq.w	8004f94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_IRQHandler+0xc8>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xf8>
 8004da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d011      	beq.n	8004df8 <HAL_UART_IRQHandler+0x128>
 8004dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e14:	4b5c      	ldr	r3, [pc, #368]	@ (8004f88 <HAL_UART_IRQHandler+0x2b8>)
 8004e16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2208      	movs	r2, #8
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	f043 0208 	orr.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_UART_IRQHandler+0x196>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8266 	beq.w	800533e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d054      	beq.n	8004f74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f001 f800 	bl	8005ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d146      	bne.n	8004f6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d017      	beq.n	8004f64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_UART_IRQHandler+0x2c0>)
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fd f9ef 	bl	8002328 <HAL_DMA_Abort_IT>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	e00f      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fc fb4f 	bl	8001608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6a:	e00b      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fc fb4b 	bl	8001608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f72:	e007      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fc fb47 	bl	8001608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f82:	e1dc      	b.n	800533e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	bf00      	nop
    return;
 8004f86:	e1da      	b.n	800533e <HAL_UART_IRQHandler+0x66e>
 8004f88:	10000001 	.word	0x10000001
 8004f8c:	04000120 	.word	0x04000120
 8004f90:	08005f9d 	.word	0x08005f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 8170 	bne.w	800527e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8169 	beq.w	800527e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8162 	beq.w	800527e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	f040 80d8 	bne.w	8005182 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80af 	beq.w	8005148 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	f080 80a7 	bcs.w	8005148 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 8087 	bne.w	8005126 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800502c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005046:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800504e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800505a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1da      	bne.n	8005018 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3308      	adds	r3, #8
 8005068:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005086:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800508a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800508e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e1      	bne.n	8005062 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3308      	adds	r3, #8
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e3      	bne.n	800509e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005108:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800510c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e4      	bne.n	80050e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd f8a8 	bl	8002276 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005138:	b29b      	uxth	r3, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	b29b      	uxth	r3, r3
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f911 	bl	8005368 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005146:	e0fc      	b.n	8005342 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800514e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005152:	429a      	cmp	r2, r3
 8005154:	f040 80f5 	bne.w	8005342 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 80eb 	bne.w	8005342 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8f4 	bl	8005368 <HAL_UARTEx_RxEventCallback>
      return;
 8005180:	e0df      	b.n	8005342 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800518e:	b29b      	uxth	r3, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80d1 	beq.w	8005346 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80051a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80cc 	beq.w	8005346 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e4      	bne.n	80051ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	623b      	str	r3, [r7, #32]
   return(result);
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800520c:	633a      	str	r2, [r7, #48]	@ 0x30
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e1      	bne.n	80051e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	60fb      	str	r3, [r7, #12]
   return(result);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0310 	bic.w	r3, r3, #16
 8005248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	617b      	str	r3, [r7, #20]
   return(result);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e4      	bne.n	8005234 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f876 	bl	8005368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800527c:	e063      	b.n	8005346 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <HAL_UART_IRQHandler+0x5d8>
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800529e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fbd9 	bl	8006a58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052a6:	e051      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d014      	beq.n	80052de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d03a      	beq.n	800534a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
    }
    return;
 80052dc:	e035      	b.n	800534a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x62e>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fe62 	bl	8005fc0 <UART_EndTransmit_IT>
    return;
 80052fc:	e026      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_UART_IRQHandler+0x64e>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fbb2 	bl	8006a80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531c:	e016      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d010      	beq.n	800534c <HAL_UART_IRQHandler+0x67c>
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532e:	2b00      	cmp	r3, #0
 8005330:	da0c      	bge.n	800534c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fb9a 	bl	8006a6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005338:	e008      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 800533a:	bf00      	nop
 800533c:	e006      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
    return;
 800533e:	bf00      	nop
 8005340:	e004      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
    return;
 800534a:	bf00      	nop
  }
}
 800534c:	37e8      	adds	r7, #232	@ 0xe8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop

08005354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b08c      	sub	sp, #48	@ 0x30
 8005386:	af00      	add	r7, sp, #0
 8005388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4bab      	ldr	r3, [pc, #684]	@ (800565c <UART_SetConfig+0x2dc>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa0      	ldr	r2, [pc, #640]	@ (8005660 <UART_SetConfig+0x2e0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e8:	4313      	orrs	r3, r2
 80053ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005400:	430b      	orrs	r3, r1
 8005402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	f023 010f 	bic.w	r1, r3, #15
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a91      	ldr	r2, [pc, #580]	@ (8005664 <UART_SetConfig+0x2e4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d125      	bne.n	8005470 <UART_SetConfig+0xf0>
 8005424:	4b90      	ldr	r3, [pc, #576]	@ (8005668 <UART_SetConfig+0x2e8>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d81a      	bhi.n	8005468 <UART_SetConfig+0xe8>
 8005432:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <UART_SetConfig+0xb8>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005449 	.word	0x08005449
 800543c:	08005459 	.word	0x08005459
 8005440:	08005451 	.word	0x08005451
 8005444:	08005461 	.word	0x08005461
 8005448:	2301      	movs	r3, #1
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e0d6      	b.n	80055fe <UART_SetConfig+0x27e>
 8005450:	2302      	movs	r3, #2
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e0d2      	b.n	80055fe <UART_SetConfig+0x27e>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e0ce      	b.n	80055fe <UART_SetConfig+0x27e>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e0ca      	b.n	80055fe <UART_SetConfig+0x27e>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e0c6      	b.n	80055fe <UART_SetConfig+0x27e>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a7d      	ldr	r2, [pc, #500]	@ (800566c <UART_SetConfig+0x2ec>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d138      	bne.n	80054ec <UART_SetConfig+0x16c>
 800547a:	4b7b      	ldr	r3, [pc, #492]	@ (8005668 <UART_SetConfig+0x2e8>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d82d      	bhi.n	80054e4 <UART_SetConfig+0x164>
 8005488:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <UART_SetConfig+0x110>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054e5 	.word	0x080054e5
 8005498:	080054e5 	.word	0x080054e5
 800549c:	080054e5 	.word	0x080054e5
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054e5 	.word	0x080054e5
 80054a8:	080054e5 	.word	0x080054e5
 80054ac:	080054e5 	.word	0x080054e5
 80054b0:	080054cd 	.word	0x080054cd
 80054b4:	080054e5 	.word	0x080054e5
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e098      	b.n	80055fe <UART_SetConfig+0x27e>
 80054cc:	2302      	movs	r3, #2
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e094      	b.n	80055fe <UART_SetConfig+0x27e>
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e090      	b.n	80055fe <UART_SetConfig+0x27e>
 80054dc:	2308      	movs	r3, #8
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e08c      	b.n	80055fe <UART_SetConfig+0x27e>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ea:	e088      	b.n	80055fe <UART_SetConfig+0x27e>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005670 <UART_SetConfig+0x2f0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d125      	bne.n	8005542 <UART_SetConfig+0x1c2>
 80054f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005668 <UART_SetConfig+0x2e8>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005500:	2b30      	cmp	r3, #48	@ 0x30
 8005502:	d016      	beq.n	8005532 <UART_SetConfig+0x1b2>
 8005504:	2b30      	cmp	r3, #48	@ 0x30
 8005506:	d818      	bhi.n	800553a <UART_SetConfig+0x1ba>
 8005508:	2b20      	cmp	r3, #32
 800550a:	d00a      	beq.n	8005522 <UART_SetConfig+0x1a2>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d814      	bhi.n	800553a <UART_SetConfig+0x1ba>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <UART_SetConfig+0x19a>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d008      	beq.n	800552a <UART_SetConfig+0x1aa>
 8005518:	e00f      	b.n	800553a <UART_SetConfig+0x1ba>
 800551a:	2300      	movs	r3, #0
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005520:	e06d      	b.n	80055fe <UART_SetConfig+0x27e>
 8005522:	2302      	movs	r3, #2
 8005524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005528:	e069      	b.n	80055fe <UART_SetConfig+0x27e>
 800552a:	2304      	movs	r3, #4
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005530:	e065      	b.n	80055fe <UART_SetConfig+0x27e>
 8005532:	2308      	movs	r3, #8
 8005534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005538:	e061      	b.n	80055fe <UART_SetConfig+0x27e>
 800553a:	2310      	movs	r3, #16
 800553c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005540:	e05d      	b.n	80055fe <UART_SetConfig+0x27e>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a4b      	ldr	r2, [pc, #300]	@ (8005674 <UART_SetConfig+0x2f4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d125      	bne.n	8005598 <UART_SetConfig+0x218>
 800554c:	4b46      	ldr	r3, [pc, #280]	@ (8005668 <UART_SetConfig+0x2e8>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005556:	2bc0      	cmp	r3, #192	@ 0xc0
 8005558:	d016      	beq.n	8005588 <UART_SetConfig+0x208>
 800555a:	2bc0      	cmp	r3, #192	@ 0xc0
 800555c:	d818      	bhi.n	8005590 <UART_SetConfig+0x210>
 800555e:	2b80      	cmp	r3, #128	@ 0x80
 8005560:	d00a      	beq.n	8005578 <UART_SetConfig+0x1f8>
 8005562:	2b80      	cmp	r3, #128	@ 0x80
 8005564:	d814      	bhi.n	8005590 <UART_SetConfig+0x210>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <UART_SetConfig+0x1f0>
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d008      	beq.n	8005580 <UART_SetConfig+0x200>
 800556e:	e00f      	b.n	8005590 <UART_SetConfig+0x210>
 8005570:	2300      	movs	r3, #0
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005576:	e042      	b.n	80055fe <UART_SetConfig+0x27e>
 8005578:	2302      	movs	r3, #2
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557e:	e03e      	b.n	80055fe <UART_SetConfig+0x27e>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005586:	e03a      	b.n	80055fe <UART_SetConfig+0x27e>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558e:	e036      	b.n	80055fe <UART_SetConfig+0x27e>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005596:	e032      	b.n	80055fe <UART_SetConfig+0x27e>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a30      	ldr	r2, [pc, #192]	@ (8005660 <UART_SetConfig+0x2e0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d12a      	bne.n	80055f8 <UART_SetConfig+0x278>
 80055a2:	4b31      	ldr	r3, [pc, #196]	@ (8005668 <UART_SetConfig+0x2e8>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b0:	d01a      	beq.n	80055e8 <UART_SetConfig+0x268>
 80055b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b6:	d81b      	bhi.n	80055f0 <UART_SetConfig+0x270>
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055bc:	d00c      	beq.n	80055d8 <UART_SetConfig+0x258>
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c2:	d815      	bhi.n	80055f0 <UART_SetConfig+0x270>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <UART_SetConfig+0x250>
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055cc:	d008      	beq.n	80055e0 <UART_SetConfig+0x260>
 80055ce:	e00f      	b.n	80055f0 <UART_SetConfig+0x270>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e012      	b.n	80055fe <UART_SetConfig+0x27e>
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e00e      	b.n	80055fe <UART_SetConfig+0x27e>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e00a      	b.n	80055fe <UART_SetConfig+0x27e>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e006      	b.n	80055fe <UART_SetConfig+0x27e>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e002      	b.n	80055fe <UART_SetConfig+0x27e>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <UART_SetConfig+0x2e0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	f040 80a8 	bne.w	800575a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800560a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800560e:	2b08      	cmp	r3, #8
 8005610:	d834      	bhi.n	800567c <UART_SetConfig+0x2fc>
 8005612:	a201      	add	r2, pc, #4	@ (adr r2, 8005618 <UART_SetConfig+0x298>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800563d 	.word	0x0800563d
 800561c:	0800567d 	.word	0x0800567d
 8005620:	08005645 	.word	0x08005645
 8005624:	0800567d 	.word	0x0800567d
 8005628:	0800564b 	.word	0x0800564b
 800562c:	0800567d 	.word	0x0800567d
 8005630:	0800567d 	.word	0x0800567d
 8005634:	0800567d 	.word	0x0800567d
 8005638:	08005653 	.word	0x08005653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563c:	f7fe f97a 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005642:	e021      	b.n	8005688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <UART_SetConfig+0x2f8>)
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005648:	e01e      	b.n	8005688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564a:	f7fe f905 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 800564e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005650:	e01a      	b.n	8005688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005658:	e016      	b.n	8005688 <UART_SetConfig+0x308>
 800565a:	bf00      	nop
 800565c:	cfff69f3 	.word	0xcfff69f3
 8005660:	40008000 	.word	0x40008000
 8005664:	40013800 	.word	0x40013800
 8005668:	40021000 	.word	0x40021000
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005686:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 812a 	beq.w	80058e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	4a9e      	ldr	r2, [pc, #632]	@ (8005910 <UART_SetConfig+0x590>)
 8005696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569a:	461a      	mov	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d305      	bcc.n	80056c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056c6:	e10d      	b.n	80058e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	2200      	movs	r2, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	60fa      	str	r2, [r7, #12]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005910 <UART_SetConfig+0x590>)
 80056d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2200      	movs	r2, #0
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056ea:	f7fb faf5 	bl	8000cd8 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4610      	mov	r0, r2
 80056f4:	4619      	mov	r1, r3
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	020b      	lsls	r3, r1, #8
 8005700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005704:	0202      	lsls	r2, r0, #8
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	6849      	ldr	r1, [r1, #4]
 800570a:	0849      	lsrs	r1, r1, #1
 800570c:	2000      	movs	r0, #0
 800570e:	460c      	mov	r4, r1
 8005710:	4605      	mov	r5, r0
 8005712:	eb12 0804 	adds.w	r8, r2, r4
 8005716:	eb43 0905 	adc.w	r9, r3, r5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	469a      	mov	sl, r3
 8005722:	4693      	mov	fp, r2
 8005724:	4652      	mov	r2, sl
 8005726:	465b      	mov	r3, fp
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fb fad4 	bl	8000cd8 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4613      	mov	r3, r2
 8005736:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800573e:	d308      	bcc.n	8005752 <UART_SetConfig+0x3d2>
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005746:	d204      	bcs.n	8005752 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e0c8      	b.n	80058e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005758:	e0c4      	b.n	80058e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005762:	d167      	bne.n	8005834 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005764:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005768:	2b08      	cmp	r3, #8
 800576a:	d828      	bhi.n	80057be <UART_SetConfig+0x43e>
 800576c:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x3f4>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fe f8cc 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 800579c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800579e:	e014      	b.n	80057ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe f8de 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057a6:	e010      	b.n	80057ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005914 <UART_SetConfig+0x594>)
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057ac:	e00d      	b.n	80057ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fe f853 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 80057b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8089 	beq.w	80058e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005910 <UART_SetConfig+0x590>)
 80057d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057dc:	461a      	mov	r2, r3
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057e4:	005a      	lsls	r2, r3, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d916      	bls.n	800582c <UART_SetConfig+0x4ac>
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d212      	bcs.n	800582c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f023 030f 	bic.w	r3, r3, #15
 800580e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	b29b      	uxth	r3, r3
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	b29a      	uxth	r2, r3
 800581c:	8bfb      	ldrh	r3, [r7, #30]
 800581e:	4313      	orrs	r3, r2
 8005820:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	8bfa      	ldrh	r2, [r7, #30]
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	e05b      	b.n	80058e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005832:	e057      	b.n	80058e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005838:	2b08      	cmp	r3, #8
 800583a:	d828      	bhi.n	800588e <UART_SetConfig+0x50e>
 800583c:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0x4c4>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005869 	.word	0x08005869
 8005848:	08005871 	.word	0x08005871
 800584c:	08005879 	.word	0x08005879
 8005850:	0800588f 	.word	0x0800588f
 8005854:	0800587f 	.word	0x0800587f
 8005858:	0800588f 	.word	0x0800588f
 800585c:	0800588f 	.word	0x0800588f
 8005860:	0800588f 	.word	0x0800588f
 8005864:	08005887 	.word	0x08005887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005868:	f7fe f864 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800586e:	e014      	b.n	800589a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005870:	f7fe f876 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8005874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005876:	e010      	b.n	800589a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005878:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <UART_SetConfig+0x594>)
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800587c:	e00d      	b.n	800589a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fd ffeb 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8005882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005884:	e009      	b.n	800589a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800588c:	e005      	b.n	800589a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005898:	bf00      	nop
    }

    if (pclk != 0U)
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d021      	beq.n	80058e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005910 <UART_SetConfig+0x590>)
 80058a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058aa:	461a      	mov	r2, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	441a      	add	r2, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	d909      	bls.n	80058de <UART_SetConfig+0x55e>
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d0:	d205      	bcs.n	80058de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60da      	str	r2, [r3, #12]
 80058dc:	e002      	b.n	80058e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005904:	4618      	mov	r0, r3
 8005906:	3730      	adds	r7, #48	@ 0x30
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	0800b6c0 	.word	0x0800b6c0
 8005914:	00f42400 	.word	0x00f42400

08005918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a16:	d10a      	bne.n	8005a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b098      	sub	sp, #96	@ 0x60
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a6c:	f7fc face 	bl	800200c <HAL_GetTick>
 8005a70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d12f      	bne.n	8005ae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f88e 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d022      	beq.n	8005ae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e063      	b.n	8005ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d149      	bne.n	8005b82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af6:	2200      	movs	r2, #0
 8005af8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f857 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d03c      	beq.n	8005b82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	623b      	str	r3, [r7, #32]
   return(result);
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e6      	bne.n	8005b08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b5a:	61fa      	str	r2, [r7, #28]
 8005b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	69b9      	ldr	r1, [r7, #24]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	617b      	str	r3, [r7, #20]
   return(result);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e5      	bne.n	8005b3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e012      	b.n	8005ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3758      	adds	r7, #88	@ 0x58
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	e04f      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d04b      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fc fa1f 	bl	800200c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e04e      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d037      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b80      	cmp	r3, #128	@ 0x80
 8005bf6:	d034      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d031      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d110      	bne.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2208      	movs	r2, #8
 8005c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f95b 	bl	8005ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e029      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c3c:	d111      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f941 	bl	8005ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e00f      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d0a0      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b0a3      	sub	sp, #140	@ 0x8c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cbe:	d10e      	bne.n	8005cde <UART_Start_Receive_IT+0x52>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <UART_Start_Receive_IT+0x48>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005cce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cd2:	e02d      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	22ff      	movs	r2, #255	@ 0xff
 8005cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cdc:	e028      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <UART_Start_Receive_IT+0x76>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <UART_Start_Receive_IT+0x6c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	22ff      	movs	r2, #255	@ 0xff
 8005cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cf6:	e01b      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	227f      	movs	r2, #127	@ 0x7f
 8005cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d00:	e016      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d0a:	d10d      	bne.n	8005d28 <UART_Start_Receive_IT+0x9c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <UART_Start_Receive_IT+0x92>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	227f      	movs	r2, #127	@ 0x7f
 8005d18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d1c:	e008      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	223f      	movs	r2, #63	@ 0x3f
 8005d22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d26:	e003      	b.n	8005d30 <UART_Start_Receive_IT+0xa4>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2222      	movs	r2, #34	@ 0x22
 8005d3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005d64:	673a      	str	r2, [r7, #112]	@ 0x70
 8005d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005d6a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e3      	bne.n	8005d40 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d80:	d14f      	bne.n	8005e22 <UART_Start_Receive_IT+0x196>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d349      	bcc.n	8005e22 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d96:	d107      	bne.n	8005da8 <UART_Start_Receive_IT+0x11c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a47      	ldr	r2, [pc, #284]	@ (8005ec0 <UART_Start_Receive_IT+0x234>)
 8005da4:	675a      	str	r2, [r3, #116]	@ 0x74
 8005da6:	e002      	b.n	8005dae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a46      	ldr	r2, [pc, #280]	@ (8005ec4 <UART_Start_Receive_IT+0x238>)
 8005dac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01a      	beq.n	8005dec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dda:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005dde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e4      	bne.n	8005db6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_Start_Receive_IT+0x160>
 8005e20:	e046      	b.n	8005eb0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2a:	d107      	bne.n	8005e3c <UART_Start_Receive_IT+0x1b0>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a24      	ldr	r2, [pc, #144]	@ (8005ec8 <UART_Start_Receive_IT+0x23c>)
 8005e38:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e3a:	e002      	b.n	8005e42 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a23      	ldr	r2, [pc, #140]	@ (8005ecc <UART_Start_Receive_IT+0x240>)
 8005e40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d019      	beq.n	8005e7e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005e5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e6a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_Start_Receive_IT+0x1be>
 8005e7c:	e018      	b.n	8005eb0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f043 0320 	orr.w	r3, r3, #32
 8005e92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	69f9      	ldr	r1, [r7, #28]
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e6      	bne.n	8005e7e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	378c      	adds	r7, #140	@ 0x8c
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	080066ed 	.word	0x080066ed
 8005ec4:	08006389 	.word	0x08006389
 8005ec8:	080061d1 	.word	0x080061d1
 8005ecc:	08006019 	.word	0x08006019

08005ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b095      	sub	sp, #84	@ 0x54
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005efc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e3      	bne.n	8005f0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d118      	bne.n	8005f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0310 	bic.w	r3, r3, #16
 8005f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f90:	bf00      	nop
 8005f92:	3754      	adds	r7, #84	@ 0x54
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7fb fb28 	bl	8001608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6979      	ldr	r1, [r7, #20]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e6      	bne.n	8005fc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff f9a3 	bl	8005354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600e:	bf00      	nop
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b09c      	sub	sp, #112	@ 0x70
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006026:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006030:	2b22      	cmp	r3, #34	@ 0x22
 8006032:	f040 80be 	bne.w	80061b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006040:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006044:	b2d9      	uxtb	r1, r3
 8006046:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800604a:	b2da      	uxtb	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006050:	400a      	ands	r2, r1
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 80a1 	bne.w	80061c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800608e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800609e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e6      	bne.n	8006080 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80060d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a33      	ldr	r2, [pc, #204]	@ (80061cc <UART_RxISR_8BIT+0x1b4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01f      	beq.n	8006144 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	623b      	str	r3, [r7, #32]
   return(result);
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006126:	663b      	str	r3, [r7, #96]	@ 0x60
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30
 8006132:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d12e      	bne.n	80061aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0310 	bic.w	r3, r3, #16
 8006166:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	617b      	str	r3, [r7, #20]
   return(result);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b10      	cmp	r3, #16
 8006190:	d103      	bne.n	800619a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff f8e0 	bl	8005368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a8:	e00b      	b.n	80061c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb f9c0 	bl	8001530 <HAL_UART_RxCpltCallback>
}
 80061b0:	e007      	b.n	80061c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	619a      	str	r2, [r3, #24]
}
 80061c2:	bf00      	nop
 80061c4:	3770      	adds	r7, #112	@ 0x70
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40008000 	.word	0x40008000

080061d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b09c      	sub	sp, #112	@ 0x70
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061e8:	2b22      	cmp	r3, #34	@ 0x22
 80061ea:	f040 80be 	bne.w	800636a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80061fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006202:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006206:	4013      	ands	r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800620c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006212:	1c9a      	adds	r2, r3, #2
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 80a1 	bne.w	800637a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800624c:	667b      	str	r3, [r7, #100]	@ 0x64
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006256:	657b      	str	r3, [r7, #84]	@ 0x54
 8006258:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800625c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e6      	bne.n	8006238 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	663b      	str	r3, [r7, #96]	@ 0x60
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800628a:	643a      	str	r2, [r7, #64]	@ 0x40
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a33      	ldr	r2, [pc, #204]	@ (8006384 <UART_RxISR_16BIT+0x1b4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01f      	beq.n	80062fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d12e      	bne.n	8006362 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	60bb      	str	r3, [r7, #8]
   return(result);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f023 0310 	bic.w	r3, r3, #16
 800631e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6979      	ldr	r1, [r7, #20]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	613b      	str	r3, [r7, #16]
   return(result);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b10      	cmp	r3, #16
 8006348:	d103      	bne.n	8006352 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2210      	movs	r2, #16
 8006350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff f804 	bl	8005368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006360:	e00b      	b.n	800637a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb f8e4 	bl	8001530 <HAL_UART_RxCpltCallback>
}
 8006368:	e007      	b.n	800637a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0208 	orr.w	r2, r2, #8
 8006378:	619a      	str	r2, [r3, #24]
}
 800637a:	bf00      	nop
 800637c:	3770      	adds	r7, #112	@ 0x70
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40008000 	.word	0x40008000

08006388 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0ac      	sub	sp, #176	@ 0xb0
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006396:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063be:	2b22      	cmp	r3, #34	@ 0x22
 80063c0:	f040 8183 	bne.w	80066ca <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80063ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063ce:	e126      	b.n	800661e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80063de:	b2d9      	uxtb	r1, r3
 80063e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ea:	400a      	ands	r2, r1
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d053      	beq.n	80064ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <UART_RxISR_8BIT_FIFOEN+0xca>
 800642e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d011      	beq.n	8006482 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800645e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2202      	movs	r2, #2
 8006470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006478:	f043 0204 	orr.w	r2, r3, #4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800648e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2204      	movs	r2, #4
 80064a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f043 0202 	orr.w	r2, r3, #2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fb f8a3 	bl	8001608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 80a3 	bne.w	800661e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80064e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006500:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e4      	bne.n	80064d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800651e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006536:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006538:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800653c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e1      	bne.n	800650e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a60      	ldr	r2, [pc, #384]	@ (80066e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d021      	beq.n	80065ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01a      	beq.n	80065ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800658a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006598:	657b      	str	r3, [r7, #84]	@ 0x54
 800659a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800659e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e4      	bne.n	8006576 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d130      	bne.n	8006616 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80065de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e4      	bne.n	80065ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b10      	cmp	r3, #16
 80065fc:	d103      	bne.n	8006606 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2210      	movs	r2, #16
 8006604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe feaa 	bl	8005368 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006614:	e00e      	b.n	8006634 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fa ff8a 	bl	8001530 <HAL_UART_RxCpltCallback>
        break;
 800661c:	e00a      	b.n	8006634 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800661e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006622:	2b00      	cmp	r3, #0
 8006624:	d006      	beq.n	8006634 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f aece 	bne.w	80063d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800663a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800663e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006642:	2b00      	cmp	r3, #0
 8006644:	d049      	beq.n	80066da <UART_RxISR_8BIT_FIFOEN+0x352>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800664c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006650:	429a      	cmp	r2, r3
 8006652:	d242      	bcs.n	80066da <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	61fb      	str	r3, [r7, #28]
   return(result);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800667e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e3      	bne.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006690:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f043 0320 	orr.w	r3, r3, #32
 80066a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6979      	ldr	r1, [r7, #20]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	613b      	str	r3, [r7, #16]
   return(result);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e4      	bne.n	8006692 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066c8:	e007      	b.n	80066da <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0208 	orr.w	r2, r2, #8
 80066d8:	619a      	str	r2, [r3, #24]
}
 80066da:	bf00      	nop
 80066dc:	37b0      	adds	r7, #176	@ 0xb0
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40008000 	.word	0x40008000
 80066e8:	08006019 	.word	0x08006019

080066ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b0ae      	sub	sp, #184	@ 0xb8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006722:	2b22      	cmp	r3, #34	@ 0x22
 8006724:	f040 8187 	bne.w	8006a36 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800672e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006732:	e12a      	b.n	800698a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006746:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800674a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800674e:	4013      	ands	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006756:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800677e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d053      	beq.n	8006832 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800678a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d011      	beq.n	80067ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b0:	f043 0201 	orr.w	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d011      	beq.n	80067ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80067c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2202      	movs	r2, #2
 80067d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	f043 0204 	orr.w	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80067f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2204      	movs	r2, #4
 8006808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006810:	f043 0202 	orr.w	r2, r3, #2
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fa feef 	bl	8001608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 80a5 	bne.w	800698a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800684e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006862:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006866:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800686a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e2      	bne.n	8006840 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800688a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800688c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80068a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e1      	bne.n	800687a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a60      	ldr	r2, [pc, #384]	@ (8006a50 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d021      	beq.n	8006918 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01a      	beq.n	8006918 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006904:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006906:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800690a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e4      	bne.n	80068e2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d130      	bne.n	8006982 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	f023 0310 	bic.w	r3, r3, #16
 800693a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006948:	647b      	str	r3, [r7, #68]	@ 0x44
 800694a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800694e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e4      	bne.n	8006926 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b10      	cmp	r3, #16
 8006968:	d103      	bne.n	8006972 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe fcf4 	bl	8005368 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006980:	e00e      	b.n	80069a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fdd4 	bl	8001530 <HAL_UART_RxCpltCallback>
        break;
 8006988:	e00a      	b.n	80069a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800698a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	f47f aeca 	bne.w	8006734 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d049      	beq.n	8006a46 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069b8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80069bc:	429a      	cmp	r2, r3
 80069be:	d242      	bcs.n	8006a46 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	623b      	str	r3, [r7, #32]
   return(result);
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80069e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80069e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80069fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e4      	bne.n	80069fe <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a34:	e007      	b.n	8006a46 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	619a      	str	r2, [r3, #24]
}
 8006a46:	bf00      	nop
 8006a48:	37b8      	adds	r7, #184	@ 0xb8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40008000 	.word	0x40008000
 8006a54:	080061d1 	.word	0x080061d1

08006a58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UARTEx_DisableFifoMode+0x16>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e027      	b.n	8006afa <HAL_UARTEx_DisableFifoMode+0x66>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	@ 0x24
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e02d      	b.n	8006b7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2224      	movs	r2, #36	@ 0x24
 8006b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f850 	bl	8006c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e02d      	b.n	8006bf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2224      	movs	r2, #36	@ 0x24
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f812 	bl	8006c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c20:	e031      	b.n	8006c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c22:	2308      	movs	r3, #8
 8006c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c26:	2308      	movs	r3, #8
 8006c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	0e5b      	lsrs	r3, r3, #25
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	0f5b      	lsrs	r3, r3, #29
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	7b3a      	ldrb	r2, [r7, #12]
 8006c4e:	4911      	ldr	r1, [pc, #68]	@ (8006c94 <UARTEx_SetNbDataToProcess+0x94>)
 8006c50:	5c8a      	ldrb	r2, [r1, r2]
 8006c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c56:	7b3a      	ldrb	r2, [r7, #12]
 8006c58:	490f      	ldr	r1, [pc, #60]	@ (8006c98 <UARTEx_SetNbDataToProcess+0x98>)
 8006c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	7b7a      	ldrb	r2, [r7, #13]
 8006c6c:	4909      	ldr	r1, [pc, #36]	@ (8006c94 <UARTEx_SetNbDataToProcess+0x94>)
 8006c6e:	5c8a      	ldrb	r2, [r1, r2]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c74:	7b7a      	ldrb	r2, [r7, #13]
 8006c76:	4908      	ldr	r1, [pc, #32]	@ (8006c98 <UARTEx_SetNbDataToProcess+0x98>)
 8006c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	0800b6d8 	.word	0x0800b6d8
 8006c98:	0800b6e0 	.word	0x0800b6e0

08006c9c <sulp>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	ec45 4b10 	vmov	d0, r4, r5
 8006ca6:	4616      	mov	r6, r2
 8006ca8:	f003 fe62 	bl	800a970 <__ulp>
 8006cac:	ec51 0b10 	vmov	r0, r1, d0
 8006cb0:	b17e      	cbz	r6, 8006cd2 <sulp+0x36>
 8006cb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd09      	ble.n	8006cd2 <sulp+0x36>
 8006cbe:	051b      	lsls	r3, r3, #20
 8006cc0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cca:	4622      	mov	r2, r4
 8006ccc:	462b      	mov	r3, r5
 8006cce:	f7f9 fcbb 	bl	8000648 <__aeabi_dmul>
 8006cd2:	ec41 0b10 	vmov	d0, r0, r1
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}

08006cd8 <_strtod_l>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	b09f      	sub	sp, #124	@ 0x7c
 8006cde:	460c      	mov	r4, r1
 8006ce0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006ce6:	9005      	str	r0, [sp, #20]
 8006ce8:	f04f 0a00 	mov.w	sl, #0
 8006cec:	f04f 0b00 	mov.w	fp, #0
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cf4:	7811      	ldrb	r1, [r2, #0]
 8006cf6:	292b      	cmp	r1, #43	@ 0x2b
 8006cf8:	d04a      	beq.n	8006d90 <_strtod_l+0xb8>
 8006cfa:	d838      	bhi.n	8006d6e <_strtod_l+0x96>
 8006cfc:	290d      	cmp	r1, #13
 8006cfe:	d832      	bhi.n	8006d66 <_strtod_l+0x8e>
 8006d00:	2908      	cmp	r1, #8
 8006d02:	d832      	bhi.n	8006d6a <_strtod_l+0x92>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	d03b      	beq.n	8006d80 <_strtod_l+0xa8>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d0e:	782a      	ldrb	r2, [r5, #0]
 8006d10:	2a30      	cmp	r2, #48	@ 0x30
 8006d12:	f040 80b3 	bne.w	8006e7c <_strtod_l+0x1a4>
 8006d16:	786a      	ldrb	r2, [r5, #1]
 8006d18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d1c:	2a58      	cmp	r2, #88	@ 0x58
 8006d1e:	d16e      	bne.n	8006dfe <_strtod_l+0x126>
 8006d20:	9302      	str	r3, [sp, #8]
 8006d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4a8e      	ldr	r2, [pc, #568]	@ (8006f64 <_strtod_l+0x28c>)
 8006d2c:	9805      	ldr	r0, [sp, #20]
 8006d2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d30:	a919      	add	r1, sp, #100	@ 0x64
 8006d32:	f002 ff0f 	bl	8009b54 <__gethex>
 8006d36:	f010 060f 	ands.w	r6, r0, #15
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	d005      	beq.n	8006d4a <_strtod_l+0x72>
 8006d3e:	2e06      	cmp	r6, #6
 8006d40:	d128      	bne.n	8006d94 <_strtod_l+0xbc>
 8006d42:	3501      	adds	r5, #1
 8006d44:	2300      	movs	r3, #0
 8006d46:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 858e 	bne.w	800786e <_strtod_l+0xb96>
 8006d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d54:	b1cb      	cbz	r3, 8006d8a <_strtod_l+0xb2>
 8006d56:	4652      	mov	r2, sl
 8006d58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d5c:	ec43 2b10 	vmov	d0, r2, r3
 8006d60:	b01f      	add	sp, #124	@ 0x7c
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	2920      	cmp	r1, #32
 8006d68:	d1ce      	bne.n	8006d08 <_strtod_l+0x30>
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	e7c1      	b.n	8006cf2 <_strtod_l+0x1a>
 8006d6e:	292d      	cmp	r1, #45	@ 0x2d
 8006d70:	d1ca      	bne.n	8006d08 <_strtod_l+0x30>
 8006d72:	2101      	movs	r1, #1
 8006d74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d76:	1c51      	adds	r1, r2, #1
 8006d78:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d7a:	7852      	ldrb	r2, [r2, #1]
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	d1c5      	bne.n	8006d0c <_strtod_l+0x34>
 8006d80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d82:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f040 8570 	bne.w	800786a <_strtod_l+0xb92>
 8006d8a:	4652      	mov	r2, sl
 8006d8c:	465b      	mov	r3, fp
 8006d8e:	e7e5      	b.n	8006d5c <_strtod_l+0x84>
 8006d90:	2100      	movs	r1, #0
 8006d92:	e7ef      	b.n	8006d74 <_strtod_l+0x9c>
 8006d94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d96:	b13a      	cbz	r2, 8006da8 <_strtod_l+0xd0>
 8006d98:	2135      	movs	r1, #53	@ 0x35
 8006d9a:	a81c      	add	r0, sp, #112	@ 0x70
 8006d9c:	f003 fee2 	bl	800ab64 <__copybits>
 8006da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	f003 fab0 	bl	800a308 <_Bfree>
 8006da8:	3e01      	subs	r6, #1
 8006daa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dac:	2e04      	cmp	r6, #4
 8006dae:	d806      	bhi.n	8006dbe <_strtod_l+0xe6>
 8006db0:	e8df f006 	tbb	[pc, r6]
 8006db4:	201d0314 	.word	0x201d0314
 8006db8:	14          	.byte	0x14
 8006db9:	00          	.byte	0x00
 8006dba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006dbe:	05e1      	lsls	r1, r4, #23
 8006dc0:	bf48      	it	mi
 8006dc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dca:	0d1b      	lsrs	r3, r3, #20
 8006dcc:	051b      	lsls	r3, r3, #20
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1bb      	bne.n	8006d4a <_strtod_l+0x72>
 8006dd2:	f001 ff73 	bl	8008cbc <__errno>
 8006dd6:	2322      	movs	r3, #34	@ 0x22
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	e7b6      	b.n	8006d4a <_strtod_l+0x72>
 8006ddc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006de0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006de4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006de8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006dec:	e7e7      	b.n	8006dbe <_strtod_l+0xe6>
 8006dee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f6c <_strtod_l+0x294>
 8006df2:	e7e4      	b.n	8006dbe <_strtod_l+0xe6>
 8006df4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006df8:	f04f 3aff 	mov.w	sl, #4294967295
 8006dfc:	e7df      	b.n	8006dbe <_strtod_l+0xe6>
 8006dfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b30      	cmp	r3, #48	@ 0x30
 8006e08:	d0f9      	beq.n	8006dfe <_strtod_l+0x126>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d09d      	beq.n	8006d4a <_strtod_l+0x72>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e16:	2300      	movs	r3, #0
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e1c:	461f      	mov	r7, r3
 8006e1e:	220a      	movs	r2, #10
 8006e20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e22:	7805      	ldrb	r5, [r0, #0]
 8006e24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	2909      	cmp	r1, #9
 8006e2c:	d928      	bls.n	8006e80 <_strtod_l+0x1a8>
 8006e2e:	494e      	ldr	r1, [pc, #312]	@ (8006f68 <_strtod_l+0x290>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	f001 fee7 	bl	8008c04 <strncmp>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d032      	beq.n	8006ea0 <_strtod_l+0x1c8>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4681      	mov	r9, r0
 8006e40:	463d      	mov	r5, r7
 8006e42:	4603      	mov	r3, r0
 8006e44:	2a65      	cmp	r2, #101	@ 0x65
 8006e46:	d001      	beq.n	8006e4c <_strtod_l+0x174>
 8006e48:	2a45      	cmp	r2, #69	@ 0x45
 8006e4a:	d114      	bne.n	8006e76 <_strtod_l+0x19e>
 8006e4c:	b91d      	cbnz	r5, 8006e56 <_strtod_l+0x17e>
 8006e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e50:	4302      	orrs	r2, r0
 8006e52:	d095      	beq.n	8006d80 <_strtod_l+0xa8>
 8006e54:	2500      	movs	r5, #0
 8006e56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e58:	1c62      	adds	r2, r4, #1
 8006e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e5c:	7862      	ldrb	r2, [r4, #1]
 8006e5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e60:	d077      	beq.n	8006f52 <_strtod_l+0x27a>
 8006e62:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e64:	d07b      	beq.n	8006f5e <_strtod_l+0x286>
 8006e66:	f04f 0c00 	mov.w	ip, #0
 8006e6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e6e:	2909      	cmp	r1, #9
 8006e70:	f240 8082 	bls.w	8006f78 <_strtod_l+0x2a0>
 8006e74:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e76:	f04f 0800 	mov.w	r8, #0
 8006e7a:	e0a2      	b.n	8006fc2 <_strtod_l+0x2ea>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e7c7      	b.n	8006e10 <_strtod_l+0x138>
 8006e80:	2f08      	cmp	r7, #8
 8006e82:	bfd5      	itete	le
 8006e84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006e86:	9908      	ldrgt	r1, [sp, #32]
 8006e88:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006e90:	f100 0001 	add.w	r0, r0, #1
 8006e94:	bfd4      	ite	le
 8006e96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006e98:	9308      	strgt	r3, [sp, #32]
 8006e9a:	3701      	adds	r7, #1
 8006e9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e9e:	e7bf      	b.n	8006e20 <_strtod_l+0x148>
 8006ea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ea6:	785a      	ldrb	r2, [r3, #1]
 8006ea8:	b37f      	cbz	r7, 8006f0a <_strtod_l+0x232>
 8006eaa:	4681      	mov	r9, r0
 8006eac:	463d      	mov	r5, r7
 8006eae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d912      	bls.n	8006edc <_strtod_l+0x204>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7c4      	b.n	8006e44 <_strtod_l+0x16c>
 8006eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ec0:	785a      	ldrb	r2, [r3, #1]
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	2a30      	cmp	r2, #48	@ 0x30
 8006ec6:	d0f8      	beq.n	8006eba <_strtod_l+0x1e2>
 8006ec8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	f200 84d3 	bhi.w	8007878 <_strtod_l+0xba0>
 8006ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ed6:	4681      	mov	r9, r0
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4605      	mov	r5, r0
 8006edc:	3a30      	subs	r2, #48	@ 0x30
 8006ede:	f100 0301 	add.w	r3, r0, #1
 8006ee2:	d02a      	beq.n	8006f3a <_strtod_l+0x262>
 8006ee4:	4499      	add	r9, r3
 8006ee6:	eb00 0c05 	add.w	ip, r0, r5
 8006eea:	462b      	mov	r3, r5
 8006eec:	210a      	movs	r1, #10
 8006eee:	4563      	cmp	r3, ip
 8006ef0:	d10d      	bne.n	8006f0e <_strtod_l+0x236>
 8006ef2:	1c69      	adds	r1, r5, #1
 8006ef4:	4401      	add	r1, r0
 8006ef6:	4428      	add	r0, r5
 8006ef8:	2808      	cmp	r0, #8
 8006efa:	dc16      	bgt.n	8006f2a <_strtod_l+0x252>
 8006efc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006efe:	230a      	movs	r3, #10
 8006f00:	fb03 2300 	mla	r3, r3, r0, r2
 8006f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f06:	2300      	movs	r3, #0
 8006f08:	e018      	b.n	8006f3c <_strtod_l+0x264>
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	e7da      	b.n	8006ec4 <_strtod_l+0x1ec>
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	f103 0301 	add.w	r3, r3, #1
 8006f14:	dc03      	bgt.n	8006f1e <_strtod_l+0x246>
 8006f16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f18:	434e      	muls	r6, r1
 8006f1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f1c:	e7e7      	b.n	8006eee <_strtod_l+0x216>
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	bfde      	ittt	le
 8006f22:	9e08      	ldrle	r6, [sp, #32]
 8006f24:	434e      	mulle	r6, r1
 8006f26:	9608      	strle	r6, [sp, #32]
 8006f28:	e7e1      	b.n	8006eee <_strtod_l+0x216>
 8006f2a:	280f      	cmp	r0, #15
 8006f2c:	dceb      	bgt.n	8006f06 <_strtod_l+0x22e>
 8006f2e:	9808      	ldr	r0, [sp, #32]
 8006f30:	230a      	movs	r3, #10
 8006f32:	fb03 2300 	mla	r3, r3, r0, r2
 8006f36:	9308      	str	r3, [sp, #32]
 8006f38:	e7e5      	b.n	8006f06 <_strtod_l+0x22e>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f3e:	1c50      	adds	r0, r2, #1
 8006f40:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f42:	7852      	ldrb	r2, [r2, #1]
 8006f44:	4618      	mov	r0, r3
 8006f46:	460d      	mov	r5, r1
 8006f48:	e7b1      	b.n	8006eae <_strtod_l+0x1d6>
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e77d      	b.n	8006e4e <_strtod_l+0x176>
 8006f52:	f04f 0c00 	mov.w	ip, #0
 8006f56:	1ca2      	adds	r2, r4, #2
 8006f58:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f5a:	78a2      	ldrb	r2, [r4, #2]
 8006f5c:	e785      	b.n	8006e6a <_strtod_l+0x192>
 8006f5e:	f04f 0c01 	mov.w	ip, #1
 8006f62:	e7f8      	b.n	8006f56 <_strtod_l+0x27e>
 8006f64:	0800b700 	.word	0x0800b700
 8006f68:	0800b6e8 	.word	0x0800b6e8
 8006f6c:	7ff00000 	.word	0x7ff00000
 8006f70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f72:	1c51      	adds	r1, r2, #1
 8006f74:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f76:	7852      	ldrb	r2, [r2, #1]
 8006f78:	2a30      	cmp	r2, #48	@ 0x30
 8006f7a:	d0f9      	beq.n	8006f70 <_strtod_l+0x298>
 8006f7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f80:	2908      	cmp	r1, #8
 8006f82:	f63f af78 	bhi.w	8006e76 <_strtod_l+0x19e>
 8006f86:	3a30      	subs	r2, #48	@ 0x30
 8006f88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006f8e:	f04f 080a 	mov.w	r8, #10
 8006f92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f94:	1c56      	adds	r6, r2, #1
 8006f96:	9619      	str	r6, [sp, #100]	@ 0x64
 8006f98:	7852      	ldrb	r2, [r2, #1]
 8006f9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006f9e:	f1be 0f09 	cmp.w	lr, #9
 8006fa2:	d939      	bls.n	8007018 <_strtod_l+0x340>
 8006fa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fa6:	1a76      	subs	r6, r6, r1
 8006fa8:	2e08      	cmp	r6, #8
 8006faa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fae:	dc03      	bgt.n	8006fb8 <_strtod_l+0x2e0>
 8006fb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fb2:	4588      	cmp	r8, r1
 8006fb4:	bfa8      	it	ge
 8006fb6:	4688      	movge	r8, r1
 8006fb8:	f1bc 0f00 	cmp.w	ip, #0
 8006fbc:	d001      	beq.n	8006fc2 <_strtod_l+0x2ea>
 8006fbe:	f1c8 0800 	rsb	r8, r8, #0
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	d14e      	bne.n	8007064 <_strtod_l+0x38c>
 8006fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fc8:	4308      	orrs	r0, r1
 8006fca:	f47f aebe 	bne.w	8006d4a <_strtod_l+0x72>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f47f aed6 	bne.w	8006d80 <_strtod_l+0xa8>
 8006fd4:	2a69      	cmp	r2, #105	@ 0x69
 8006fd6:	d028      	beq.n	800702a <_strtod_l+0x352>
 8006fd8:	dc25      	bgt.n	8007026 <_strtod_l+0x34e>
 8006fda:	2a49      	cmp	r2, #73	@ 0x49
 8006fdc:	d025      	beq.n	800702a <_strtod_l+0x352>
 8006fde:	2a4e      	cmp	r2, #78	@ 0x4e
 8006fe0:	f47f aece 	bne.w	8006d80 <_strtod_l+0xa8>
 8006fe4:	499b      	ldr	r1, [pc, #620]	@ (8007254 <_strtod_l+0x57c>)
 8006fe6:	a819      	add	r0, sp, #100	@ 0x64
 8006fe8:	f002 ffd6 	bl	8009f98 <__match>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f43f aec7 	beq.w	8006d80 <_strtod_l+0xa8>
 8006ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b28      	cmp	r3, #40	@ 0x28
 8006ff8:	d12e      	bne.n	8007058 <_strtod_l+0x380>
 8006ffa:	4997      	ldr	r1, [pc, #604]	@ (8007258 <_strtod_l+0x580>)
 8006ffc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ffe:	a819      	add	r0, sp, #100	@ 0x64
 8007000:	f002 ffde 	bl	8009fc0 <__hexnan>
 8007004:	2805      	cmp	r0, #5
 8007006:	d127      	bne.n	8007058 <_strtod_l+0x380>
 8007008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800700a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800700e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007012:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007016:	e698      	b.n	8006d4a <_strtod_l+0x72>
 8007018:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800701a:	fb08 2101 	mla	r1, r8, r1, r2
 800701e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007022:	920e      	str	r2, [sp, #56]	@ 0x38
 8007024:	e7b5      	b.n	8006f92 <_strtod_l+0x2ba>
 8007026:	2a6e      	cmp	r2, #110	@ 0x6e
 8007028:	e7da      	b.n	8006fe0 <_strtod_l+0x308>
 800702a:	498c      	ldr	r1, [pc, #560]	@ (800725c <_strtod_l+0x584>)
 800702c:	a819      	add	r0, sp, #100	@ 0x64
 800702e:	f002 ffb3 	bl	8009f98 <__match>
 8007032:	2800      	cmp	r0, #0
 8007034:	f43f aea4 	beq.w	8006d80 <_strtod_l+0xa8>
 8007038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800703a:	4989      	ldr	r1, [pc, #548]	@ (8007260 <_strtod_l+0x588>)
 800703c:	3b01      	subs	r3, #1
 800703e:	a819      	add	r0, sp, #100	@ 0x64
 8007040:	9319      	str	r3, [sp, #100]	@ 0x64
 8007042:	f002 ffa9 	bl	8009f98 <__match>
 8007046:	b910      	cbnz	r0, 800704e <_strtod_l+0x376>
 8007048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800704a:	3301      	adds	r3, #1
 800704c:	9319      	str	r3, [sp, #100]	@ 0x64
 800704e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007270 <_strtod_l+0x598>
 8007052:	f04f 0a00 	mov.w	sl, #0
 8007056:	e678      	b.n	8006d4a <_strtod_l+0x72>
 8007058:	4882      	ldr	r0, [pc, #520]	@ (8007264 <_strtod_l+0x58c>)
 800705a:	f001 fe6d 	bl	8008d38 <nan>
 800705e:	ec5b ab10 	vmov	sl, fp, d0
 8007062:	e672      	b.n	8006d4a <_strtod_l+0x72>
 8007064:	eba8 0309 	sub.w	r3, r8, r9
 8007068:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800706a:	9309      	str	r3, [sp, #36]	@ 0x24
 800706c:	2f00      	cmp	r7, #0
 800706e:	bf08      	it	eq
 8007070:	462f      	moveq	r7, r5
 8007072:	2d10      	cmp	r5, #16
 8007074:	462c      	mov	r4, r5
 8007076:	bfa8      	it	ge
 8007078:	2410      	movge	r4, #16
 800707a:	f7f9 fa6b 	bl	8000554 <__aeabi_ui2d>
 800707e:	2d09      	cmp	r5, #9
 8007080:	4682      	mov	sl, r0
 8007082:	468b      	mov	fp, r1
 8007084:	dc13      	bgt.n	80070ae <_strtod_l+0x3d6>
 8007086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	f43f ae5e 	beq.w	8006d4a <_strtod_l+0x72>
 800708e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007090:	dd78      	ble.n	8007184 <_strtod_l+0x4ac>
 8007092:	2b16      	cmp	r3, #22
 8007094:	dc5f      	bgt.n	8007156 <_strtod_l+0x47e>
 8007096:	4974      	ldr	r1, [pc, #464]	@ (8007268 <_strtod_l+0x590>)
 8007098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800709c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a0:	4652      	mov	r2, sl
 80070a2:	465b      	mov	r3, fp
 80070a4:	f7f9 fad0 	bl	8000648 <__aeabi_dmul>
 80070a8:	4682      	mov	sl, r0
 80070aa:	468b      	mov	fp, r1
 80070ac:	e64d      	b.n	8006d4a <_strtod_l+0x72>
 80070ae:	4b6e      	ldr	r3, [pc, #440]	@ (8007268 <_strtod_l+0x590>)
 80070b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070b8:	f7f9 fac6 	bl	8000648 <__aeabi_dmul>
 80070bc:	4682      	mov	sl, r0
 80070be:	9808      	ldr	r0, [sp, #32]
 80070c0:	468b      	mov	fp, r1
 80070c2:	f7f9 fa47 	bl	8000554 <__aeabi_ui2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4650      	mov	r0, sl
 80070cc:	4659      	mov	r1, fp
 80070ce:	f7f9 f905 	bl	80002dc <__adddf3>
 80070d2:	2d0f      	cmp	r5, #15
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	ddd5      	ble.n	8007086 <_strtod_l+0x3ae>
 80070da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070dc:	1b2c      	subs	r4, r5, r4
 80070de:	441c      	add	r4, r3
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	f340 8096 	ble.w	8007212 <_strtod_l+0x53a>
 80070e6:	f014 030f 	ands.w	r3, r4, #15
 80070ea:	d00a      	beq.n	8007102 <_strtod_l+0x42a>
 80070ec:	495e      	ldr	r1, [pc, #376]	@ (8007268 <_strtod_l+0x590>)
 80070ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070fa:	f7f9 faa5 	bl	8000648 <__aeabi_dmul>
 80070fe:	4682      	mov	sl, r0
 8007100:	468b      	mov	fp, r1
 8007102:	f034 040f 	bics.w	r4, r4, #15
 8007106:	d073      	beq.n	80071f0 <_strtod_l+0x518>
 8007108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800710c:	dd48      	ble.n	80071a0 <_strtod_l+0x4c8>
 800710e:	2400      	movs	r4, #0
 8007110:	46a0      	mov	r8, r4
 8007112:	940a      	str	r4, [sp, #40]	@ 0x28
 8007114:	46a1      	mov	r9, r4
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007270 <_strtod_l+0x598>
 800711c:	2322      	movs	r3, #34	@ 0x22
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	f04f 0a00 	mov.w	sl, #0
 8007124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007126:	2b00      	cmp	r3, #0
 8007128:	f43f ae0f 	beq.w	8006d4a <_strtod_l+0x72>
 800712c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800712e:	9805      	ldr	r0, [sp, #20]
 8007130:	f003 f8ea 	bl	800a308 <_Bfree>
 8007134:	9805      	ldr	r0, [sp, #20]
 8007136:	4649      	mov	r1, r9
 8007138:	f003 f8e6 	bl	800a308 <_Bfree>
 800713c:	9805      	ldr	r0, [sp, #20]
 800713e:	4641      	mov	r1, r8
 8007140:	f003 f8e2 	bl	800a308 <_Bfree>
 8007144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	f003 f8de 	bl	800a308 <_Bfree>
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	4621      	mov	r1, r4
 8007150:	f003 f8da 	bl	800a308 <_Bfree>
 8007154:	e5f9      	b.n	8006d4a <_strtod_l+0x72>
 8007156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800715c:	4293      	cmp	r3, r2
 800715e:	dbbc      	blt.n	80070da <_strtod_l+0x402>
 8007160:	4c41      	ldr	r4, [pc, #260]	@ (8007268 <_strtod_l+0x590>)
 8007162:	f1c5 050f 	rsb	r5, r5, #15
 8007166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007172:	f7f9 fa69 	bl	8000648 <__aeabi_dmul>
 8007176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007178:	1b5d      	subs	r5, r3, r5
 800717a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800717e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007182:	e78f      	b.n	80070a4 <_strtod_l+0x3cc>
 8007184:	3316      	adds	r3, #22
 8007186:	dba8      	blt.n	80070da <_strtod_l+0x402>
 8007188:	4b37      	ldr	r3, [pc, #220]	@ (8007268 <_strtod_l+0x590>)
 800718a:	eba9 0808 	sub.w	r8, r9, r8
 800718e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007192:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007196:	4650      	mov	r0, sl
 8007198:	4659      	mov	r1, fp
 800719a:	f7f9 fb7f 	bl	800089c <__aeabi_ddiv>
 800719e:	e783      	b.n	80070a8 <_strtod_l+0x3d0>
 80071a0:	4b32      	ldr	r3, [pc, #200]	@ (800726c <_strtod_l+0x594>)
 80071a2:	9308      	str	r3, [sp, #32]
 80071a4:	2300      	movs	r3, #0
 80071a6:	1124      	asrs	r4, r4, #4
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	461e      	mov	r6, r3
 80071ae:	2c01      	cmp	r4, #1
 80071b0:	dc21      	bgt.n	80071f6 <_strtod_l+0x51e>
 80071b2:	b10b      	cbz	r3, 80071b8 <_strtod_l+0x4e0>
 80071b4:	4682      	mov	sl, r0
 80071b6:	468b      	mov	fp, r1
 80071b8:	492c      	ldr	r1, [pc, #176]	@ (800726c <_strtod_l+0x594>)
 80071ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071c2:	4652      	mov	r2, sl
 80071c4:	465b      	mov	r3, fp
 80071c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ca:	f7f9 fa3d 	bl	8000648 <__aeabi_dmul>
 80071ce:	4b28      	ldr	r3, [pc, #160]	@ (8007270 <_strtod_l+0x598>)
 80071d0:	460a      	mov	r2, r1
 80071d2:	400b      	ands	r3, r1
 80071d4:	4927      	ldr	r1, [pc, #156]	@ (8007274 <_strtod_l+0x59c>)
 80071d6:	428b      	cmp	r3, r1
 80071d8:	4682      	mov	sl, r0
 80071da:	d898      	bhi.n	800710e <_strtod_l+0x436>
 80071dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf86      	itte	hi
 80071e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007278 <_strtod_l+0x5a0>
 80071e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80071ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80071f0:	2300      	movs	r3, #0
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	e07a      	b.n	80072ec <_strtod_l+0x614>
 80071f6:	07e2      	lsls	r2, r4, #31
 80071f8:	d505      	bpl.n	8007206 <_strtod_l+0x52e>
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 fa22 	bl	8000648 <__aeabi_dmul>
 8007204:	2301      	movs	r3, #1
 8007206:	9a08      	ldr	r2, [sp, #32]
 8007208:	3208      	adds	r2, #8
 800720a:	3601      	adds	r6, #1
 800720c:	1064      	asrs	r4, r4, #1
 800720e:	9208      	str	r2, [sp, #32]
 8007210:	e7cd      	b.n	80071ae <_strtod_l+0x4d6>
 8007212:	d0ed      	beq.n	80071f0 <_strtod_l+0x518>
 8007214:	4264      	negs	r4, r4
 8007216:	f014 020f 	ands.w	r2, r4, #15
 800721a:	d00a      	beq.n	8007232 <_strtod_l+0x55a>
 800721c:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <_strtod_l+0x590>)
 800721e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007222:	4650      	mov	r0, sl
 8007224:	4659      	mov	r1, fp
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 fb37 	bl	800089c <__aeabi_ddiv>
 800722e:	4682      	mov	sl, r0
 8007230:	468b      	mov	fp, r1
 8007232:	1124      	asrs	r4, r4, #4
 8007234:	d0dc      	beq.n	80071f0 <_strtod_l+0x518>
 8007236:	2c1f      	cmp	r4, #31
 8007238:	dd20      	ble.n	800727c <_strtod_l+0x5a4>
 800723a:	2400      	movs	r4, #0
 800723c:	46a0      	mov	r8, r4
 800723e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007240:	46a1      	mov	r9, r4
 8007242:	9a05      	ldr	r2, [sp, #20]
 8007244:	2322      	movs	r3, #34	@ 0x22
 8007246:	f04f 0a00 	mov.w	sl, #0
 800724a:	f04f 0b00 	mov.w	fp, #0
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e768      	b.n	8007124 <_strtod_l+0x44c>
 8007252:	bf00      	nop
 8007254:	0800b74d 	.word	0x0800b74d
 8007258:	0800b6ec 	.word	0x0800b6ec
 800725c:	0800b745 	.word	0x0800b745
 8007260:	0800b784 	.word	0x0800b784
 8007264:	0800bb15 	.word	0x0800bb15
 8007268:	0800b900 	.word	0x0800b900
 800726c:	0800b8d8 	.word	0x0800b8d8
 8007270:	7ff00000 	.word	0x7ff00000
 8007274:	7ca00000 	.word	0x7ca00000
 8007278:	7fefffff 	.word	0x7fefffff
 800727c:	f014 0310 	ands.w	r3, r4, #16
 8007280:	bf18      	it	ne
 8007282:	236a      	movne	r3, #106	@ 0x6a
 8007284:	4ea9      	ldr	r6, [pc, #676]	@ (800752c <_strtod_l+0x854>)
 8007286:	9308      	str	r3, [sp, #32]
 8007288:	4650      	mov	r0, sl
 800728a:	4659      	mov	r1, fp
 800728c:	2300      	movs	r3, #0
 800728e:	07e2      	lsls	r2, r4, #31
 8007290:	d504      	bpl.n	800729c <_strtod_l+0x5c4>
 8007292:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007296:	f7f9 f9d7 	bl	8000648 <__aeabi_dmul>
 800729a:	2301      	movs	r3, #1
 800729c:	1064      	asrs	r4, r4, #1
 800729e:	f106 0608 	add.w	r6, r6, #8
 80072a2:	d1f4      	bne.n	800728e <_strtod_l+0x5b6>
 80072a4:	b10b      	cbz	r3, 80072aa <_strtod_l+0x5d2>
 80072a6:	4682      	mov	sl, r0
 80072a8:	468b      	mov	fp, r1
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	b1b3      	cbz	r3, 80072dc <_strtod_l+0x604>
 80072ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	4659      	mov	r1, fp
 80072ba:	dd0f      	ble.n	80072dc <_strtod_l+0x604>
 80072bc:	2b1f      	cmp	r3, #31
 80072be:	dd55      	ble.n	800736c <_strtod_l+0x694>
 80072c0:	2b34      	cmp	r3, #52	@ 0x34
 80072c2:	bfde      	ittt	le
 80072c4:	f04f 33ff 	movle.w	r3, #4294967295
 80072c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072cc:	4093      	lslle	r3, r2
 80072ce:	f04f 0a00 	mov.w	sl, #0
 80072d2:	bfcc      	ite	gt
 80072d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80072d8:	ea03 0b01 	andle.w	fp, r3, r1
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4650      	mov	r0, sl
 80072e2:	4659      	mov	r1, fp
 80072e4:	f7f9 fc18 	bl	8000b18 <__aeabi_dcmpeq>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1a6      	bne.n	800723a <_strtod_l+0x562>
 80072ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80072f2:	9805      	ldr	r0, [sp, #20]
 80072f4:	462b      	mov	r3, r5
 80072f6:	463a      	mov	r2, r7
 80072f8:	f003 f86e 	bl	800a3d8 <__s2b>
 80072fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f af05 	beq.w	800710e <_strtod_l+0x436>
 8007304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007306:	2a00      	cmp	r2, #0
 8007308:	eba9 0308 	sub.w	r3, r9, r8
 800730c:	bfa8      	it	ge
 800730e:	2300      	movge	r3, #0
 8007310:	9312      	str	r3, [sp, #72]	@ 0x48
 8007312:	2400      	movs	r4, #0
 8007314:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007318:	9316      	str	r3, [sp, #88]	@ 0x58
 800731a:	46a0      	mov	r8, r4
 800731c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	6859      	ldr	r1, [r3, #4]
 8007322:	f002 ffb1 	bl	800a288 <_Balloc>
 8007326:	4681      	mov	r9, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f aef4 	beq.w	8007116 <_strtod_l+0x43e>
 800732e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	3202      	adds	r2, #2
 8007334:	f103 010c 	add.w	r1, r3, #12
 8007338:	0092      	lsls	r2, r2, #2
 800733a:	300c      	adds	r0, #12
 800733c:	f001 fceb 	bl	8008d16 <memcpy>
 8007340:	ec4b ab10 	vmov	d0, sl, fp
 8007344:	9805      	ldr	r0, [sp, #20]
 8007346:	aa1c      	add	r2, sp, #112	@ 0x70
 8007348:	a91b      	add	r1, sp, #108	@ 0x6c
 800734a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800734e:	f003 fb7f 	bl	800aa50 <__d2b>
 8007352:	901a      	str	r0, [sp, #104]	@ 0x68
 8007354:	2800      	cmp	r0, #0
 8007356:	f43f aede 	beq.w	8007116 <_strtod_l+0x43e>
 800735a:	9805      	ldr	r0, [sp, #20]
 800735c:	2101      	movs	r1, #1
 800735e:	f003 f8d1 	bl	800a504 <__i2b>
 8007362:	4680      	mov	r8, r0
 8007364:	b948      	cbnz	r0, 800737a <_strtod_l+0x6a2>
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	e6d4      	b.n	8007116 <_strtod_l+0x43e>
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	ea03 0a0a 	and.w	sl, r3, sl
 8007378:	e7b0      	b.n	80072dc <_strtod_l+0x604>
 800737a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800737c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800737e:	2d00      	cmp	r5, #0
 8007380:	bfab      	itete	ge
 8007382:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007384:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007386:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007388:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800738a:	bfac      	ite	ge
 800738c:	18ef      	addge	r7, r5, r3
 800738e:	1b5e      	sublt	r6, r3, r5
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	1aed      	subs	r5, r5, r3
 8007394:	4415      	add	r5, r2
 8007396:	4b66      	ldr	r3, [pc, #408]	@ (8007530 <_strtod_l+0x858>)
 8007398:	3d01      	subs	r5, #1
 800739a:	429d      	cmp	r5, r3
 800739c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073a0:	da50      	bge.n	8007444 <_strtod_l+0x76c>
 80073a2:	1b5b      	subs	r3, r3, r5
 80073a4:	2b1f      	cmp	r3, #31
 80073a6:	eba2 0203 	sub.w	r2, r2, r3
 80073aa:	f04f 0101 	mov.w	r1, #1
 80073ae:	dc3d      	bgt.n	800742c <_strtod_l+0x754>
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073b6:	2300      	movs	r3, #0
 80073b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80073ba:	18bd      	adds	r5, r7, r2
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	42af      	cmp	r7, r5
 80073c0:	4416      	add	r6, r2
 80073c2:	441e      	add	r6, r3
 80073c4:	463b      	mov	r3, r7
 80073c6:	bfa8      	it	ge
 80073c8:	462b      	movge	r3, r5
 80073ca:	42b3      	cmp	r3, r6
 80073cc:	bfa8      	it	ge
 80073ce:	4633      	movge	r3, r6
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfc2      	ittt	gt
 80073d4:	1aed      	subgt	r5, r5, r3
 80073d6:	1af6      	subgt	r6, r6, r3
 80073d8:	1aff      	subgt	r7, r7, r3
 80073da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073dc:	2b00      	cmp	r3, #0
 80073de:	dd16      	ble.n	800740e <_strtod_l+0x736>
 80073e0:	4641      	mov	r1, r8
 80073e2:	9805      	ldr	r0, [sp, #20]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f003 f94d 	bl	800a684 <__pow5mult>
 80073ea:	4680      	mov	r8, r0
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0ba      	beq.n	8007366 <_strtod_l+0x68e>
 80073f0:	4601      	mov	r1, r0
 80073f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073f4:	9805      	ldr	r0, [sp, #20]
 80073f6:	f003 f89b 	bl	800a530 <__multiply>
 80073fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f43f ae8a 	beq.w	8007116 <_strtod_l+0x43e>
 8007402:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007404:	9805      	ldr	r0, [sp, #20]
 8007406:	f002 ff7f 	bl	800a308 <_Bfree>
 800740a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800740c:	931a      	str	r3, [sp, #104]	@ 0x68
 800740e:	2d00      	cmp	r5, #0
 8007410:	dc1d      	bgt.n	800744e <_strtod_l+0x776>
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	dd23      	ble.n	8007460 <_strtod_l+0x788>
 8007418:	4649      	mov	r1, r9
 800741a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f003 f931 	bl	800a684 <__pow5mult>
 8007422:	4681      	mov	r9, r0
 8007424:	b9e0      	cbnz	r0, 8007460 <_strtod_l+0x788>
 8007426:	f04f 0900 	mov.w	r9, #0
 800742a:	e674      	b.n	8007116 <_strtod_l+0x43e>
 800742c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007430:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007434:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007438:	35e2      	adds	r5, #226	@ 0xe2
 800743a:	fa01 f305 	lsl.w	r3, r1, r5
 800743e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007440:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007442:	e7ba      	b.n	80073ba <_strtod_l+0x6e2>
 8007444:	2300      	movs	r3, #0
 8007446:	9310      	str	r3, [sp, #64]	@ 0x40
 8007448:	2301      	movs	r3, #1
 800744a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800744c:	e7b5      	b.n	80073ba <_strtod_l+0x6e2>
 800744e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	462a      	mov	r2, r5
 8007454:	f003 f970 	bl	800a738 <__lshift>
 8007458:	901a      	str	r0, [sp, #104]	@ 0x68
 800745a:	2800      	cmp	r0, #0
 800745c:	d1d9      	bne.n	8007412 <_strtod_l+0x73a>
 800745e:	e65a      	b.n	8007116 <_strtod_l+0x43e>
 8007460:	2e00      	cmp	r6, #0
 8007462:	dd07      	ble.n	8007474 <_strtod_l+0x79c>
 8007464:	4649      	mov	r1, r9
 8007466:	9805      	ldr	r0, [sp, #20]
 8007468:	4632      	mov	r2, r6
 800746a:	f003 f965 	bl	800a738 <__lshift>
 800746e:	4681      	mov	r9, r0
 8007470:	2800      	cmp	r0, #0
 8007472:	d0d8      	beq.n	8007426 <_strtod_l+0x74e>
 8007474:	2f00      	cmp	r7, #0
 8007476:	dd08      	ble.n	800748a <_strtod_l+0x7b2>
 8007478:	4641      	mov	r1, r8
 800747a:	9805      	ldr	r0, [sp, #20]
 800747c:	463a      	mov	r2, r7
 800747e:	f003 f95b 	bl	800a738 <__lshift>
 8007482:	4680      	mov	r8, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f ae46 	beq.w	8007116 <_strtod_l+0x43e>
 800748a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800748c:	9805      	ldr	r0, [sp, #20]
 800748e:	464a      	mov	r2, r9
 8007490:	f003 f9da 	bl	800a848 <__mdiff>
 8007494:	4604      	mov	r4, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f ae3d 	beq.w	8007116 <_strtod_l+0x43e>
 800749c:	68c3      	ldr	r3, [r0, #12]
 800749e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074a0:	2300      	movs	r3, #0
 80074a2:	60c3      	str	r3, [r0, #12]
 80074a4:	4641      	mov	r1, r8
 80074a6:	f003 f9b3 	bl	800a810 <__mcmp>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	da46      	bge.n	800753c <_strtod_l+0x864>
 80074ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b0:	ea53 030a 	orrs.w	r3, r3, sl
 80074b4:	d16c      	bne.n	8007590 <_strtod_l+0x8b8>
 80074b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d168      	bne.n	8007590 <_strtod_l+0x8b8>
 80074be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074c2:	0d1b      	lsrs	r3, r3, #20
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074ca:	d961      	bls.n	8007590 <_strtod_l+0x8b8>
 80074cc:	6963      	ldr	r3, [r4, #20]
 80074ce:	b913      	cbnz	r3, 80074d6 <_strtod_l+0x7fe>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	dd5c      	ble.n	8007590 <_strtod_l+0x8b8>
 80074d6:	4621      	mov	r1, r4
 80074d8:	2201      	movs	r2, #1
 80074da:	9805      	ldr	r0, [sp, #20]
 80074dc:	f003 f92c 	bl	800a738 <__lshift>
 80074e0:	4641      	mov	r1, r8
 80074e2:	4604      	mov	r4, r0
 80074e4:	f003 f994 	bl	800a810 <__mcmp>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	dd51      	ble.n	8007590 <_strtod_l+0x8b8>
 80074ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074f0:	9a08      	ldr	r2, [sp, #32]
 80074f2:	0d1b      	lsrs	r3, r3, #20
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d06b      	beq.n	80075d2 <_strtod_l+0x8fa>
 80074fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074fe:	d868      	bhi.n	80075d2 <_strtod_l+0x8fa>
 8007500:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007504:	f67f ae9d 	bls.w	8007242 <_strtod_l+0x56a>
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <_strtod_l+0x85c>)
 800750a:	4650      	mov	r0, sl
 800750c:	4659      	mov	r1, fp
 800750e:	2200      	movs	r2, #0
 8007510:	f7f9 f89a 	bl	8000648 <__aeabi_dmul>
 8007514:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <_strtod_l+0x860>)
 8007516:	400b      	ands	r3, r1
 8007518:	4682      	mov	sl, r0
 800751a:	468b      	mov	fp, r1
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f ae05 	bne.w	800712c <_strtod_l+0x454>
 8007522:	9a05      	ldr	r2, [sp, #20]
 8007524:	2322      	movs	r3, #34	@ 0x22
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e600      	b.n	800712c <_strtod_l+0x454>
 800752a:	bf00      	nop
 800752c:	0800b718 	.word	0x0800b718
 8007530:	fffffc02 	.word	0xfffffc02
 8007534:	39500000 	.word	0x39500000
 8007538:	7ff00000 	.word	0x7ff00000
 800753c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007540:	d165      	bne.n	800760e <_strtod_l+0x936>
 8007542:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007548:	b35a      	cbz	r2, 80075a2 <_strtod_l+0x8ca>
 800754a:	4a9f      	ldr	r2, [pc, #636]	@ (80077c8 <_strtod_l+0xaf0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d12b      	bne.n	80075a8 <_strtod_l+0x8d0>
 8007550:	9b08      	ldr	r3, [sp, #32]
 8007552:	4651      	mov	r1, sl
 8007554:	b303      	cbz	r3, 8007598 <_strtod_l+0x8c0>
 8007556:	4b9d      	ldr	r3, [pc, #628]	@ (80077cc <_strtod_l+0xaf4>)
 8007558:	465a      	mov	r2, fp
 800755a:	4013      	ands	r3, r2
 800755c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	d81b      	bhi.n	800759e <_strtod_l+0x8c6>
 8007566:	0d1b      	lsrs	r3, r3, #20
 8007568:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	4299      	cmp	r1, r3
 8007572:	d119      	bne.n	80075a8 <_strtod_l+0x8d0>
 8007574:	4b96      	ldr	r3, [pc, #600]	@ (80077d0 <_strtod_l+0xaf8>)
 8007576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007578:	429a      	cmp	r2, r3
 800757a:	d102      	bne.n	8007582 <_strtod_l+0x8aa>
 800757c:	3101      	adds	r1, #1
 800757e:	f43f adca 	beq.w	8007116 <_strtod_l+0x43e>
 8007582:	4b92      	ldr	r3, [pc, #584]	@ (80077cc <_strtod_l+0xaf4>)
 8007584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007586:	401a      	ands	r2, r3
 8007588:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800758c:	f04f 0a00 	mov.w	sl, #0
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1b8      	bne.n	8007508 <_strtod_l+0x830>
 8007596:	e5c9      	b.n	800712c <_strtod_l+0x454>
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	e7e8      	b.n	8007570 <_strtod_l+0x898>
 800759e:	4613      	mov	r3, r2
 80075a0:	e7e6      	b.n	8007570 <_strtod_l+0x898>
 80075a2:	ea53 030a 	orrs.w	r3, r3, sl
 80075a6:	d0a1      	beq.n	80074ec <_strtod_l+0x814>
 80075a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075aa:	b1db      	cbz	r3, 80075e4 <_strtod_l+0x90c>
 80075ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ae:	4213      	tst	r3, r2
 80075b0:	d0ee      	beq.n	8007590 <_strtod_l+0x8b8>
 80075b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b4:	9a08      	ldr	r2, [sp, #32]
 80075b6:	4650      	mov	r0, sl
 80075b8:	4659      	mov	r1, fp
 80075ba:	b1bb      	cbz	r3, 80075ec <_strtod_l+0x914>
 80075bc:	f7ff fb6e 	bl	8006c9c <sulp>
 80075c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c4:	ec53 2b10 	vmov	r2, r3, d0
 80075c8:	f7f8 fe88 	bl	80002dc <__adddf3>
 80075cc:	4682      	mov	sl, r0
 80075ce:	468b      	mov	fp, r1
 80075d0:	e7de      	b.n	8007590 <_strtod_l+0x8b8>
 80075d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80075da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075de:	f04f 3aff 	mov.w	sl, #4294967295
 80075e2:	e7d5      	b.n	8007590 <_strtod_l+0x8b8>
 80075e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075e6:	ea13 0f0a 	tst.w	r3, sl
 80075ea:	e7e1      	b.n	80075b0 <_strtod_l+0x8d8>
 80075ec:	f7ff fb56 	bl	8006c9c <sulp>
 80075f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075f4:	ec53 2b10 	vmov	r2, r3, d0
 80075f8:	f7f8 fe6e 	bl	80002d8 <__aeabi_dsub>
 80075fc:	2200      	movs	r2, #0
 80075fe:	2300      	movs	r3, #0
 8007600:	4682      	mov	sl, r0
 8007602:	468b      	mov	fp, r1
 8007604:	f7f9 fa88 	bl	8000b18 <__aeabi_dcmpeq>
 8007608:	2800      	cmp	r0, #0
 800760a:	d0c1      	beq.n	8007590 <_strtod_l+0x8b8>
 800760c:	e619      	b.n	8007242 <_strtod_l+0x56a>
 800760e:	4641      	mov	r1, r8
 8007610:	4620      	mov	r0, r4
 8007612:	f003 fa75 	bl	800ab00 <__ratio>
 8007616:	ec57 6b10 	vmov	r6, r7, d0
 800761a:	2200      	movs	r2, #0
 800761c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f9 fa8c 	bl	8000b40 <__aeabi_dcmple>
 8007628:	2800      	cmp	r0, #0
 800762a:	d06f      	beq.n	800770c <_strtod_l+0xa34>
 800762c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d17a      	bne.n	8007728 <_strtod_l+0xa50>
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	d158      	bne.n	80076ea <_strtod_l+0xa12>
 8007638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800763a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800763e:	2b00      	cmp	r3, #0
 8007640:	d15a      	bne.n	80076f8 <_strtod_l+0xa20>
 8007642:	4b64      	ldr	r3, [pc, #400]	@ (80077d4 <_strtod_l+0xafc>)
 8007644:	2200      	movs	r2, #0
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f9 fa6f 	bl	8000b2c <__aeabi_dcmplt>
 800764e:	2800      	cmp	r0, #0
 8007650:	d159      	bne.n	8007706 <_strtod_l+0xa2e>
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	4b60      	ldr	r3, [pc, #384]	@ (80077d8 <_strtod_l+0xb00>)
 8007658:	2200      	movs	r2, #0
 800765a:	f7f8 fff5 	bl	8000648 <__aeabi_dmul>
 800765e:	4606      	mov	r6, r0
 8007660:	460f      	mov	r7, r1
 8007662:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007666:	9606      	str	r6, [sp, #24]
 8007668:	9307      	str	r3, [sp, #28]
 800766a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800766e:	4d57      	ldr	r5, [pc, #348]	@ (80077cc <_strtod_l+0xaf4>)
 8007670:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007676:	401d      	ands	r5, r3
 8007678:	4b58      	ldr	r3, [pc, #352]	@ (80077dc <_strtod_l+0xb04>)
 800767a:	429d      	cmp	r5, r3
 800767c:	f040 80b2 	bne.w	80077e4 <_strtod_l+0xb0c>
 8007680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007682:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007686:	ec4b ab10 	vmov	d0, sl, fp
 800768a:	f003 f971 	bl	800a970 <__ulp>
 800768e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007692:	ec51 0b10 	vmov	r0, r1, d0
 8007696:	f7f8 ffd7 	bl	8000648 <__aeabi_dmul>
 800769a:	4652      	mov	r2, sl
 800769c:	465b      	mov	r3, fp
 800769e:	f7f8 fe1d 	bl	80002dc <__adddf3>
 80076a2:	460b      	mov	r3, r1
 80076a4:	4949      	ldr	r1, [pc, #292]	@ (80077cc <_strtod_l+0xaf4>)
 80076a6:	4a4e      	ldr	r2, [pc, #312]	@ (80077e0 <_strtod_l+0xb08>)
 80076a8:	4019      	ands	r1, r3
 80076aa:	4291      	cmp	r1, r2
 80076ac:	4682      	mov	sl, r0
 80076ae:	d942      	bls.n	8007736 <_strtod_l+0xa5e>
 80076b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076b2:	4b47      	ldr	r3, [pc, #284]	@ (80077d0 <_strtod_l+0xaf8>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d103      	bne.n	80076c0 <_strtod_l+0x9e8>
 80076b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076ba:	3301      	adds	r3, #1
 80076bc:	f43f ad2b 	beq.w	8007116 <_strtod_l+0x43e>
 80076c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077d0 <_strtod_l+0xaf8>
 80076c4:	f04f 3aff 	mov.w	sl, #4294967295
 80076c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076ca:	9805      	ldr	r0, [sp, #20]
 80076cc:	f002 fe1c 	bl	800a308 <_Bfree>
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	4649      	mov	r1, r9
 80076d4:	f002 fe18 	bl	800a308 <_Bfree>
 80076d8:	9805      	ldr	r0, [sp, #20]
 80076da:	4641      	mov	r1, r8
 80076dc:	f002 fe14 	bl	800a308 <_Bfree>
 80076e0:	9805      	ldr	r0, [sp, #20]
 80076e2:	4621      	mov	r1, r4
 80076e4:	f002 fe10 	bl	800a308 <_Bfree>
 80076e8:	e618      	b.n	800731c <_strtod_l+0x644>
 80076ea:	f1ba 0f01 	cmp.w	sl, #1
 80076ee:	d103      	bne.n	80076f8 <_strtod_l+0xa20>
 80076f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f43f ada5 	beq.w	8007242 <_strtod_l+0x56a>
 80076f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077a8 <_strtod_l+0xad0>
 80076fc:	4f35      	ldr	r7, [pc, #212]	@ (80077d4 <_strtod_l+0xafc>)
 80076fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007702:	2600      	movs	r6, #0
 8007704:	e7b1      	b.n	800766a <_strtod_l+0x992>
 8007706:	4f34      	ldr	r7, [pc, #208]	@ (80077d8 <_strtod_l+0xb00>)
 8007708:	2600      	movs	r6, #0
 800770a:	e7aa      	b.n	8007662 <_strtod_l+0x98a>
 800770c:	4b32      	ldr	r3, [pc, #200]	@ (80077d8 <_strtod_l+0xb00>)
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	2200      	movs	r2, #0
 8007714:	f7f8 ff98 	bl	8000648 <__aeabi_dmul>
 8007718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d09f      	beq.n	8007662 <_strtod_l+0x98a>
 8007722:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007726:	e7a0      	b.n	800766a <_strtod_l+0x992>
 8007728:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077b0 <_strtod_l+0xad8>
 800772c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007730:	ec57 6b17 	vmov	r6, r7, d7
 8007734:	e799      	b.n	800766a <_strtod_l+0x992>
 8007736:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1c1      	bne.n	80076c8 <_strtod_l+0x9f0>
 8007744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007748:	0d1b      	lsrs	r3, r3, #20
 800774a:	051b      	lsls	r3, r3, #20
 800774c:	429d      	cmp	r5, r3
 800774e:	d1bb      	bne.n	80076c8 <_strtod_l+0x9f0>
 8007750:	4630      	mov	r0, r6
 8007752:	4639      	mov	r1, r7
 8007754:	f7f9 fad8 	bl	8000d08 <__aeabi_d2lz>
 8007758:	f7f8 ff48 	bl	80005ec <__aeabi_l2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f8 fdb8 	bl	80002d8 <__aeabi_dsub>
 8007768:	460b      	mov	r3, r1
 800776a:	4602      	mov	r2, r0
 800776c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007770:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007776:	ea46 060a 	orr.w	r6, r6, sl
 800777a:	431e      	orrs	r6, r3
 800777c:	d06f      	beq.n	800785e <_strtod_l+0xb86>
 800777e:	a30e      	add	r3, pc, #56	@ (adr r3, 80077b8 <_strtod_l+0xae0>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f9 f9d2 	bl	8000b2c <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	f47f accf 	bne.w	800712c <_strtod_l+0x454>
 800778e:	a30c      	add	r3, pc, #48	@ (adr r3, 80077c0 <_strtod_l+0xae8>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007798:	f7f9 f9e6 	bl	8000b68 <__aeabi_dcmpgt>
 800779c:	2800      	cmp	r0, #0
 800779e:	d093      	beq.n	80076c8 <_strtod_l+0x9f0>
 80077a0:	e4c4      	b.n	800712c <_strtod_l+0x454>
 80077a2:	bf00      	nop
 80077a4:	f3af 8000 	nop.w
 80077a8:	00000000 	.word	0x00000000
 80077ac:	bff00000 	.word	0xbff00000
 80077b0:	00000000 	.word	0x00000000
 80077b4:	3ff00000 	.word	0x3ff00000
 80077b8:	94a03595 	.word	0x94a03595
 80077bc:	3fdfffff 	.word	0x3fdfffff
 80077c0:	35afe535 	.word	0x35afe535
 80077c4:	3fe00000 	.word	0x3fe00000
 80077c8:	000fffff 	.word	0x000fffff
 80077cc:	7ff00000 	.word	0x7ff00000
 80077d0:	7fefffff 	.word	0x7fefffff
 80077d4:	3ff00000 	.word	0x3ff00000
 80077d8:	3fe00000 	.word	0x3fe00000
 80077dc:	7fe00000 	.word	0x7fe00000
 80077e0:	7c9fffff 	.word	0x7c9fffff
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	b323      	cbz	r3, 8007832 <_strtod_l+0xb5a>
 80077e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80077ec:	d821      	bhi.n	8007832 <_strtod_l+0xb5a>
 80077ee:	a328      	add	r3, pc, #160	@ (adr r3, 8007890 <_strtod_l+0xbb8>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4630      	mov	r0, r6
 80077f6:	4639      	mov	r1, r7
 80077f8:	f7f9 f9a2 	bl	8000b40 <__aeabi_dcmple>
 80077fc:	b1a0      	cbz	r0, 8007828 <_strtod_l+0xb50>
 80077fe:	4639      	mov	r1, r7
 8007800:	4630      	mov	r0, r6
 8007802:	f7f9 f9f9 	bl	8000bf8 <__aeabi_d2uiz>
 8007806:	2801      	cmp	r0, #1
 8007808:	bf38      	it	cc
 800780a:	2001      	movcc	r0, #1
 800780c:	f7f8 fea2 	bl	8000554 <__aeabi_ui2d>
 8007810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007812:	4606      	mov	r6, r0
 8007814:	460f      	mov	r7, r1
 8007816:	b9fb      	cbnz	r3, 8007858 <_strtod_l+0xb80>
 8007818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800781c:	9014      	str	r0, [sp, #80]	@ 0x50
 800781e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007820:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007828:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800782a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800782e:	1b5b      	subs	r3, r3, r5
 8007830:	9311      	str	r3, [sp, #68]	@ 0x44
 8007832:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007836:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800783a:	f003 f899 	bl	800a970 <__ulp>
 800783e:	4650      	mov	r0, sl
 8007840:	ec53 2b10 	vmov	r2, r3, d0
 8007844:	4659      	mov	r1, fp
 8007846:	f7f8 feff 	bl	8000648 <__aeabi_dmul>
 800784a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800784e:	f7f8 fd45 	bl	80002dc <__adddf3>
 8007852:	4682      	mov	sl, r0
 8007854:	468b      	mov	fp, r1
 8007856:	e770      	b.n	800773a <_strtod_l+0xa62>
 8007858:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800785c:	e7e0      	b.n	8007820 <_strtod_l+0xb48>
 800785e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007898 <_strtod_l+0xbc0>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f9 f962 	bl	8000b2c <__aeabi_dcmplt>
 8007868:	e798      	b.n	800779c <_strtod_l+0xac4>
 800786a:	2300      	movs	r3, #0
 800786c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800786e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	f7ff ba6d 	b.w	8006d52 <_strtod_l+0x7a>
 8007878:	2a65      	cmp	r2, #101	@ 0x65
 800787a:	f43f ab66 	beq.w	8006f4a <_strtod_l+0x272>
 800787e:	2a45      	cmp	r2, #69	@ 0x45
 8007880:	f43f ab63 	beq.w	8006f4a <_strtod_l+0x272>
 8007884:	2301      	movs	r3, #1
 8007886:	f7ff bb9e 	b.w	8006fc6 <_strtod_l+0x2ee>
 800788a:	bf00      	nop
 800788c:	f3af 8000 	nop.w
 8007890:	ffc00000 	.word	0xffc00000
 8007894:	41dfffff 	.word	0x41dfffff
 8007898:	94a03595 	.word	0x94a03595
 800789c:	3fcfffff 	.word	0x3fcfffff

080078a0 <_strtod_r>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	@ (80078a8 <_strtod_r+0x8>)
 80078a2:	f7ff ba19 	b.w	8006cd8 <_strtod_l>
 80078a6:	bf00      	nop
 80078a8:	20000024 	.word	0x20000024

080078ac <strtof>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007970 <strtof+0xc4>
 80078b4:	4b29      	ldr	r3, [pc, #164]	@ (800795c <strtof+0xb0>)
 80078b6:	460a      	mov	r2, r1
 80078b8:	ed2d 8b02 	vpush	{d8}
 80078bc:	4601      	mov	r1, r0
 80078be:	f8d8 0000 	ldr.w	r0, [r8]
 80078c2:	f7ff fa09 	bl	8006cd8 <_strtod_l>
 80078c6:	ec55 4b10 	vmov	r4, r5, d0
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f9 f953 	bl	8000b7c <__aeabi_dcmpun>
 80078d6:	b190      	cbz	r0, 80078fe <strtof+0x52>
 80078d8:	2d00      	cmp	r5, #0
 80078da:	4821      	ldr	r0, [pc, #132]	@ (8007960 <strtof+0xb4>)
 80078dc:	da09      	bge.n	80078f2 <strtof+0x46>
 80078de:	f001 fa33 	bl	8008d48 <nanf>
 80078e2:	eeb1 8a40 	vneg.f32	s16, s0
 80078e6:	eeb0 0a48 	vmov.f32	s0, s16
 80078ea:	ecbd 8b02 	vpop	{d8}
 80078ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f2:	ecbd 8b02 	vpop	{d8}
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f001 ba25 	b.w	8008d48 <nanf>
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f9 f999 	bl	8000c38 <__aeabi_d2f>
 8007906:	ee08 0a10 	vmov	s16, r0
 800790a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007964 <strtof+0xb8>
 800790e:	eeb0 7ac8 	vabs.f32	s14, s16
 8007912:	eeb4 7a67 	vcmp.f32	s14, s15
 8007916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791a:	dd11      	ble.n	8007940 <strtof+0x94>
 800791c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007920:	4b11      	ldr	r3, [pc, #68]	@ (8007968 <strtof+0xbc>)
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	4620      	mov	r0, r4
 8007928:	4639      	mov	r1, r7
 800792a:	f7f9 f927 	bl	8000b7c <__aeabi_dcmpun>
 800792e:	b980      	cbnz	r0, 8007952 <strtof+0xa6>
 8007930:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <strtof+0xbc>)
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	4620      	mov	r0, r4
 8007938:	4639      	mov	r1, r7
 800793a:	f7f9 f901 	bl	8000b40 <__aeabi_dcmple>
 800793e:	b940      	cbnz	r0, 8007952 <strtof+0xa6>
 8007940:	ee18 3a10 	vmov	r3, s16
 8007944:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007948:	d1cd      	bne.n	80078e6 <strtof+0x3a>
 800794a:	4b08      	ldr	r3, [pc, #32]	@ (800796c <strtof+0xc0>)
 800794c:	402b      	ands	r3, r5
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0c9      	beq.n	80078e6 <strtof+0x3a>
 8007952:	f8d8 3000 	ldr.w	r3, [r8]
 8007956:	2222      	movs	r2, #34	@ 0x22
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e7c4      	b.n	80078e6 <strtof+0x3a>
 800795c:	20000024 	.word	0x20000024
 8007960:	0800bb15 	.word	0x0800bb15
 8007964:	7f7fffff 	.word	0x7f7fffff
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	7ff00000 	.word	0x7ff00000
 8007970:	20000190 	.word	0x20000190

08007974 <__cvt>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	ec57 6b10 	vmov	r6, r7, d0
 800797c:	2f00      	cmp	r7, #0
 800797e:	460c      	mov	r4, r1
 8007980:	4619      	mov	r1, r3
 8007982:	463b      	mov	r3, r7
 8007984:	bfbb      	ittet	lt
 8007986:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800798a:	461f      	movlt	r7, r3
 800798c:	2300      	movge	r3, #0
 800798e:	232d      	movlt	r3, #45	@ 0x2d
 8007990:	700b      	strb	r3, [r1, #0]
 8007992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007994:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007998:	4691      	mov	r9, r2
 800799a:	f023 0820 	bic.w	r8, r3, #32
 800799e:	bfbc      	itt	lt
 80079a0:	4632      	movlt	r2, r6
 80079a2:	4616      	movlt	r6, r2
 80079a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079a8:	d005      	beq.n	80079b6 <__cvt+0x42>
 80079aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80079ae:	d100      	bne.n	80079b2 <__cvt+0x3e>
 80079b0:	3401      	adds	r4, #1
 80079b2:	2102      	movs	r1, #2
 80079b4:	e000      	b.n	80079b8 <__cvt+0x44>
 80079b6:	2103      	movs	r1, #3
 80079b8:	ab03      	add	r3, sp, #12
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	ab02      	add	r3, sp, #8
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	ec47 6b10 	vmov	d0, r6, r7
 80079c4:	4653      	mov	r3, sl
 80079c6:	4622      	mov	r2, r4
 80079c8:	f001 fa4e 	bl	8008e68 <_dtoa_r>
 80079cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80079d0:	4605      	mov	r5, r0
 80079d2:	d119      	bne.n	8007a08 <__cvt+0x94>
 80079d4:	f019 0f01 	tst.w	r9, #1
 80079d8:	d00e      	beq.n	80079f8 <__cvt+0x84>
 80079da:	eb00 0904 	add.w	r9, r0, r4
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f9 f897 	bl	8000b18 <__aeabi_dcmpeq>
 80079ea:	b108      	cbz	r0, 80079f0 <__cvt+0x7c>
 80079ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80079f0:	2230      	movs	r2, #48	@ 0x30
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	454b      	cmp	r3, r9
 80079f6:	d31e      	bcc.n	8007a36 <__cvt+0xc2>
 80079f8:	9b03      	ldr	r3, [sp, #12]
 80079fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fc:	1b5b      	subs	r3, r3, r5
 80079fe:	4628      	mov	r0, r5
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	b004      	add	sp, #16
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a0c:	eb00 0904 	add.w	r9, r0, r4
 8007a10:	d1e5      	bne.n	80079de <__cvt+0x6a>
 8007a12:	7803      	ldrb	r3, [r0, #0]
 8007a14:	2b30      	cmp	r3, #48	@ 0x30
 8007a16:	d10a      	bne.n	8007a2e <__cvt+0xba>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f9 f87a 	bl	8000b18 <__aeabi_dcmpeq>
 8007a24:	b918      	cbnz	r0, 8007a2e <__cvt+0xba>
 8007a26:	f1c4 0401 	rsb	r4, r4, #1
 8007a2a:	f8ca 4000 	str.w	r4, [sl]
 8007a2e:	f8da 3000 	ldr.w	r3, [sl]
 8007a32:	4499      	add	r9, r3
 8007a34:	e7d3      	b.n	80079de <__cvt+0x6a>
 8007a36:	1c59      	adds	r1, r3, #1
 8007a38:	9103      	str	r1, [sp, #12]
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e7d9      	b.n	80079f2 <__cvt+0x7e>

08007a3e <__exponent>:
 8007a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a40:	2900      	cmp	r1, #0
 8007a42:	bfba      	itte	lt
 8007a44:	4249      	neglt	r1, r1
 8007a46:	232d      	movlt	r3, #45	@ 0x2d
 8007a48:	232b      	movge	r3, #43	@ 0x2b
 8007a4a:	2909      	cmp	r1, #9
 8007a4c:	7002      	strb	r2, [r0, #0]
 8007a4e:	7043      	strb	r3, [r0, #1]
 8007a50:	dd29      	ble.n	8007aa6 <__exponent+0x68>
 8007a52:	f10d 0307 	add.w	r3, sp, #7
 8007a56:	461d      	mov	r5, r3
 8007a58:	270a      	movs	r7, #10
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a60:	fb07 1416 	mls	r4, r7, r6, r1
 8007a64:	3430      	adds	r4, #48	@ 0x30
 8007a66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	2c63      	cmp	r4, #99	@ 0x63
 8007a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a72:	4631      	mov	r1, r6
 8007a74:	dcf1      	bgt.n	8007a5a <__exponent+0x1c>
 8007a76:	3130      	adds	r1, #48	@ 0x30
 8007a78:	1e94      	subs	r4, r2, #2
 8007a7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a7e:	1c41      	adds	r1, r0, #1
 8007a80:	4623      	mov	r3, r4
 8007a82:	42ab      	cmp	r3, r5
 8007a84:	d30a      	bcc.n	8007a9c <__exponent+0x5e>
 8007a86:	f10d 0309 	add.w	r3, sp, #9
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	42ac      	cmp	r4, r5
 8007a8e:	bf88      	it	hi
 8007a90:	2300      	movhi	r3, #0
 8007a92:	3302      	adds	r3, #2
 8007a94:	4403      	add	r3, r0
 8007a96:	1a18      	subs	r0, r3, r0
 8007a98:	b003      	add	sp, #12
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007aa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007aa4:	e7ed      	b.n	8007a82 <__exponent+0x44>
 8007aa6:	2330      	movs	r3, #48	@ 0x30
 8007aa8:	3130      	adds	r1, #48	@ 0x30
 8007aaa:	7083      	strb	r3, [r0, #2]
 8007aac:	70c1      	strb	r1, [r0, #3]
 8007aae:	1d03      	adds	r3, r0, #4
 8007ab0:	e7f1      	b.n	8007a96 <__exponent+0x58>
	...

08007ab4 <_printf_float>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	b08d      	sub	sp, #52	@ 0x34
 8007aba:	460c      	mov	r4, r1
 8007abc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	f001 f8af 	bl	8008c28 <_localeconv_r>
 8007aca:	6803      	ldr	r3, [r0, #0]
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fbf6 	bl	80002c0 <strlen>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8007adc:	9005      	str	r0, [sp, #20]
 8007ade:	3307      	adds	r3, #7
 8007ae0:	f023 0307 	bic.w	r3, r3, #7
 8007ae4:	f103 0208 	add.w	r2, r3, #8
 8007ae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007aec:	f8d4 b000 	ldr.w	fp, [r4]
 8007af0:	f8c8 2000 	str.w	r2, [r8]
 8007af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007af8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007afc:	9307      	str	r3, [sp, #28]
 8007afe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8007d7c <_printf_float+0x2c8>)
 8007b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b10:	f7f9 f834 	bl	8000b7c <__aeabi_dcmpun>
 8007b14:	bb70      	cbnz	r0, 8007b74 <_printf_float+0xc0>
 8007b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b1a:	4b98      	ldr	r3, [pc, #608]	@ (8007d7c <_printf_float+0x2c8>)
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	f7f9 f80e 	bl	8000b40 <__aeabi_dcmple>
 8007b24:	bb30      	cbnz	r0, 8007b74 <_printf_float+0xc0>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	f7f8 fffd 	bl	8000b2c <__aeabi_dcmplt>
 8007b32:	b110      	cbz	r0, 8007b3a <_printf_float+0x86>
 8007b34:	232d      	movs	r3, #45	@ 0x2d
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b3a:	4a91      	ldr	r2, [pc, #580]	@ (8007d80 <_printf_float+0x2cc>)
 8007b3c:	4b91      	ldr	r3, [pc, #580]	@ (8007d84 <_printf_float+0x2d0>)
 8007b3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b42:	bf94      	ite	ls
 8007b44:	4690      	movls	r8, r2
 8007b46:	4698      	movhi	r8, r3
 8007b48:	2303      	movs	r3, #3
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	f02b 0304 	bic.w	r3, fp, #4
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	9700      	str	r7, [sp, #0]
 8007b58:	4633      	mov	r3, r6
 8007b5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 f9d2 	bl	8007f08 <_printf_common>
 8007b64:	3001      	adds	r0, #1
 8007b66:	f040 808d 	bne.w	8007c84 <_printf_float+0x1d0>
 8007b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6e:	b00d      	add	sp, #52	@ 0x34
 8007b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 fffe 	bl	8000b7c <__aeabi_dcmpun>
 8007b80:	b140      	cbz	r0, 8007b94 <_printf_float+0xe0>
 8007b82:	464b      	mov	r3, r9
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bfbc      	itt	lt
 8007b88:	232d      	movlt	r3, #45	@ 0x2d
 8007b8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d88 <_printf_float+0x2d4>)
 8007b90:	4b7e      	ldr	r3, [pc, #504]	@ (8007d8c <_printf_float+0x2d8>)
 8007b92:	e7d4      	b.n	8007b3e <_printf_float+0x8a>
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b9a:	9206      	str	r2, [sp, #24]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	d13b      	bne.n	8007c18 <_printf_float+0x164>
 8007ba0:	2306      	movs	r3, #6
 8007ba2:	6063      	str	r3, [r4, #4]
 8007ba4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007bb4:	ab09      	add	r3, sp, #36	@ 0x24
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	6861      	ldr	r1, [r4, #4]
 8007bba:	ec49 8b10 	vmov	d0, r8, r9
 8007bbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f7ff fed6 	bl	8007974 <__cvt>
 8007bc8:	9b06      	ldr	r3, [sp, #24]
 8007bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bcc:	2b47      	cmp	r3, #71	@ 0x47
 8007bce:	4680      	mov	r8, r0
 8007bd0:	d129      	bne.n	8007c26 <_printf_float+0x172>
 8007bd2:	1cc8      	adds	r0, r1, #3
 8007bd4:	db02      	blt.n	8007bdc <_printf_float+0x128>
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	dd41      	ble.n	8007c60 <_printf_float+0x1ac>
 8007bdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007be0:	fa5f fa8a 	uxtb.w	sl, sl
 8007be4:	3901      	subs	r1, #1
 8007be6:	4652      	mov	r2, sl
 8007be8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007bec:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bee:	f7ff ff26 	bl	8007a3e <__exponent>
 8007bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bf4:	1813      	adds	r3, r2, r0
 8007bf6:	2a01      	cmp	r2, #1
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	dc02      	bgt.n	8007c04 <_printf_float+0x150>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	07d2      	lsls	r2, r2, #31
 8007c02:	d501      	bpl.n	8007c08 <_printf_float+0x154>
 8007c04:	3301      	adds	r3, #1
 8007c06:	6123      	str	r3, [r4, #16]
 8007c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0a2      	beq.n	8007b56 <_printf_float+0xa2>
 8007c10:	232d      	movs	r3, #45	@ 0x2d
 8007c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c16:	e79e      	b.n	8007b56 <_printf_float+0xa2>
 8007c18:	9a06      	ldr	r2, [sp, #24]
 8007c1a:	2a47      	cmp	r2, #71	@ 0x47
 8007c1c:	d1c2      	bne.n	8007ba4 <_printf_float+0xf0>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1c0      	bne.n	8007ba4 <_printf_float+0xf0>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7bd      	b.n	8007ba2 <_printf_float+0xee>
 8007c26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c2a:	d9db      	bls.n	8007be4 <_printf_float+0x130>
 8007c2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c30:	d118      	bne.n	8007c64 <_printf_float+0x1b0>
 8007c32:	2900      	cmp	r1, #0
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	dd0b      	ble.n	8007c50 <_printf_float+0x19c>
 8007c38:	6121      	str	r1, [r4, #16]
 8007c3a:	b913      	cbnz	r3, 8007c42 <_printf_float+0x18e>
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	07d0      	lsls	r0, r2, #31
 8007c40:	d502      	bpl.n	8007c48 <_printf_float+0x194>
 8007c42:	3301      	adds	r3, #1
 8007c44:	440b      	add	r3, r1
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c4a:	f04f 0900 	mov.w	r9, #0
 8007c4e:	e7db      	b.n	8007c08 <_printf_float+0x154>
 8007c50:	b913      	cbnz	r3, 8007c58 <_printf_float+0x1a4>
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	07d2      	lsls	r2, r2, #31
 8007c56:	d501      	bpl.n	8007c5c <_printf_float+0x1a8>
 8007c58:	3302      	adds	r3, #2
 8007c5a:	e7f4      	b.n	8007c46 <_printf_float+0x192>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e7f2      	b.n	8007c46 <_printf_float+0x192>
 8007c60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c66:	4299      	cmp	r1, r3
 8007c68:	db05      	blt.n	8007c76 <_printf_float+0x1c2>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	6121      	str	r1, [r4, #16]
 8007c6e:	07d8      	lsls	r0, r3, #31
 8007c70:	d5ea      	bpl.n	8007c48 <_printf_float+0x194>
 8007c72:	1c4b      	adds	r3, r1, #1
 8007c74:	e7e7      	b.n	8007c46 <_printf_float+0x192>
 8007c76:	2900      	cmp	r1, #0
 8007c78:	bfd4      	ite	le
 8007c7a:	f1c1 0202 	rsble	r2, r1, #2
 8007c7e:	2201      	movgt	r2, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	e7e0      	b.n	8007c46 <_printf_float+0x192>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	055a      	lsls	r2, r3, #21
 8007c88:	d407      	bmi.n	8007c9a <_printf_float+0x1e6>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d12b      	bne.n	8007cf0 <_printf_float+0x23c>
 8007c98:	e767      	b.n	8007b6a <_printf_float+0xb6>
 8007c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c9e:	f240 80dd 	bls.w	8007e5c <_printf_float+0x3a8>
 8007ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f7f8 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d033      	beq.n	8007d1a <_printf_float+0x266>
 8007cb2:	4a37      	ldr	r2, [pc, #220]	@ (8007d90 <_printf_float+0x2dc>)
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f af54 	beq.w	8007b6a <_printf_float+0xb6>
 8007cc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007cc6:	4543      	cmp	r3, r8
 8007cc8:	db02      	blt.n	8007cd0 <_printf_float+0x21c>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	07d8      	lsls	r0, r3, #31
 8007cce:	d50f      	bpl.n	8007cf0 <_printf_float+0x23c>
 8007cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b8      	blx	r7
 8007cda:	3001      	adds	r0, #1
 8007cdc:	f43f af45 	beq.w	8007b6a <_printf_float+0xb6>
 8007ce0:	f04f 0900 	mov.w	r9, #0
 8007ce4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ce8:	f104 0a1a 	add.w	sl, r4, #26
 8007cec:	45c8      	cmp	r8, r9
 8007cee:	dc09      	bgt.n	8007d04 <_printf_float+0x250>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	079b      	lsls	r3, r3, #30
 8007cf4:	f100 8103 	bmi.w	8007efe <_printf_float+0x44a>
 8007cf8:	68e0      	ldr	r0, [r4, #12]
 8007cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	bfb8      	it	lt
 8007d00:	4618      	movlt	r0, r3
 8007d02:	e734      	b.n	8007b6e <_printf_float+0xba>
 8007d04:	2301      	movs	r3, #1
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af2b 	beq.w	8007b6a <_printf_float+0xb6>
 8007d14:	f109 0901 	add.w	r9, r9, #1
 8007d18:	e7e8      	b.n	8007cec <_printf_float+0x238>
 8007d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc39      	bgt.n	8007d94 <_printf_float+0x2e0>
 8007d20:	4a1b      	ldr	r2, [pc, #108]	@ (8007d90 <_printf_float+0x2dc>)
 8007d22:	2301      	movs	r3, #1
 8007d24:	4631      	mov	r1, r6
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f af1d 	beq.w	8007b6a <_printf_float+0xb6>
 8007d30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d34:	ea59 0303 	orrs.w	r3, r9, r3
 8007d38:	d102      	bne.n	8007d40 <_printf_float+0x28c>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	07d9      	lsls	r1, r3, #31
 8007d3e:	d5d7      	bpl.n	8007cf0 <_printf_float+0x23c>
 8007d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f43f af0d 	beq.w	8007b6a <_printf_float+0xb6>
 8007d50:	f04f 0a00 	mov.w	sl, #0
 8007d54:	f104 0b1a 	add.w	fp, r4, #26
 8007d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5a:	425b      	negs	r3, r3
 8007d5c:	4553      	cmp	r3, sl
 8007d5e:	dc01      	bgt.n	8007d64 <_printf_float+0x2b0>
 8007d60:	464b      	mov	r3, r9
 8007d62:	e793      	b.n	8007c8c <_printf_float+0x1d8>
 8007d64:	2301      	movs	r3, #1
 8007d66:	465a      	mov	r2, fp
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f aefb 	beq.w	8007b6a <_printf_float+0xb6>
 8007d74:	f10a 0a01 	add.w	sl, sl, #1
 8007d78:	e7ee      	b.n	8007d58 <_printf_float+0x2a4>
 8007d7a:	bf00      	nop
 8007d7c:	7fefffff 	.word	0x7fefffff
 8007d80:	0800b740 	.word	0x0800b740
 8007d84:	0800b744 	.word	0x0800b744
 8007d88:	0800b748 	.word	0x0800b748
 8007d8c:	0800b74c 	.word	0x0800b74c
 8007d90:	0800b750 	.word	0x0800b750
 8007d94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d9a:	4553      	cmp	r3, sl
 8007d9c:	bfa8      	it	ge
 8007d9e:	4653      	movge	r3, sl
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	4699      	mov	r9, r3
 8007da4:	dc36      	bgt.n	8007e14 <_printf_float+0x360>
 8007da6:	f04f 0b00 	mov.w	fp, #0
 8007daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dae:	f104 021a 	add.w	r2, r4, #26
 8007db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007db4:	9306      	str	r3, [sp, #24]
 8007db6:	eba3 0309 	sub.w	r3, r3, r9
 8007dba:	455b      	cmp	r3, fp
 8007dbc:	dc31      	bgt.n	8007e22 <_printf_float+0x36e>
 8007dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc0:	459a      	cmp	sl, r3
 8007dc2:	dc3a      	bgt.n	8007e3a <_printf_float+0x386>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	07da      	lsls	r2, r3, #31
 8007dc8:	d437      	bmi.n	8007e3a <_printf_float+0x386>
 8007dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dcc:	ebaa 0903 	sub.w	r9, sl, r3
 8007dd0:	9b06      	ldr	r3, [sp, #24]
 8007dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8007dd6:	4599      	cmp	r9, r3
 8007dd8:	bfa8      	it	ge
 8007dda:	4699      	movge	r9, r3
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	dc33      	bgt.n	8007e4a <_printf_float+0x396>
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dea:	f104 0b1a 	add.w	fp, r4, #26
 8007dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df0:	ebaa 0303 	sub.w	r3, sl, r3
 8007df4:	eba3 0309 	sub.w	r3, r3, r9
 8007df8:	4543      	cmp	r3, r8
 8007dfa:	f77f af79 	ble.w	8007cf0 <_printf_float+0x23c>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	465a      	mov	r2, fp
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f43f aeae 	beq.w	8007b6a <_printf_float+0xb6>
 8007e0e:	f108 0801 	add.w	r8, r8, #1
 8007e12:	e7ec      	b.n	8007dee <_printf_float+0x33a>
 8007e14:	4642      	mov	r2, r8
 8007e16:	4631      	mov	r1, r6
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b8      	blx	r7
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d1c2      	bne.n	8007da6 <_printf_float+0x2f2>
 8007e20:	e6a3      	b.n	8007b6a <_printf_float+0xb6>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	9206      	str	r2, [sp, #24]
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f43f ae9c 	beq.w	8007b6a <_printf_float+0xb6>
 8007e32:	9a06      	ldr	r2, [sp, #24]
 8007e34:	f10b 0b01 	add.w	fp, fp, #1
 8007e38:	e7bb      	b.n	8007db2 <_printf_float+0x2fe>
 8007e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	d1c0      	bne.n	8007dca <_printf_float+0x316>
 8007e48:	e68f      	b.n	8007b6a <_printf_float+0xb6>
 8007e4a:	9a06      	ldr	r2, [sp, #24]
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	4442      	add	r2, r8
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	d1c3      	bne.n	8007de2 <_printf_float+0x32e>
 8007e5a:	e686      	b.n	8007b6a <_printf_float+0xb6>
 8007e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e60:	f1ba 0f01 	cmp.w	sl, #1
 8007e64:	dc01      	bgt.n	8007e6a <_printf_float+0x3b6>
 8007e66:	07db      	lsls	r3, r3, #31
 8007e68:	d536      	bpl.n	8007ed8 <_printf_float+0x424>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b8      	blx	r7
 8007e74:	3001      	adds	r0, #1
 8007e76:	f43f ae78 	beq.w	8007b6a <_printf_float+0xb6>
 8007e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae70 	beq.w	8007b6a <_printf_float+0xb6>
 8007e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2300      	movs	r3, #0
 8007e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e96:	f7f8 fe3f 	bl	8000b18 <__aeabi_dcmpeq>
 8007e9a:	b9c0      	cbnz	r0, 8007ece <_printf_float+0x41a>
 8007e9c:	4653      	mov	r3, sl
 8007e9e:	f108 0201 	add.w	r2, r8, #1
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d10c      	bne.n	8007ec6 <_printf_float+0x412>
 8007eac:	e65d      	b.n	8007b6a <_printf_float+0xb6>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	465a      	mov	r2, fp
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f ae56 	beq.w	8007b6a <_printf_float+0xb6>
 8007ebe:	f108 0801 	add.w	r8, r8, #1
 8007ec2:	45d0      	cmp	r8, sl
 8007ec4:	dbf3      	blt.n	8007eae <_printf_float+0x3fa>
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ecc:	e6df      	b.n	8007c8e <_printf_float+0x1da>
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	f104 0b1a 	add.w	fp, r4, #26
 8007ed6:	e7f4      	b.n	8007ec2 <_printf_float+0x40e>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4642      	mov	r2, r8
 8007edc:	e7e1      	b.n	8007ea2 <_printf_float+0x3ee>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	464a      	mov	r2, r9
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f ae3e 	beq.w	8007b6a <_printf_float+0xb6>
 8007eee:	f108 0801 	add.w	r8, r8, #1
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ef6:	1a5b      	subs	r3, r3, r1
 8007ef8:	4543      	cmp	r3, r8
 8007efa:	dcf0      	bgt.n	8007ede <_printf_float+0x42a>
 8007efc:	e6fc      	b.n	8007cf8 <_printf_float+0x244>
 8007efe:	f04f 0800 	mov.w	r8, #0
 8007f02:	f104 0919 	add.w	r9, r4, #25
 8007f06:	e7f4      	b.n	8007ef2 <_printf_float+0x43e>

08007f08 <_printf_common>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	4698      	mov	r8, r3
 8007f10:	688a      	ldr	r2, [r1, #8]
 8007f12:	690b      	ldr	r3, [r1, #16]
 8007f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	bfb8      	it	lt
 8007f1c:	4613      	movlt	r3, r2
 8007f1e:	6033      	str	r3, [r6, #0]
 8007f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f24:	4607      	mov	r7, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	b10a      	cbz	r2, 8007f2e <_printf_common+0x26>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	6033      	str	r3, [r6, #0]
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	0699      	lsls	r1, r3, #26
 8007f32:	bf42      	ittt	mi
 8007f34:	6833      	ldrmi	r3, [r6, #0]
 8007f36:	3302      	addmi	r3, #2
 8007f38:	6033      	strmi	r3, [r6, #0]
 8007f3a:	6825      	ldr	r5, [r4, #0]
 8007f3c:	f015 0506 	ands.w	r5, r5, #6
 8007f40:	d106      	bne.n	8007f50 <_printf_common+0x48>
 8007f42:	f104 0a19 	add.w	sl, r4, #25
 8007f46:	68e3      	ldr	r3, [r4, #12]
 8007f48:	6832      	ldr	r2, [r6, #0]
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dc26      	bgt.n	8007f9e <_printf_common+0x96>
 8007f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	3b00      	subs	r3, #0
 8007f58:	bf18      	it	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	0692      	lsls	r2, r2, #26
 8007f5e:	d42b      	bmi.n	8007fb8 <_printf_common+0xb0>
 8007f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f64:	4641      	mov	r1, r8
 8007f66:	4638      	mov	r0, r7
 8007f68:	47c8      	blx	r9
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d01e      	beq.n	8007fac <_printf_common+0xa4>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	6922      	ldr	r2, [r4, #16]
 8007f72:	f003 0306 	and.w	r3, r3, #6
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	bf02      	ittt	eq
 8007f7a:	68e5      	ldreq	r5, [r4, #12]
 8007f7c:	6833      	ldreq	r3, [r6, #0]
 8007f7e:	1aed      	subeq	r5, r5, r3
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	bf0c      	ite	eq
 8007f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f88:	2500      	movne	r5, #0
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bfc4      	itt	gt
 8007f8e:	1a9b      	subgt	r3, r3, r2
 8007f90:	18ed      	addgt	r5, r5, r3
 8007f92:	2600      	movs	r6, #0
 8007f94:	341a      	adds	r4, #26
 8007f96:	42b5      	cmp	r5, r6
 8007f98:	d11a      	bne.n	8007fd0 <_printf_common+0xc8>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e008      	b.n	8007fb0 <_printf_common+0xa8>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	47c8      	blx	r9
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d103      	bne.n	8007fb4 <_printf_common+0xac>
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	e7c6      	b.n	8007f46 <_printf_common+0x3e>
 8007fb8:	18e1      	adds	r1, r4, r3
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	2030      	movs	r0, #48	@ 0x30
 8007fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fc2:	4422      	add	r2, r4
 8007fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fcc:	3302      	adds	r3, #2
 8007fce:	e7c7      	b.n	8007f60 <_printf_common+0x58>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	47c8      	blx	r9
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d0e6      	beq.n	8007fac <_printf_common+0xa4>
 8007fde:	3601      	adds	r6, #1
 8007fe0:	e7d9      	b.n	8007f96 <_printf_common+0x8e>
	...

08007fe4 <_printf_i>:
 8007fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	7e0f      	ldrb	r7, [r1, #24]
 8007fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fec:	2f78      	cmp	r7, #120	@ 0x78
 8007fee:	4691      	mov	r9, r2
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	469a      	mov	sl, r3
 8007ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ffa:	d807      	bhi.n	800800c <_printf_i+0x28>
 8007ffc:	2f62      	cmp	r7, #98	@ 0x62
 8007ffe:	d80a      	bhi.n	8008016 <_printf_i+0x32>
 8008000:	2f00      	cmp	r7, #0
 8008002:	f000 80d2 	beq.w	80081aa <_printf_i+0x1c6>
 8008006:	2f58      	cmp	r7, #88	@ 0x58
 8008008:	f000 80b9 	beq.w	800817e <_printf_i+0x19a>
 800800c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008014:	e03a      	b.n	800808c <_printf_i+0xa8>
 8008016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800801a:	2b15      	cmp	r3, #21
 800801c:	d8f6      	bhi.n	800800c <_printf_i+0x28>
 800801e:	a101      	add	r1, pc, #4	@ (adr r1, 8008024 <_printf_i+0x40>)
 8008020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008024:	0800807d 	.word	0x0800807d
 8008028:	08008091 	.word	0x08008091
 800802c:	0800800d 	.word	0x0800800d
 8008030:	0800800d 	.word	0x0800800d
 8008034:	0800800d 	.word	0x0800800d
 8008038:	0800800d 	.word	0x0800800d
 800803c:	08008091 	.word	0x08008091
 8008040:	0800800d 	.word	0x0800800d
 8008044:	0800800d 	.word	0x0800800d
 8008048:	0800800d 	.word	0x0800800d
 800804c:	0800800d 	.word	0x0800800d
 8008050:	08008191 	.word	0x08008191
 8008054:	080080bb 	.word	0x080080bb
 8008058:	0800814b 	.word	0x0800814b
 800805c:	0800800d 	.word	0x0800800d
 8008060:	0800800d 	.word	0x0800800d
 8008064:	080081b3 	.word	0x080081b3
 8008068:	0800800d 	.word	0x0800800d
 800806c:	080080bb 	.word	0x080080bb
 8008070:	0800800d 	.word	0x0800800d
 8008074:	0800800d 	.word	0x0800800d
 8008078:	08008153 	.word	0x08008153
 800807c:	6833      	ldr	r3, [r6, #0]
 800807e:	1d1a      	adds	r2, r3, #4
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6032      	str	r2, [r6, #0]
 8008084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800808c:	2301      	movs	r3, #1
 800808e:	e09d      	b.n	80081cc <_printf_i+0x1e8>
 8008090:	6833      	ldr	r3, [r6, #0]
 8008092:	6820      	ldr	r0, [r4, #0]
 8008094:	1d19      	adds	r1, r3, #4
 8008096:	6031      	str	r1, [r6, #0]
 8008098:	0606      	lsls	r6, r0, #24
 800809a:	d501      	bpl.n	80080a0 <_printf_i+0xbc>
 800809c:	681d      	ldr	r5, [r3, #0]
 800809e:	e003      	b.n	80080a8 <_printf_i+0xc4>
 80080a0:	0645      	lsls	r5, r0, #25
 80080a2:	d5fb      	bpl.n	800809c <_printf_i+0xb8>
 80080a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	da03      	bge.n	80080b4 <_printf_i+0xd0>
 80080ac:	232d      	movs	r3, #45	@ 0x2d
 80080ae:	426d      	negs	r5, r5
 80080b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080b4:	4859      	ldr	r0, [pc, #356]	@ (800821c <_printf_i+0x238>)
 80080b6:	230a      	movs	r3, #10
 80080b8:	e011      	b.n	80080de <_printf_i+0xfa>
 80080ba:	6821      	ldr	r1, [r4, #0]
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	0608      	lsls	r0, r1, #24
 80080c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80080c4:	d402      	bmi.n	80080cc <_printf_i+0xe8>
 80080c6:	0649      	lsls	r1, r1, #25
 80080c8:	bf48      	it	mi
 80080ca:	b2ad      	uxthmi	r5, r5
 80080cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80080ce:	4853      	ldr	r0, [pc, #332]	@ (800821c <_printf_i+0x238>)
 80080d0:	6033      	str	r3, [r6, #0]
 80080d2:	bf14      	ite	ne
 80080d4:	230a      	movne	r3, #10
 80080d6:	2308      	moveq	r3, #8
 80080d8:	2100      	movs	r1, #0
 80080da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080de:	6866      	ldr	r6, [r4, #4]
 80080e0:	60a6      	str	r6, [r4, #8]
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	bfa2      	ittt	ge
 80080e6:	6821      	ldrge	r1, [r4, #0]
 80080e8:	f021 0104 	bicge.w	r1, r1, #4
 80080ec:	6021      	strge	r1, [r4, #0]
 80080ee:	b90d      	cbnz	r5, 80080f4 <_printf_i+0x110>
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	d04b      	beq.n	800818c <_printf_i+0x1a8>
 80080f4:	4616      	mov	r6, r2
 80080f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80080fa:	fb03 5711 	mls	r7, r3, r1, r5
 80080fe:	5dc7      	ldrb	r7, [r0, r7]
 8008100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008104:	462f      	mov	r7, r5
 8008106:	42bb      	cmp	r3, r7
 8008108:	460d      	mov	r5, r1
 800810a:	d9f4      	bls.n	80080f6 <_printf_i+0x112>
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10b      	bne.n	8008128 <_printf_i+0x144>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	07df      	lsls	r7, r3, #31
 8008114:	d508      	bpl.n	8008128 <_printf_i+0x144>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4299      	cmp	r1, r3
 800811c:	bfde      	ittt	le
 800811e:	2330      	movle	r3, #48	@ 0x30
 8008120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008128:	1b92      	subs	r2, r2, r6
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	f8cd a000 	str.w	sl, [sp]
 8008130:	464b      	mov	r3, r9
 8008132:	aa03      	add	r2, sp, #12
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff fee6 	bl	8007f08 <_printf_common>
 800813c:	3001      	adds	r0, #1
 800813e:	d14a      	bne.n	80081d6 <_printf_i+0x1f2>
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	b004      	add	sp, #16
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f043 0320 	orr.w	r3, r3, #32
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	4833      	ldr	r0, [pc, #204]	@ (8008220 <_printf_i+0x23c>)
 8008154:	2778      	movs	r7, #120	@ 0x78
 8008156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	6831      	ldr	r1, [r6, #0]
 800815e:	061f      	lsls	r7, r3, #24
 8008160:	f851 5b04 	ldr.w	r5, [r1], #4
 8008164:	d402      	bmi.n	800816c <_printf_i+0x188>
 8008166:	065f      	lsls	r7, r3, #25
 8008168:	bf48      	it	mi
 800816a:	b2ad      	uxthmi	r5, r5
 800816c:	6031      	str	r1, [r6, #0]
 800816e:	07d9      	lsls	r1, r3, #31
 8008170:	bf44      	itt	mi
 8008172:	f043 0320 	orrmi.w	r3, r3, #32
 8008176:	6023      	strmi	r3, [r4, #0]
 8008178:	b11d      	cbz	r5, 8008182 <_printf_i+0x19e>
 800817a:	2310      	movs	r3, #16
 800817c:	e7ac      	b.n	80080d8 <_printf_i+0xf4>
 800817e:	4827      	ldr	r0, [pc, #156]	@ (800821c <_printf_i+0x238>)
 8008180:	e7e9      	b.n	8008156 <_printf_i+0x172>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	f023 0320 	bic.w	r3, r3, #32
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	e7f6      	b.n	800817a <_printf_i+0x196>
 800818c:	4616      	mov	r6, r2
 800818e:	e7bd      	b.n	800810c <_printf_i+0x128>
 8008190:	6833      	ldr	r3, [r6, #0]
 8008192:	6825      	ldr	r5, [r4, #0]
 8008194:	6961      	ldr	r1, [r4, #20]
 8008196:	1d18      	adds	r0, r3, #4
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	062e      	lsls	r6, r5, #24
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0x1c0>
 80081a0:	6019      	str	r1, [r3, #0]
 80081a2:	e002      	b.n	80081aa <_printf_i+0x1c6>
 80081a4:	0668      	lsls	r0, r5, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0x1bc>
 80081a8:	8019      	strh	r1, [r3, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	4616      	mov	r6, r2
 80081b0:	e7bc      	b.n	800812c <_printf_i+0x148>
 80081b2:	6833      	ldr	r3, [r6, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	6032      	str	r2, [r6, #0]
 80081b8:	681e      	ldr	r6, [r3, #0]
 80081ba:	6862      	ldr	r2, [r4, #4]
 80081bc:	2100      	movs	r1, #0
 80081be:	4630      	mov	r0, r6
 80081c0:	f7f8 f82e 	bl	8000220 <memchr>
 80081c4:	b108      	cbz	r0, 80081ca <_printf_i+0x1e6>
 80081c6:	1b80      	subs	r0, r0, r6
 80081c8:	6060      	str	r0, [r4, #4]
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	2300      	movs	r3, #0
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081d4:	e7aa      	b.n	800812c <_printf_i+0x148>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	4632      	mov	r2, r6
 80081da:	4649      	mov	r1, r9
 80081dc:	4640      	mov	r0, r8
 80081de:	47d0      	blx	sl
 80081e0:	3001      	adds	r0, #1
 80081e2:	d0ad      	beq.n	8008140 <_printf_i+0x15c>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	079b      	lsls	r3, r3, #30
 80081e8:	d413      	bmi.n	8008212 <_printf_i+0x22e>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	4298      	cmp	r0, r3
 80081f0:	bfb8      	it	lt
 80081f2:	4618      	movlt	r0, r3
 80081f4:	e7a6      	b.n	8008144 <_printf_i+0x160>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4632      	mov	r2, r6
 80081fa:	4649      	mov	r1, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	47d0      	blx	sl
 8008200:	3001      	adds	r0, #1
 8008202:	d09d      	beq.n	8008140 <_printf_i+0x15c>
 8008204:	3501      	adds	r5, #1
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	9903      	ldr	r1, [sp, #12]
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	42ab      	cmp	r3, r5
 800820e:	dcf2      	bgt.n	80081f6 <_printf_i+0x212>
 8008210:	e7eb      	b.n	80081ea <_printf_i+0x206>
 8008212:	2500      	movs	r5, #0
 8008214:	f104 0619 	add.w	r6, r4, #25
 8008218:	e7f5      	b.n	8008206 <_printf_i+0x222>
 800821a:	bf00      	nop
 800821c:	0800b752 	.word	0x0800b752
 8008220:	0800b763 	.word	0x0800b763

08008224 <_scanf_float>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	b087      	sub	sp, #28
 800822a:	4617      	mov	r7, r2
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	688b      	ldr	r3, [r1, #8]
 8008230:	1e5a      	subs	r2, r3, #1
 8008232:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008236:	bf81      	itttt	hi
 8008238:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800823c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008240:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008244:	608b      	strhi	r3, [r1, #8]
 8008246:	680b      	ldr	r3, [r1, #0]
 8008248:	460a      	mov	r2, r1
 800824a:	f04f 0500 	mov.w	r5, #0
 800824e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008252:	f842 3b1c 	str.w	r3, [r2], #28
 8008256:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800825a:	4680      	mov	r8, r0
 800825c:	460c      	mov	r4, r1
 800825e:	bf98      	it	ls
 8008260:	f04f 0b00 	movls.w	fp, #0
 8008264:	9201      	str	r2, [sp, #4]
 8008266:	4616      	mov	r6, r2
 8008268:	46aa      	mov	sl, r5
 800826a:	46a9      	mov	r9, r5
 800826c:	9502      	str	r5, [sp, #8]
 800826e:	68a2      	ldr	r2, [r4, #8]
 8008270:	b152      	cbz	r2, 8008288 <_scanf_float+0x64>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b4e      	cmp	r3, #78	@ 0x4e
 8008278:	d864      	bhi.n	8008344 <_scanf_float+0x120>
 800827a:	2b40      	cmp	r3, #64	@ 0x40
 800827c:	d83c      	bhi.n	80082f8 <_scanf_float+0xd4>
 800827e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008282:	b2c8      	uxtb	r0, r1
 8008284:	280e      	cmp	r0, #14
 8008286:	d93a      	bls.n	80082fe <_scanf_float+0xda>
 8008288:	f1b9 0f00 	cmp.w	r9, #0
 800828c:	d003      	beq.n	8008296 <_scanf_float+0x72>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800829a:	f1ba 0f01 	cmp.w	sl, #1
 800829e:	f200 8117 	bhi.w	80084d0 <_scanf_float+0x2ac>
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	429e      	cmp	r6, r3
 80082a6:	f200 8108 	bhi.w	80084ba <_scanf_float+0x296>
 80082aa:	2001      	movs	r0, #1
 80082ac:	b007      	add	sp, #28
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80082b6:	2a0d      	cmp	r2, #13
 80082b8:	d8e6      	bhi.n	8008288 <_scanf_float+0x64>
 80082ba:	a101      	add	r1, pc, #4	@ (adr r1, 80082c0 <_scanf_float+0x9c>)
 80082bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082c0:	08008407 	.word	0x08008407
 80082c4:	08008289 	.word	0x08008289
 80082c8:	08008289 	.word	0x08008289
 80082cc:	08008289 	.word	0x08008289
 80082d0:	08008467 	.word	0x08008467
 80082d4:	0800843f 	.word	0x0800843f
 80082d8:	08008289 	.word	0x08008289
 80082dc:	08008289 	.word	0x08008289
 80082e0:	08008415 	.word	0x08008415
 80082e4:	08008289 	.word	0x08008289
 80082e8:	08008289 	.word	0x08008289
 80082ec:	08008289 	.word	0x08008289
 80082f0:	08008289 	.word	0x08008289
 80082f4:	080083cd 	.word	0x080083cd
 80082f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80082fc:	e7db      	b.n	80082b6 <_scanf_float+0x92>
 80082fe:	290e      	cmp	r1, #14
 8008300:	d8c2      	bhi.n	8008288 <_scanf_float+0x64>
 8008302:	a001      	add	r0, pc, #4	@ (adr r0, 8008308 <_scanf_float+0xe4>)
 8008304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008308:	080083bd 	.word	0x080083bd
 800830c:	08008289 	.word	0x08008289
 8008310:	080083bd 	.word	0x080083bd
 8008314:	08008453 	.word	0x08008453
 8008318:	08008289 	.word	0x08008289
 800831c:	08008365 	.word	0x08008365
 8008320:	080083a3 	.word	0x080083a3
 8008324:	080083a3 	.word	0x080083a3
 8008328:	080083a3 	.word	0x080083a3
 800832c:	080083a3 	.word	0x080083a3
 8008330:	080083a3 	.word	0x080083a3
 8008334:	080083a3 	.word	0x080083a3
 8008338:	080083a3 	.word	0x080083a3
 800833c:	080083a3 	.word	0x080083a3
 8008340:	080083a3 	.word	0x080083a3
 8008344:	2b6e      	cmp	r3, #110	@ 0x6e
 8008346:	d809      	bhi.n	800835c <_scanf_float+0x138>
 8008348:	2b60      	cmp	r3, #96	@ 0x60
 800834a:	d8b2      	bhi.n	80082b2 <_scanf_float+0x8e>
 800834c:	2b54      	cmp	r3, #84	@ 0x54
 800834e:	d07b      	beq.n	8008448 <_scanf_float+0x224>
 8008350:	2b59      	cmp	r3, #89	@ 0x59
 8008352:	d199      	bne.n	8008288 <_scanf_float+0x64>
 8008354:	2d07      	cmp	r5, #7
 8008356:	d197      	bne.n	8008288 <_scanf_float+0x64>
 8008358:	2508      	movs	r5, #8
 800835a:	e02c      	b.n	80083b6 <_scanf_float+0x192>
 800835c:	2b74      	cmp	r3, #116	@ 0x74
 800835e:	d073      	beq.n	8008448 <_scanf_float+0x224>
 8008360:	2b79      	cmp	r3, #121	@ 0x79
 8008362:	e7f6      	b.n	8008352 <_scanf_float+0x12e>
 8008364:	6821      	ldr	r1, [r4, #0]
 8008366:	05c8      	lsls	r0, r1, #23
 8008368:	d51b      	bpl.n	80083a2 <_scanf_float+0x17e>
 800836a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800836e:	6021      	str	r1, [r4, #0]
 8008370:	f109 0901 	add.w	r9, r9, #1
 8008374:	f1bb 0f00 	cmp.w	fp, #0
 8008378:	d003      	beq.n	8008382 <_scanf_float+0x15e>
 800837a:	3201      	adds	r2, #1
 800837c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008380:	60a2      	str	r2, [r4, #8]
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	3b01      	subs	r3, #1
 8008386:	60a3      	str	r3, [r4, #8]
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	3301      	adds	r3, #1
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3b01      	subs	r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	f340 8087 	ble.w	80084a8 <_scanf_float+0x284>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e765      	b.n	800826e <_scanf_float+0x4a>
 80083a2:	eb1a 0105 	adds.w	r1, sl, r5
 80083a6:	f47f af6f 	bne.w	8008288 <_scanf_float+0x64>
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80083b0:	6022      	str	r2, [r4, #0]
 80083b2:	460d      	mov	r5, r1
 80083b4:	468a      	mov	sl, r1
 80083b6:	f806 3b01 	strb.w	r3, [r6], #1
 80083ba:	e7e2      	b.n	8008382 <_scanf_float+0x15e>
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	0610      	lsls	r0, r2, #24
 80083c0:	f57f af62 	bpl.w	8008288 <_scanf_float+0x64>
 80083c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083c8:	6022      	str	r2, [r4, #0]
 80083ca:	e7f4      	b.n	80083b6 <_scanf_float+0x192>
 80083cc:	f1ba 0f00 	cmp.w	sl, #0
 80083d0:	d10e      	bne.n	80083f0 <_scanf_float+0x1cc>
 80083d2:	f1b9 0f00 	cmp.w	r9, #0
 80083d6:	d10e      	bne.n	80083f6 <_scanf_float+0x1d2>
 80083d8:	6822      	ldr	r2, [r4, #0]
 80083da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083e2:	d108      	bne.n	80083f6 <_scanf_float+0x1d2>
 80083e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	f04f 0a01 	mov.w	sl, #1
 80083ee:	e7e2      	b.n	80083b6 <_scanf_float+0x192>
 80083f0:	f1ba 0f02 	cmp.w	sl, #2
 80083f4:	d055      	beq.n	80084a2 <_scanf_float+0x27e>
 80083f6:	2d01      	cmp	r5, #1
 80083f8:	d002      	beq.n	8008400 <_scanf_float+0x1dc>
 80083fa:	2d04      	cmp	r5, #4
 80083fc:	f47f af44 	bne.w	8008288 <_scanf_float+0x64>
 8008400:	3501      	adds	r5, #1
 8008402:	b2ed      	uxtb	r5, r5
 8008404:	e7d7      	b.n	80083b6 <_scanf_float+0x192>
 8008406:	f1ba 0f01 	cmp.w	sl, #1
 800840a:	f47f af3d 	bne.w	8008288 <_scanf_float+0x64>
 800840e:	f04f 0a02 	mov.w	sl, #2
 8008412:	e7d0      	b.n	80083b6 <_scanf_float+0x192>
 8008414:	b97d      	cbnz	r5, 8008436 <_scanf_float+0x212>
 8008416:	f1b9 0f00 	cmp.w	r9, #0
 800841a:	f47f af38 	bne.w	800828e <_scanf_float+0x6a>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008424:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008428:	f040 8108 	bne.w	800863c <_scanf_float+0x418>
 800842c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	2501      	movs	r5, #1
 8008434:	e7bf      	b.n	80083b6 <_scanf_float+0x192>
 8008436:	2d03      	cmp	r5, #3
 8008438:	d0e2      	beq.n	8008400 <_scanf_float+0x1dc>
 800843a:	2d05      	cmp	r5, #5
 800843c:	e7de      	b.n	80083fc <_scanf_float+0x1d8>
 800843e:	2d02      	cmp	r5, #2
 8008440:	f47f af22 	bne.w	8008288 <_scanf_float+0x64>
 8008444:	2503      	movs	r5, #3
 8008446:	e7b6      	b.n	80083b6 <_scanf_float+0x192>
 8008448:	2d06      	cmp	r5, #6
 800844a:	f47f af1d 	bne.w	8008288 <_scanf_float+0x64>
 800844e:	2507      	movs	r5, #7
 8008450:	e7b1      	b.n	80083b6 <_scanf_float+0x192>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	0591      	lsls	r1, r2, #22
 8008456:	f57f af17 	bpl.w	8008288 <_scanf_float+0x64>
 800845a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	f8cd 9008 	str.w	r9, [sp, #8]
 8008464:	e7a7      	b.n	80083b6 <_scanf_float+0x192>
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800846c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008470:	d006      	beq.n	8008480 <_scanf_float+0x25c>
 8008472:	0550      	lsls	r0, r2, #21
 8008474:	f57f af08 	bpl.w	8008288 <_scanf_float+0x64>
 8008478:	f1b9 0f00 	cmp.w	r9, #0
 800847c:	f000 80de 	beq.w	800863c <_scanf_float+0x418>
 8008480:	0591      	lsls	r1, r2, #22
 8008482:	bf58      	it	pl
 8008484:	9902      	ldrpl	r1, [sp, #8]
 8008486:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800848a:	bf58      	it	pl
 800848c:	eba9 0101 	subpl.w	r1, r9, r1
 8008490:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008494:	bf58      	it	pl
 8008496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800849a:	6022      	str	r2, [r4, #0]
 800849c:	f04f 0900 	mov.w	r9, #0
 80084a0:	e789      	b.n	80083b6 <_scanf_float+0x192>
 80084a2:	f04f 0a03 	mov.w	sl, #3
 80084a6:	e786      	b.n	80083b6 <_scanf_float+0x192>
 80084a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80084ac:	4639      	mov	r1, r7
 80084ae:	4640      	mov	r0, r8
 80084b0:	4798      	blx	r3
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f43f aedb 	beq.w	800826e <_scanf_float+0x4a>
 80084b8:	e6e6      	b.n	8008288 <_scanf_float+0x64>
 80084ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084c2:	463a      	mov	r2, r7
 80084c4:	4640      	mov	r0, r8
 80084c6:	4798      	blx	r3
 80084c8:	6923      	ldr	r3, [r4, #16]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	e6e8      	b.n	80082a2 <_scanf_float+0x7e>
 80084d0:	1e6b      	subs	r3, r5, #1
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d824      	bhi.n	8008520 <_scanf_float+0x2fc>
 80084d6:	2d02      	cmp	r5, #2
 80084d8:	d836      	bhi.n	8008548 <_scanf_float+0x324>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	429e      	cmp	r6, r3
 80084de:	f67f aee4 	bls.w	80082aa <_scanf_float+0x86>
 80084e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ea:	463a      	mov	r2, r7
 80084ec:	4640      	mov	r0, r8
 80084ee:	4798      	blx	r3
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	e7f0      	b.n	80084da <_scanf_float+0x2b6>
 80084f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008500:	463a      	mov	r2, r7
 8008502:	4640      	mov	r0, r8
 8008504:	4798      	blx	r3
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	3b01      	subs	r3, #1
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008510:	fa5f fa8a 	uxtb.w	sl, sl
 8008514:	f1ba 0f02 	cmp.w	sl, #2
 8008518:	d1ee      	bne.n	80084f8 <_scanf_float+0x2d4>
 800851a:	3d03      	subs	r5, #3
 800851c:	b2ed      	uxtb	r5, r5
 800851e:	1b76      	subs	r6, r6, r5
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	05da      	lsls	r2, r3, #23
 8008524:	d530      	bpl.n	8008588 <_scanf_float+0x364>
 8008526:	055b      	lsls	r3, r3, #21
 8008528:	d511      	bpl.n	800854e <_scanf_float+0x32a>
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	429e      	cmp	r6, r3
 800852e:	f67f aebc 	bls.w	80082aa <_scanf_float+0x86>
 8008532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800853a:	463a      	mov	r2, r7
 800853c:	4640      	mov	r0, r8
 800853e:	4798      	blx	r3
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	3b01      	subs	r3, #1
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	e7f0      	b.n	800852a <_scanf_float+0x306>
 8008548:	46aa      	mov	sl, r5
 800854a:	46b3      	mov	fp, r6
 800854c:	e7de      	b.n	800850c <_scanf_float+0x2e8>
 800854e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	2965      	cmp	r1, #101	@ 0x65
 8008556:	f103 33ff 	add.w	r3, r3, #4294967295
 800855a:	f106 35ff 	add.w	r5, r6, #4294967295
 800855e:	6123      	str	r3, [r4, #16]
 8008560:	d00c      	beq.n	800857c <_scanf_float+0x358>
 8008562:	2945      	cmp	r1, #69	@ 0x45
 8008564:	d00a      	beq.n	800857c <_scanf_float+0x358>
 8008566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800856a:	463a      	mov	r2, r7
 800856c:	4640      	mov	r0, r8
 800856e:	4798      	blx	r3
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008576:	3b01      	subs	r3, #1
 8008578:	1eb5      	subs	r5, r6, #2
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008580:	463a      	mov	r2, r7
 8008582:	4640      	mov	r0, r8
 8008584:	4798      	blx	r3
 8008586:	462e      	mov	r6, r5
 8008588:	6822      	ldr	r2, [r4, #0]
 800858a:	f012 0210 	ands.w	r2, r2, #16
 800858e:	d001      	beq.n	8008594 <_scanf_float+0x370>
 8008590:	2000      	movs	r0, #0
 8008592:	e68b      	b.n	80082ac <_scanf_float+0x88>
 8008594:	7032      	strb	r2, [r6, #0]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a0:	d11c      	bne.n	80085dc <_scanf_float+0x3b8>
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	454b      	cmp	r3, r9
 80085a6:	eba3 0209 	sub.w	r2, r3, r9
 80085aa:	d123      	bne.n	80085f4 <_scanf_float+0x3d0>
 80085ac:	9901      	ldr	r1, [sp, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	4640      	mov	r0, r8
 80085b2:	f7ff f975 	bl	80078a0 <_strtod_r>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	6821      	ldr	r1, [r4, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f011 0f02 	tst.w	r1, #2
 80085c0:	ec57 6b10 	vmov	r6, r7, d0
 80085c4:	f103 0204 	add.w	r2, r3, #4
 80085c8:	d01f      	beq.n	800860a <_scanf_float+0x3e6>
 80085ca:	9903      	ldr	r1, [sp, #12]
 80085cc:	600a      	str	r2, [r1, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	e9c3 6700 	strd	r6, r7, [r3]
 80085d4:	68e3      	ldr	r3, [r4, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60e3      	str	r3, [r4, #12]
 80085da:	e7d9      	b.n	8008590 <_scanf_float+0x36c>
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0e4      	beq.n	80085ac <_scanf_float+0x388>
 80085e2:	9905      	ldr	r1, [sp, #20]
 80085e4:	230a      	movs	r3, #10
 80085e6:	3101      	adds	r1, #1
 80085e8:	4640      	mov	r0, r8
 80085ea:	f002 fb79 	bl	800ace0 <_strtol_r>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	9e05      	ldr	r6, [sp, #20]
 80085f2:	1ac2      	subs	r2, r0, r3
 80085f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80085f8:	429e      	cmp	r6, r3
 80085fa:	bf28      	it	cs
 80085fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008600:	4910      	ldr	r1, [pc, #64]	@ (8008644 <_scanf_float+0x420>)
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f9fe 	bl	8008a04 <siprintf>
 8008608:	e7d0      	b.n	80085ac <_scanf_float+0x388>
 800860a:	f011 0f04 	tst.w	r1, #4
 800860e:	9903      	ldr	r1, [sp, #12]
 8008610:	600a      	str	r2, [r1, #0]
 8008612:	d1dc      	bne.n	80085ce <_scanf_float+0x3aa>
 8008614:	681d      	ldr	r5, [r3, #0]
 8008616:	4632      	mov	r2, r6
 8008618:	463b      	mov	r3, r7
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	f7f8 faad 	bl	8000b7c <__aeabi_dcmpun>
 8008622:	b128      	cbz	r0, 8008630 <_scanf_float+0x40c>
 8008624:	4808      	ldr	r0, [pc, #32]	@ (8008648 <_scanf_float+0x424>)
 8008626:	f000 fb8f 	bl	8008d48 <nanf>
 800862a:	ed85 0a00 	vstr	s0, [r5]
 800862e:	e7d1      	b.n	80085d4 <_scanf_float+0x3b0>
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f8 fb00 	bl	8000c38 <__aeabi_d2f>
 8008638:	6028      	str	r0, [r5, #0]
 800863a:	e7cb      	b.n	80085d4 <_scanf_float+0x3b0>
 800863c:	f04f 0900 	mov.w	r9, #0
 8008640:	e629      	b.n	8008296 <_scanf_float+0x72>
 8008642:	bf00      	nop
 8008644:	0800b774 	.word	0x0800b774
 8008648:	0800bb15 	.word	0x0800bb15

0800864c <std>:
 800864c:	2300      	movs	r3, #0
 800864e:	b510      	push	{r4, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	e9c0 3300 	strd	r3, r3, [r0]
 8008656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800865a:	6083      	str	r3, [r0, #8]
 800865c:	8181      	strh	r1, [r0, #12]
 800865e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008660:	81c2      	strh	r2, [r0, #14]
 8008662:	6183      	str	r3, [r0, #24]
 8008664:	4619      	mov	r1, r3
 8008666:	2208      	movs	r2, #8
 8008668:	305c      	adds	r0, #92	@ 0x5c
 800866a:	f000 fac3 	bl	8008bf4 <memset>
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <std+0x58>)
 8008670:	6263      	str	r3, [r4, #36]	@ 0x24
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <std+0x5c>)
 8008674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008676:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <std+0x60>)
 8008678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <std+0x64>)
 800867c:	6323      	str	r3, [r4, #48]	@ 0x30
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <std+0x68>)
 8008680:	6224      	str	r4, [r4, #32]
 8008682:	429c      	cmp	r4, r3
 8008684:	d006      	beq.n	8008694 <std+0x48>
 8008686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800868a:	4294      	cmp	r4, r2
 800868c:	d002      	beq.n	8008694 <std+0x48>
 800868e:	33d0      	adds	r3, #208	@ 0xd0
 8008690:	429c      	cmp	r4, r3
 8008692:	d105      	bne.n	80086a0 <std+0x54>
 8008694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800869c:	f000 bb38 	b.w	8008d10 <__retarget_lock_init_recursive>
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	bf00      	nop
 80086a4:	08008a45 	.word	0x08008a45
 80086a8:	08008a67 	.word	0x08008a67
 80086ac:	08008a9f 	.word	0x08008a9f
 80086b0:	08008ac3 	.word	0x08008ac3
 80086b4:	20000504 	.word	0x20000504

080086b8 <stdio_exit_handler>:
 80086b8:	4a02      	ldr	r2, [pc, #8]	@ (80086c4 <stdio_exit_handler+0xc>)
 80086ba:	4903      	ldr	r1, [pc, #12]	@ (80086c8 <stdio_exit_handler+0x10>)
 80086bc:	4803      	ldr	r0, [pc, #12]	@ (80086cc <stdio_exit_handler+0x14>)
 80086be:	f000 b869 	b.w	8008794 <_fwalk_sglue>
 80086c2:	bf00      	nop
 80086c4:	20000018 	.word	0x20000018
 80086c8:	0800b339 	.word	0x0800b339
 80086cc:	20000194 	.word	0x20000194

080086d0 <cleanup_stdio>:
 80086d0:	6841      	ldr	r1, [r0, #4]
 80086d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008704 <cleanup_stdio+0x34>)
 80086d4:	4299      	cmp	r1, r3
 80086d6:	b510      	push	{r4, lr}
 80086d8:	4604      	mov	r4, r0
 80086da:	d001      	beq.n	80086e0 <cleanup_stdio+0x10>
 80086dc:	f002 fe2c 	bl	800b338 <_fflush_r>
 80086e0:	68a1      	ldr	r1, [r4, #8]
 80086e2:	4b09      	ldr	r3, [pc, #36]	@ (8008708 <cleanup_stdio+0x38>)
 80086e4:	4299      	cmp	r1, r3
 80086e6:	d002      	beq.n	80086ee <cleanup_stdio+0x1e>
 80086e8:	4620      	mov	r0, r4
 80086ea:	f002 fe25 	bl	800b338 <_fflush_r>
 80086ee:	68e1      	ldr	r1, [r4, #12]
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <cleanup_stdio+0x3c>)
 80086f2:	4299      	cmp	r1, r3
 80086f4:	d004      	beq.n	8008700 <cleanup_stdio+0x30>
 80086f6:	4620      	mov	r0, r4
 80086f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086fc:	f002 be1c 	b.w	800b338 <_fflush_r>
 8008700:	bd10      	pop	{r4, pc}
 8008702:	bf00      	nop
 8008704:	20000504 	.word	0x20000504
 8008708:	2000056c 	.word	0x2000056c
 800870c:	200005d4 	.word	0x200005d4

08008710 <global_stdio_init.part.0>:
 8008710:	b510      	push	{r4, lr}
 8008712:	4b0b      	ldr	r3, [pc, #44]	@ (8008740 <global_stdio_init.part.0+0x30>)
 8008714:	4c0b      	ldr	r4, [pc, #44]	@ (8008744 <global_stdio_init.part.0+0x34>)
 8008716:	4a0c      	ldr	r2, [pc, #48]	@ (8008748 <global_stdio_init.part.0+0x38>)
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	4620      	mov	r0, r4
 800871c:	2200      	movs	r2, #0
 800871e:	2104      	movs	r1, #4
 8008720:	f7ff ff94 	bl	800864c <std>
 8008724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008728:	2201      	movs	r2, #1
 800872a:	2109      	movs	r1, #9
 800872c:	f7ff ff8e 	bl	800864c <std>
 8008730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008734:	2202      	movs	r2, #2
 8008736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873a:	2112      	movs	r1, #18
 800873c:	f7ff bf86 	b.w	800864c <std>
 8008740:	2000063c 	.word	0x2000063c
 8008744:	20000504 	.word	0x20000504
 8008748:	080086b9 	.word	0x080086b9

0800874c <__sfp_lock_acquire>:
 800874c:	4801      	ldr	r0, [pc, #4]	@ (8008754 <__sfp_lock_acquire+0x8>)
 800874e:	f000 bae0 	b.w	8008d12 <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000645 	.word	0x20000645

08008758 <__sfp_lock_release>:
 8008758:	4801      	ldr	r0, [pc, #4]	@ (8008760 <__sfp_lock_release+0x8>)
 800875a:	f000 badb 	b.w	8008d14 <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000645 	.word	0x20000645

08008764 <__sinit>:
 8008764:	b510      	push	{r4, lr}
 8008766:	4604      	mov	r4, r0
 8008768:	f7ff fff0 	bl	800874c <__sfp_lock_acquire>
 800876c:	6a23      	ldr	r3, [r4, #32]
 800876e:	b11b      	cbz	r3, 8008778 <__sinit+0x14>
 8008770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008774:	f7ff bff0 	b.w	8008758 <__sfp_lock_release>
 8008778:	4b04      	ldr	r3, [pc, #16]	@ (800878c <__sinit+0x28>)
 800877a:	6223      	str	r3, [r4, #32]
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <__sinit+0x2c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1f5      	bne.n	8008770 <__sinit+0xc>
 8008784:	f7ff ffc4 	bl	8008710 <global_stdio_init.part.0>
 8008788:	e7f2      	b.n	8008770 <__sinit+0xc>
 800878a:	bf00      	nop
 800878c:	080086d1 	.word	0x080086d1
 8008790:	2000063c 	.word	0x2000063c

08008794 <_fwalk_sglue>:
 8008794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008798:	4607      	mov	r7, r0
 800879a:	4688      	mov	r8, r1
 800879c:	4614      	mov	r4, r2
 800879e:	2600      	movs	r6, #0
 80087a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087a4:	f1b9 0901 	subs.w	r9, r9, #1
 80087a8:	d505      	bpl.n	80087b6 <_fwalk_sglue+0x22>
 80087aa:	6824      	ldr	r4, [r4, #0]
 80087ac:	2c00      	cmp	r4, #0
 80087ae:	d1f7      	bne.n	80087a0 <_fwalk_sglue+0xc>
 80087b0:	4630      	mov	r0, r6
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d907      	bls.n	80087cc <_fwalk_sglue+0x38>
 80087bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c0:	3301      	adds	r3, #1
 80087c2:	d003      	beq.n	80087cc <_fwalk_sglue+0x38>
 80087c4:	4629      	mov	r1, r5
 80087c6:	4638      	mov	r0, r7
 80087c8:	47c0      	blx	r8
 80087ca:	4306      	orrs	r6, r0
 80087cc:	3568      	adds	r5, #104	@ 0x68
 80087ce:	e7e9      	b.n	80087a4 <_fwalk_sglue+0x10>

080087d0 <_puts_r>:
 80087d0:	6a03      	ldr	r3, [r0, #32]
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	6884      	ldr	r4, [r0, #8]
 80087d6:	4605      	mov	r5, r0
 80087d8:	460e      	mov	r6, r1
 80087da:	b90b      	cbnz	r3, 80087e0 <_puts_r+0x10>
 80087dc:	f7ff ffc2 	bl	8008764 <__sinit>
 80087e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d405      	bmi.n	80087f2 <_puts_r+0x22>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_puts_r+0x22>
 80087ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ee:	f000 fa90 	bl	8008d12 <__retarget_lock_acquire_recursive>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	0719      	lsls	r1, r3, #28
 80087f6:	d502      	bpl.n	80087fe <_puts_r+0x2e>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d135      	bne.n	800886a <_puts_r+0x9a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f9a1 	bl	8008b48 <__swsetup_r>
 8008806:	b380      	cbz	r0, 800886a <_puts_r+0x9a>
 8008808:	f04f 35ff 	mov.w	r5, #4294967295
 800880c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880e:	07da      	lsls	r2, r3, #31
 8008810:	d405      	bmi.n	800881e <_puts_r+0x4e>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	059b      	lsls	r3, r3, #22
 8008816:	d402      	bmi.n	800881e <_puts_r+0x4e>
 8008818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881a:	f000 fa7b 	bl	8008d14 <__retarget_lock_release_recursive>
 800881e:	4628      	mov	r0, r5
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	2b00      	cmp	r3, #0
 8008824:	da04      	bge.n	8008830 <_puts_r+0x60>
 8008826:	69a2      	ldr	r2, [r4, #24]
 8008828:	429a      	cmp	r2, r3
 800882a:	dc17      	bgt.n	800885c <_puts_r+0x8c>
 800882c:	290a      	cmp	r1, #10
 800882e:	d015      	beq.n	800885c <_puts_r+0x8c>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	6022      	str	r2, [r4, #0]
 8008836:	7019      	strb	r1, [r3, #0]
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800883e:	3b01      	subs	r3, #1
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	2900      	cmp	r1, #0
 8008844:	d1ed      	bne.n	8008822 <_puts_r+0x52>
 8008846:	2b00      	cmp	r3, #0
 8008848:	da11      	bge.n	800886e <_puts_r+0x9e>
 800884a:	4622      	mov	r2, r4
 800884c:	210a      	movs	r1, #10
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f93b 	bl	8008aca <__swbuf_r>
 8008854:	3001      	adds	r0, #1
 8008856:	d0d7      	beq.n	8008808 <_puts_r+0x38>
 8008858:	250a      	movs	r5, #10
 800885a:	e7d7      	b.n	800880c <_puts_r+0x3c>
 800885c:	4622      	mov	r2, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f933 	bl	8008aca <__swbuf_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d1e7      	bne.n	8008838 <_puts_r+0x68>
 8008868:	e7ce      	b.n	8008808 <_puts_r+0x38>
 800886a:	3e01      	subs	r6, #1
 800886c:	e7e4      	b.n	8008838 <_puts_r+0x68>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	220a      	movs	r2, #10
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e7ee      	b.n	8008858 <_puts_r+0x88>
	...

0800887c <puts>:
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <puts+0xc>)
 800887e:	4601      	mov	r1, r0
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f7ff bfa5 	b.w	80087d0 <_puts_r>
 8008886:	bf00      	nop
 8008888:	20000190 	.word	0x20000190

0800888c <setbuf>:
 800888c:	fab1 f281 	clz	r2, r1
 8008890:	0952      	lsrs	r2, r2, #5
 8008892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008896:	0052      	lsls	r2, r2, #1
 8008898:	f000 b800 	b.w	800889c <setvbuf>

0800889c <setvbuf>:
 800889c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088a0:	461d      	mov	r5, r3
 80088a2:	4b57      	ldr	r3, [pc, #348]	@ (8008a00 <setvbuf+0x164>)
 80088a4:	681f      	ldr	r7, [r3, #0]
 80088a6:	4604      	mov	r4, r0
 80088a8:	460e      	mov	r6, r1
 80088aa:	4690      	mov	r8, r2
 80088ac:	b127      	cbz	r7, 80088b8 <setvbuf+0x1c>
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	b913      	cbnz	r3, 80088b8 <setvbuf+0x1c>
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff ff56 	bl	8008764 <__sinit>
 80088b8:	f1b8 0f02 	cmp.w	r8, #2
 80088bc:	d006      	beq.n	80088cc <setvbuf+0x30>
 80088be:	f1b8 0f01 	cmp.w	r8, #1
 80088c2:	f200 809a 	bhi.w	80089fa <setvbuf+0x15e>
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	f2c0 8097 	blt.w	80089fa <setvbuf+0x15e>
 80088cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088ce:	07d9      	lsls	r1, r3, #31
 80088d0:	d405      	bmi.n	80088de <setvbuf+0x42>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	059a      	lsls	r2, r3, #22
 80088d6:	d402      	bmi.n	80088de <setvbuf+0x42>
 80088d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088da:	f000 fa1a 	bl	8008d12 <__retarget_lock_acquire_recursive>
 80088de:	4621      	mov	r1, r4
 80088e0:	4638      	mov	r0, r7
 80088e2:	f002 fd29 	bl	800b338 <_fflush_r>
 80088e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e8:	b141      	cbz	r1, 80088fc <setvbuf+0x60>
 80088ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d002      	beq.n	80088f8 <setvbuf+0x5c>
 80088f2:	4638      	mov	r0, r7
 80088f4:	f001 f87c 	bl	80099f0 <_free_r>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088fc:	2300      	movs	r3, #0
 80088fe:	61a3      	str	r3, [r4, #24]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	d503      	bpl.n	8008910 <setvbuf+0x74>
 8008908:	6921      	ldr	r1, [r4, #16]
 800890a:	4638      	mov	r0, r7
 800890c:	f001 f870 	bl	80099f0 <_free_r>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	f1b8 0f02 	cmp.w	r8, #2
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	d061      	beq.n	80089e6 <setvbuf+0x14a>
 8008922:	ab01      	add	r3, sp, #4
 8008924:	466a      	mov	r2, sp
 8008926:	4621      	mov	r1, r4
 8008928:	4638      	mov	r0, r7
 800892a:	f002 fd2d 	bl	800b388 <__swhatbuf_r>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	4318      	orrs	r0, r3
 8008932:	81a0      	strh	r0, [r4, #12]
 8008934:	bb2d      	cbnz	r5, 8008982 <setvbuf+0xe6>
 8008936:	9d00      	ldr	r5, [sp, #0]
 8008938:	4628      	mov	r0, r5
 800893a:	f001 fbdd 	bl	800a0f8 <malloc>
 800893e:	4606      	mov	r6, r0
 8008940:	2800      	cmp	r0, #0
 8008942:	d152      	bne.n	80089ea <setvbuf+0x14e>
 8008944:	f8dd 9000 	ldr.w	r9, [sp]
 8008948:	45a9      	cmp	r9, r5
 800894a:	d140      	bne.n	80089ce <setvbuf+0x132>
 800894c:	f04f 35ff 	mov.w	r5, #4294967295
 8008950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008954:	f043 0202 	orr.w	r2, r3, #2
 8008958:	81a2      	strh	r2, [r4, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	60a2      	str	r2, [r4, #8]
 800895e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008962:	6022      	str	r2, [r4, #0]
 8008964:	6122      	str	r2, [r4, #16]
 8008966:	2201      	movs	r2, #1
 8008968:	6162      	str	r2, [r4, #20]
 800896a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800896c:	07d6      	lsls	r6, r2, #31
 800896e:	d404      	bmi.n	800897a <setvbuf+0xde>
 8008970:	0598      	lsls	r0, r3, #22
 8008972:	d402      	bmi.n	800897a <setvbuf+0xde>
 8008974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008976:	f000 f9cd 	bl	8008d14 <__retarget_lock_release_recursive>
 800897a:	4628      	mov	r0, r5
 800897c:	b003      	add	sp, #12
 800897e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008982:	2e00      	cmp	r6, #0
 8008984:	d0d8      	beq.n	8008938 <setvbuf+0x9c>
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	b913      	cbnz	r3, 8008990 <setvbuf+0xf4>
 800898a:	4638      	mov	r0, r7
 800898c:	f7ff feea 	bl	8008764 <__sinit>
 8008990:	f1b8 0f01 	cmp.w	r8, #1
 8008994:	bf08      	it	eq
 8008996:	89a3      	ldrheq	r3, [r4, #12]
 8008998:	6026      	str	r6, [r4, #0]
 800899a:	bf04      	itt	eq
 800899c:	f043 0301 	orreq.w	r3, r3, #1
 80089a0:	81a3      	strheq	r3, [r4, #12]
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	f013 0208 	ands.w	r2, r3, #8
 80089aa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80089ae:	d01e      	beq.n	80089ee <setvbuf+0x152>
 80089b0:	07d9      	lsls	r1, r3, #31
 80089b2:	bf41      	itttt	mi
 80089b4:	2200      	movmi	r2, #0
 80089b6:	426d      	negmi	r5, r5
 80089b8:	60a2      	strmi	r2, [r4, #8]
 80089ba:	61a5      	strmi	r5, [r4, #24]
 80089bc:	bf58      	it	pl
 80089be:	60a5      	strpl	r5, [r4, #8]
 80089c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089c2:	07d2      	lsls	r2, r2, #31
 80089c4:	d401      	bmi.n	80089ca <setvbuf+0x12e>
 80089c6:	059b      	lsls	r3, r3, #22
 80089c8:	d513      	bpl.n	80089f2 <setvbuf+0x156>
 80089ca:	2500      	movs	r5, #0
 80089cc:	e7d5      	b.n	800897a <setvbuf+0xde>
 80089ce:	4648      	mov	r0, r9
 80089d0:	f001 fb92 	bl	800a0f8 <malloc>
 80089d4:	4606      	mov	r6, r0
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d0b8      	beq.n	800894c <setvbuf+0xb0>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	464d      	mov	r5, r9
 80089e4:	e7cf      	b.n	8008986 <setvbuf+0xea>
 80089e6:	2500      	movs	r5, #0
 80089e8:	e7b2      	b.n	8008950 <setvbuf+0xb4>
 80089ea:	46a9      	mov	r9, r5
 80089ec:	e7f5      	b.n	80089da <setvbuf+0x13e>
 80089ee:	60a2      	str	r2, [r4, #8]
 80089f0:	e7e6      	b.n	80089c0 <setvbuf+0x124>
 80089f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089f4:	f000 f98e 	bl	8008d14 <__retarget_lock_release_recursive>
 80089f8:	e7e7      	b.n	80089ca <setvbuf+0x12e>
 80089fa:	f04f 35ff 	mov.w	r5, #4294967295
 80089fe:	e7bc      	b.n	800897a <setvbuf+0xde>
 8008a00:	20000190 	.word	0x20000190

08008a04 <siprintf>:
 8008a04:	b40e      	push	{r1, r2, r3}
 8008a06:	b500      	push	{lr}
 8008a08:	b09c      	sub	sp, #112	@ 0x70
 8008a0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a0c:	9002      	str	r0, [sp, #8]
 8008a0e:	9006      	str	r0, [sp, #24]
 8008a10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a14:	4809      	ldr	r0, [pc, #36]	@ (8008a3c <siprintf+0x38>)
 8008a16:	9107      	str	r1, [sp, #28]
 8008a18:	9104      	str	r1, [sp, #16]
 8008a1a:	4909      	ldr	r1, [pc, #36]	@ (8008a40 <siprintf+0x3c>)
 8008a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a20:	9105      	str	r1, [sp, #20]
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	a902      	add	r1, sp, #8
 8008a28:	f002 f9c4 	bl	800adb4 <_svfiprintf_r>
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	b01c      	add	sp, #112	@ 0x70
 8008a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a38:	b003      	add	sp, #12
 8008a3a:	4770      	bx	lr
 8008a3c:	20000190 	.word	0x20000190
 8008a40:	ffff0208 	.word	0xffff0208

08008a44 <__sread>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	f000 f912 	bl	8008c74 <_read_r>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	bfab      	itete	ge
 8008a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a56:	89a3      	ldrhlt	r3, [r4, #12]
 8008a58:	181b      	addge	r3, r3, r0
 8008a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a5e:	bfac      	ite	ge
 8008a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a62:	81a3      	strhlt	r3, [r4, #12]
 8008a64:	bd10      	pop	{r4, pc}

08008a66 <__swrite>:
 8008a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	898b      	ldrh	r3, [r1, #12]
 8008a6e:	05db      	lsls	r3, r3, #23
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	4616      	mov	r6, r2
 8008a76:	d505      	bpl.n	8008a84 <__swrite+0x1e>
 8008a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f000 f8e6 	bl	8008c50 <_lseek_r>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	4628      	mov	r0, r5
 8008a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	f000 b8fd 	b.w	8008c98 <_write_r>

08008a9e <__sseek>:
 8008a9e:	b510      	push	{r4, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa6:	f000 f8d3 	bl	8008c50 <_lseek_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	bf15      	itete	ne
 8008ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008aba:	81a3      	strheq	r3, [r4, #12]
 8008abc:	bf18      	it	ne
 8008abe:	81a3      	strhne	r3, [r4, #12]
 8008ac0:	bd10      	pop	{r4, pc}

08008ac2 <__sclose>:
 8008ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac6:	f000 b8b3 	b.w	8008c30 <_close_r>

08008aca <__swbuf_r>:
 8008aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008acc:	460e      	mov	r6, r1
 8008ace:	4614      	mov	r4, r2
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	b118      	cbz	r0, 8008adc <__swbuf_r+0x12>
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b90b      	cbnz	r3, 8008adc <__swbuf_r+0x12>
 8008ad8:	f7ff fe44 	bl	8008764 <__sinit>
 8008adc:	69a3      	ldr	r3, [r4, #24]
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	071a      	lsls	r2, r3, #28
 8008ae4:	d501      	bpl.n	8008aea <__swbuf_r+0x20>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	b943      	cbnz	r3, 8008afc <__swbuf_r+0x32>
 8008aea:	4621      	mov	r1, r4
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 f82b 	bl	8008b48 <__swsetup_r>
 8008af2:	b118      	cbz	r0, 8008afc <__swbuf_r+0x32>
 8008af4:	f04f 37ff 	mov.w	r7, #4294967295
 8008af8:	4638      	mov	r0, r7
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	6922      	ldr	r2, [r4, #16]
 8008b00:	1a98      	subs	r0, r3, r2
 8008b02:	6963      	ldr	r3, [r4, #20]
 8008b04:	b2f6      	uxtb	r6, r6
 8008b06:	4283      	cmp	r3, r0
 8008b08:	4637      	mov	r7, r6
 8008b0a:	dc05      	bgt.n	8008b18 <__swbuf_r+0x4e>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f002 fc12 	bl	800b338 <_fflush_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1ed      	bne.n	8008af4 <__swbuf_r+0x2a>
 8008b18:	68a3      	ldr	r3, [r4, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	701e      	strb	r6, [r3, #0]
 8008b26:	6962      	ldr	r2, [r4, #20]
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d004      	beq.n	8008b38 <__swbuf_r+0x6e>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d5e1      	bpl.n	8008af8 <__swbuf_r+0x2e>
 8008b34:	2e0a      	cmp	r6, #10
 8008b36:	d1df      	bne.n	8008af8 <__swbuf_r+0x2e>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f002 fbfc 	bl	800b338 <_fflush_r>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0d9      	beq.n	8008af8 <__swbuf_r+0x2e>
 8008b44:	e7d6      	b.n	8008af4 <__swbuf_r+0x2a>
	...

08008b48 <__swsetup_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4b29      	ldr	r3, [pc, #164]	@ (8008bf0 <__swsetup_r+0xa8>)
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	460c      	mov	r4, r1
 8008b52:	b118      	cbz	r0, 8008b5c <__swsetup_r+0x14>
 8008b54:	6a03      	ldr	r3, [r0, #32]
 8008b56:	b90b      	cbnz	r3, 8008b5c <__swsetup_r+0x14>
 8008b58:	f7ff fe04 	bl	8008764 <__sinit>
 8008b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b60:	0719      	lsls	r1, r3, #28
 8008b62:	d422      	bmi.n	8008baa <__swsetup_r+0x62>
 8008b64:	06da      	lsls	r2, r3, #27
 8008b66:	d407      	bmi.n	8008b78 <__swsetup_r+0x30>
 8008b68:	2209      	movs	r2, #9
 8008b6a:	602a      	str	r2, [r5, #0]
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	f04f 30ff 	mov.w	r0, #4294967295
 8008b76:	e033      	b.n	8008be0 <__swsetup_r+0x98>
 8008b78:	0758      	lsls	r0, r3, #29
 8008b7a:	d512      	bpl.n	8008ba2 <__swsetup_r+0x5a>
 8008b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b7e:	b141      	cbz	r1, 8008b92 <__swsetup_r+0x4a>
 8008b80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b84:	4299      	cmp	r1, r3
 8008b86:	d002      	beq.n	8008b8e <__swsetup_r+0x46>
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 ff31 	bl	80099f0 <_free_r>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6923      	ldr	r3, [r4, #16]
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f043 0308 	orr.w	r3, r3, #8
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	b94b      	cbnz	r3, 8008bc2 <__swsetup_r+0x7a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb8:	d003      	beq.n	8008bc2 <__swsetup_r+0x7a>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f002 fc09 	bl	800b3d4 <__smakebuf_r>
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	f013 0201 	ands.w	r2, r3, #1
 8008bca:	d00a      	beq.n	8008be2 <__swsetup_r+0x9a>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	60a2      	str	r2, [r4, #8]
 8008bd0:	6962      	ldr	r2, [r4, #20]
 8008bd2:	4252      	negs	r2, r2
 8008bd4:	61a2      	str	r2, [r4, #24]
 8008bd6:	6922      	ldr	r2, [r4, #16]
 8008bd8:	b942      	cbnz	r2, 8008bec <__swsetup_r+0xa4>
 8008bda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bde:	d1c5      	bne.n	8008b6c <__swsetup_r+0x24>
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	0799      	lsls	r1, r3, #30
 8008be4:	bf58      	it	pl
 8008be6:	6962      	ldrpl	r2, [r4, #20]
 8008be8:	60a2      	str	r2, [r4, #8]
 8008bea:	e7f4      	b.n	8008bd6 <__swsetup_r+0x8e>
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7f7      	b.n	8008be0 <__swsetup_r+0x98>
 8008bf0:	20000190 	.word	0x20000190

08008bf4 <memset>:
 8008bf4:	4402      	add	r2, r0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <memset+0xa>
 8008bfc:	4770      	bx	lr
 8008bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008c02:	e7f9      	b.n	8008bf8 <memset+0x4>

08008c04 <strncmp>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	b16a      	cbz	r2, 8008c24 <strncmp+0x20>
 8008c08:	3901      	subs	r1, #1
 8008c0a:	1884      	adds	r4, r0, r2
 8008c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d103      	bne.n	8008c20 <strncmp+0x1c>
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d001      	beq.n	8008c20 <strncmp+0x1c>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	d1f5      	bne.n	8008c0c <strncmp+0x8>
 8008c20:	1ad0      	subs	r0, r2, r3
 8008c22:	bd10      	pop	{r4, pc}
 8008c24:	4610      	mov	r0, r2
 8008c26:	e7fc      	b.n	8008c22 <strncmp+0x1e>

08008c28 <_localeconv_r>:
 8008c28:	4800      	ldr	r0, [pc, #0]	@ (8008c2c <_localeconv_r+0x4>)
 8008c2a:	4770      	bx	lr
 8008c2c:	20000114 	.word	0x20000114

08008c30 <_close_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d06      	ldr	r5, [pc, #24]	@ (8008c4c <_close_r+0x1c>)
 8008c34:	2300      	movs	r3, #0
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	f7f9 f8dc 	bl	8001df8 <_close>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_close_r+0x1a>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_close_r+0x1a>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20000640 	.word	0x20000640

08008c50 <_lseek_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d07      	ldr	r5, [pc, #28]	@ (8008c70 <_lseek_r+0x20>)
 8008c54:	4604      	mov	r4, r0
 8008c56:	4608      	mov	r0, r1
 8008c58:	4611      	mov	r1, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f7f9 f8f1 	bl	8001e46 <_lseek>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_lseek_r+0x1e>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_lseek_r+0x1e>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20000640 	.word	0x20000640

08008c74 <_read_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	@ (8008c94 <_read_r+0x20>)
 8008c78:	4604      	mov	r4, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f7f9 f89b 	bl	8001dbe <_read>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_read_r+0x1e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_read_r+0x1e>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20000640 	.word	0x20000640

08008c98 <_write_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	@ (8008cb8 <_write_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f8 fccc 	bl	8001644 <_write>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_write_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_write_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20000640 	.word	0x20000640

08008cbc <__errno>:
 8008cbc:	4b01      	ldr	r3, [pc, #4]	@ (8008cc4 <__errno+0x8>)
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000190 	.word	0x20000190

08008cc8 <__libc_init_array>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	4d0d      	ldr	r5, [pc, #52]	@ (8008d00 <__libc_init_array+0x38>)
 8008ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8008d04 <__libc_init_array+0x3c>)
 8008cce:	1b64      	subs	r4, r4, r5
 8008cd0:	10a4      	asrs	r4, r4, #2
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	42a6      	cmp	r6, r4
 8008cd6:	d109      	bne.n	8008cec <__libc_init_array+0x24>
 8008cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8008d08 <__libc_init_array+0x40>)
 8008cda:	4c0c      	ldr	r4, [pc, #48]	@ (8008d0c <__libc_init_array+0x44>)
 8008cdc:	f002 fcc8 	bl	800b670 <_init>
 8008ce0:	1b64      	subs	r4, r4, r5
 8008ce2:	10a4      	asrs	r4, r4, #2
 8008ce4:	2600      	movs	r6, #0
 8008ce6:	42a6      	cmp	r6, r4
 8008ce8:	d105      	bne.n	8008cf6 <__libc_init_array+0x2e>
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf0:	4798      	blx	r3
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__libc_init_array+0xc>
 8008cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfa:	4798      	blx	r3
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	e7f2      	b.n	8008ce6 <__libc_init_array+0x1e>
 8008d00:	0800bb20 	.word	0x0800bb20
 8008d04:	0800bb20 	.word	0x0800bb20
 8008d08:	0800bb20 	.word	0x0800bb20
 8008d0c:	0800bb24 	.word	0x0800bb24

08008d10 <__retarget_lock_init_recursive>:
 8008d10:	4770      	bx	lr

08008d12 <__retarget_lock_acquire_recursive>:
 8008d12:	4770      	bx	lr

08008d14 <__retarget_lock_release_recursive>:
 8008d14:	4770      	bx	lr

08008d16 <memcpy>:
 8008d16:	440a      	add	r2, r1
 8008d18:	4291      	cmp	r1, r2
 8008d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d1e:	d100      	bne.n	8008d22 <memcpy+0xc>
 8008d20:	4770      	bx	lr
 8008d22:	b510      	push	{r4, lr}
 8008d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d2c:	4291      	cmp	r1, r2
 8008d2e:	d1f9      	bne.n	8008d24 <memcpy+0xe>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	0000      	movs	r0, r0
 8008d34:	0000      	movs	r0, r0
	...

08008d38 <nan>:
 8008d38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d40 <nan+0x8>
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	00000000 	.word	0x00000000
 8008d44:	7ff80000 	.word	0x7ff80000

08008d48 <nanf>:
 8008d48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d50 <nanf+0x8>
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	7fc00000 	.word	0x7fc00000

08008d54 <quorem>:
 8008d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	6903      	ldr	r3, [r0, #16]
 8008d5a:	690c      	ldr	r4, [r1, #16]
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	4607      	mov	r7, r0
 8008d60:	db7e      	blt.n	8008e60 <quorem+0x10c>
 8008d62:	3c01      	subs	r4, #1
 8008d64:	f101 0814 	add.w	r8, r1, #20
 8008d68:	00a3      	lsls	r3, r4, #2
 8008d6a:	f100 0514 	add.w	r5, r0, #20
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	429a      	cmp	r2, r3
 8008d82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d86:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d8a:	d32e      	bcc.n	8008dea <quorem+0x96>
 8008d8c:	f04f 0a00 	mov.w	sl, #0
 8008d90:	46c4      	mov	ip, r8
 8008d92:	46ae      	mov	lr, r5
 8008d94:	46d3      	mov	fp, sl
 8008d96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d9a:	b298      	uxth	r0, r3
 8008d9c:	fb06 a000 	mla	r0, r6, r0, sl
 8008da0:	0c02      	lsrs	r2, r0, #16
 8008da2:	0c1b      	lsrs	r3, r3, #16
 8008da4:	fb06 2303 	mla	r3, r6, r3, r2
 8008da8:	f8de 2000 	ldr.w	r2, [lr]
 8008dac:	b280      	uxth	r0, r0
 8008dae:	b292      	uxth	r2, r2
 8008db0:	1a12      	subs	r2, r2, r0
 8008db2:	445a      	add	r2, fp
 8008db4:	f8de 0000 	ldr.w	r0, [lr]
 8008db8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008dc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008dcc:	45e1      	cmp	r9, ip
 8008dce:	f84e 2b04 	str.w	r2, [lr], #4
 8008dd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008dd6:	d2de      	bcs.n	8008d96 <quorem+0x42>
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	58eb      	ldr	r3, [r5, r3]
 8008ddc:	b92b      	cbnz	r3, 8008dea <quorem+0x96>
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	3b04      	subs	r3, #4
 8008de2:	429d      	cmp	r5, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	d32f      	bcc.n	8008e48 <quorem+0xf4>
 8008de8:	613c      	str	r4, [r7, #16]
 8008dea:	4638      	mov	r0, r7
 8008dec:	f001 fd10 	bl	800a810 <__mcmp>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	db25      	blt.n	8008e40 <quorem+0xec>
 8008df4:	4629      	mov	r1, r5
 8008df6:	2000      	movs	r0, #0
 8008df8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dfc:	f8d1 c000 	ldr.w	ip, [r1]
 8008e00:	fa1f fe82 	uxth.w	lr, r2
 8008e04:	fa1f f38c 	uxth.w	r3, ip
 8008e08:	eba3 030e 	sub.w	r3, r3, lr
 8008e0c:	4403      	add	r3, r0
 8008e0e:	0c12      	lsrs	r2, r2, #16
 8008e10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e1e:	45c1      	cmp	r9, r8
 8008e20:	f841 3b04 	str.w	r3, [r1], #4
 8008e24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e28:	d2e6      	bcs.n	8008df8 <quorem+0xa4>
 8008e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e32:	b922      	cbnz	r2, 8008e3e <quorem+0xea>
 8008e34:	3b04      	subs	r3, #4
 8008e36:	429d      	cmp	r5, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	d30b      	bcc.n	8008e54 <quorem+0x100>
 8008e3c:	613c      	str	r4, [r7, #16]
 8008e3e:	3601      	adds	r6, #1
 8008e40:	4630      	mov	r0, r6
 8008e42:	b003      	add	sp, #12
 8008e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d1cb      	bne.n	8008de8 <quorem+0x94>
 8008e50:	3c01      	subs	r4, #1
 8008e52:	e7c6      	b.n	8008de2 <quorem+0x8e>
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	3b04      	subs	r3, #4
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d1ef      	bne.n	8008e3c <quorem+0xe8>
 8008e5c:	3c01      	subs	r4, #1
 8008e5e:	e7ea      	b.n	8008e36 <quorem+0xe2>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e7ee      	b.n	8008e42 <quorem+0xee>
 8008e64:	0000      	movs	r0, r0
	...

08008e68 <_dtoa_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	69c7      	ldr	r7, [r0, #28]
 8008e6e:	b099      	sub	sp, #100	@ 0x64
 8008e70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e74:	ec55 4b10 	vmov	r4, r5, d0
 8008e78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008e7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e7c:	4683      	mov	fp, r0
 8008e7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e82:	b97f      	cbnz	r7, 8008ea4 <_dtoa_r+0x3c>
 8008e84:	2010      	movs	r0, #16
 8008e86:	f001 f937 	bl	800a0f8 <malloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008e90:	b920      	cbnz	r0, 8008e9c <_dtoa_r+0x34>
 8008e92:	4ba7      	ldr	r3, [pc, #668]	@ (8009130 <_dtoa_r+0x2c8>)
 8008e94:	21ef      	movs	r1, #239	@ 0xef
 8008e96:	48a7      	ldr	r0, [pc, #668]	@ (8009134 <_dtoa_r+0x2cc>)
 8008e98:	f002 fb24 	bl	800b4e4 <__assert_func>
 8008e9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ea0:	6007      	str	r7, [r0, #0]
 8008ea2:	60c7      	str	r7, [r0, #12]
 8008ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ea8:	6819      	ldr	r1, [r3, #0]
 8008eaa:	b159      	cbz	r1, 8008ec4 <_dtoa_r+0x5c>
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	604a      	str	r2, [r1, #4]
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4093      	lsls	r3, r2
 8008eb4:	608b      	str	r3, [r1, #8]
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	f001 fa26 	bl	800a308 <_Bfree>
 8008ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	1e2b      	subs	r3, r5, #0
 8008ec6:	bfb9      	ittee	lt
 8008ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ecc:	9303      	strlt	r3, [sp, #12]
 8008ece:	2300      	movge	r3, #0
 8008ed0:	6033      	strge	r3, [r6, #0]
 8008ed2:	9f03      	ldr	r7, [sp, #12]
 8008ed4:	4b98      	ldr	r3, [pc, #608]	@ (8009138 <_dtoa_r+0x2d0>)
 8008ed6:	bfbc      	itt	lt
 8008ed8:	2201      	movlt	r2, #1
 8008eda:	6032      	strlt	r2, [r6, #0]
 8008edc:	43bb      	bics	r3, r7
 8008ede:	d112      	bne.n	8008f06 <_dtoa_r+0x9e>
 8008ee0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ee2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008eec:	4323      	orrs	r3, r4
 8008eee:	f000 854d 	beq.w	800998c <_dtoa_r+0xb24>
 8008ef2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ef4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800914c <_dtoa_r+0x2e4>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 854f 	beq.w	800999c <_dtoa_r+0xb34>
 8008efe:	f10a 0303 	add.w	r3, sl, #3
 8008f02:	f000 bd49 	b.w	8009998 <_dtoa_r+0xb30>
 8008f06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	ec51 0b17 	vmov	r0, r1, d7
 8008f10:	2300      	movs	r3, #0
 8008f12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008f16:	f7f7 fdff 	bl	8000b18 <__aeabi_dcmpeq>
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	b158      	cbz	r0, 8008f36 <_dtoa_r+0xce>
 8008f1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f20:	2301      	movs	r3, #1
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f26:	b113      	cbz	r3, 8008f2e <_dtoa_r+0xc6>
 8008f28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f2a:	4b84      	ldr	r3, [pc, #528]	@ (800913c <_dtoa_r+0x2d4>)
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009150 <_dtoa_r+0x2e8>
 8008f32:	f000 bd33 	b.w	800999c <_dtoa_r+0xb34>
 8008f36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f3a:	aa16      	add	r2, sp, #88	@ 0x58
 8008f3c:	a917      	add	r1, sp, #92	@ 0x5c
 8008f3e:	4658      	mov	r0, fp
 8008f40:	f001 fd86 	bl	800aa50 <__d2b>
 8008f44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008f48:	4681      	mov	r9, r0
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	d077      	beq.n	800903e <_dtoa_r+0x1d6>
 8008f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f68:	4619      	mov	r1, r3
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4b74      	ldr	r3, [pc, #464]	@ (8009140 <_dtoa_r+0x2d8>)
 8008f6e:	f7f7 f9b3 	bl	80002d8 <__aeabi_dsub>
 8008f72:	a369      	add	r3, pc, #420	@ (adr r3, 8009118 <_dtoa_r+0x2b0>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fb66 	bl	8000648 <__aeabi_dmul>
 8008f7c:	a368      	add	r3, pc, #416	@ (adr r3, 8009120 <_dtoa_r+0x2b8>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 f9ab 	bl	80002dc <__adddf3>
 8008f86:	4604      	mov	r4, r0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	f7f7 faf2 	bl	8000574 <__aeabi_i2d>
 8008f90:	a365      	add	r3, pc, #404	@ (adr r3, 8009128 <_dtoa_r+0x2c0>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 fb57 	bl	8000648 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 f99b 	bl	80002dc <__adddf3>
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	460d      	mov	r5, r1
 8008faa:	f7f7 fdfd 	bl	8000ba8 <__aeabi_d2iz>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7f7 fdb8 	bl	8000b2c <__aeabi_dcmplt>
 8008fbc:	b140      	cbz	r0, 8008fd0 <_dtoa_r+0x168>
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7f7 fad8 	bl	8000574 <__aeabi_i2d>
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	462b      	mov	r3, r5
 8008fc8:	f7f7 fda6 	bl	8000b18 <__aeabi_dcmpeq>
 8008fcc:	b900      	cbnz	r0, 8008fd0 <_dtoa_r+0x168>
 8008fce:	3f01      	subs	r7, #1
 8008fd0:	2f16      	cmp	r7, #22
 8008fd2:	d851      	bhi.n	8009078 <_dtoa_r+0x210>
 8008fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8009144 <_dtoa_r+0x2dc>)
 8008fd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fe2:	f7f7 fda3 	bl	8000b2c <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d048      	beq.n	800907c <_dtoa_r+0x214>
 8008fea:	3f01      	subs	r7, #1
 8008fec:	2300      	movs	r3, #0
 8008fee:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ff0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ff2:	1b9b      	subs	r3, r3, r6
 8008ff4:	1e5a      	subs	r2, r3, #1
 8008ff6:	bf44      	itt	mi
 8008ff8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ffc:	2300      	movmi	r3, #0
 8008ffe:	9208      	str	r2, [sp, #32]
 8009000:	bf54      	ite	pl
 8009002:	f04f 0800 	movpl.w	r8, #0
 8009006:	9308      	strmi	r3, [sp, #32]
 8009008:	2f00      	cmp	r7, #0
 800900a:	db39      	blt.n	8009080 <_dtoa_r+0x218>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009010:	443b      	add	r3, r7
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	2300      	movs	r3, #0
 8009016:	930a      	str	r3, [sp, #40]	@ 0x28
 8009018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901a:	2b09      	cmp	r3, #9
 800901c:	d864      	bhi.n	80090e8 <_dtoa_r+0x280>
 800901e:	2b05      	cmp	r3, #5
 8009020:	bfc4      	itt	gt
 8009022:	3b04      	subgt	r3, #4
 8009024:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009028:	f1a3 0302 	sub.w	r3, r3, #2
 800902c:	bfcc      	ite	gt
 800902e:	2400      	movgt	r4, #0
 8009030:	2401      	movle	r4, #1
 8009032:	2b03      	cmp	r3, #3
 8009034:	d863      	bhi.n	80090fe <_dtoa_r+0x296>
 8009036:	e8df f003 	tbb	[pc, r3]
 800903a:	372a      	.short	0x372a
 800903c:	5535      	.short	0x5535
 800903e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009042:	441e      	add	r6, r3
 8009044:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009048:	2b20      	cmp	r3, #32
 800904a:	bfc1      	itttt	gt
 800904c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009050:	409f      	lslgt	r7, r3
 8009052:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009056:	fa24 f303 	lsrgt.w	r3, r4, r3
 800905a:	bfd6      	itet	le
 800905c:	f1c3 0320 	rsble	r3, r3, #32
 8009060:	ea47 0003 	orrgt.w	r0, r7, r3
 8009064:	fa04 f003 	lslle.w	r0, r4, r3
 8009068:	f7f7 fa74 	bl	8000554 <__aeabi_ui2d>
 800906c:	2201      	movs	r2, #1
 800906e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009072:	3e01      	subs	r6, #1
 8009074:	9214      	str	r2, [sp, #80]	@ 0x50
 8009076:	e777      	b.n	8008f68 <_dtoa_r+0x100>
 8009078:	2301      	movs	r3, #1
 800907a:	e7b8      	b.n	8008fee <_dtoa_r+0x186>
 800907c:	9012      	str	r0, [sp, #72]	@ 0x48
 800907e:	e7b7      	b.n	8008ff0 <_dtoa_r+0x188>
 8009080:	427b      	negs	r3, r7
 8009082:	930a      	str	r3, [sp, #40]	@ 0x28
 8009084:	2300      	movs	r3, #0
 8009086:	eba8 0807 	sub.w	r8, r8, r7
 800908a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800908c:	e7c4      	b.n	8009018 <_dtoa_r+0x1b0>
 800908e:	2300      	movs	r3, #0
 8009090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009094:	2b00      	cmp	r3, #0
 8009096:	dc35      	bgt.n	8009104 <_dtoa_r+0x29c>
 8009098:	2301      	movs	r3, #1
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	9307      	str	r3, [sp, #28]
 800909e:	461a      	mov	r2, r3
 80090a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80090a2:	e00b      	b.n	80090bc <_dtoa_r+0x254>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e7f3      	b.n	8009090 <_dtoa_r+0x228>
 80090a8:	2300      	movs	r3, #0
 80090aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ae:	18fb      	adds	r3, r7, r3
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	3301      	adds	r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	bfb8      	it	lt
 80090ba:	2301      	movlt	r3, #1
 80090bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80090c0:	2100      	movs	r1, #0
 80090c2:	2204      	movs	r2, #4
 80090c4:	f102 0514 	add.w	r5, r2, #20
 80090c8:	429d      	cmp	r5, r3
 80090ca:	d91f      	bls.n	800910c <_dtoa_r+0x2a4>
 80090cc:	6041      	str	r1, [r0, #4]
 80090ce:	4658      	mov	r0, fp
 80090d0:	f001 f8da 	bl	800a288 <_Balloc>
 80090d4:	4682      	mov	sl, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d13c      	bne.n	8009154 <_dtoa_r+0x2ec>
 80090da:	4b1b      	ldr	r3, [pc, #108]	@ (8009148 <_dtoa_r+0x2e0>)
 80090dc:	4602      	mov	r2, r0
 80090de:	f240 11af 	movw	r1, #431	@ 0x1af
 80090e2:	e6d8      	b.n	8008e96 <_dtoa_r+0x2e>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e7e0      	b.n	80090aa <_dtoa_r+0x242>
 80090e8:	2401      	movs	r4, #1
 80090ea:	2300      	movs	r3, #0
 80090ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090f0:	f04f 33ff 	mov.w	r3, #4294967295
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	2200      	movs	r2, #0
 80090fa:	2312      	movs	r3, #18
 80090fc:	e7d0      	b.n	80090a0 <_dtoa_r+0x238>
 80090fe:	2301      	movs	r3, #1
 8009100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009102:	e7f5      	b.n	80090f0 <_dtoa_r+0x288>
 8009104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	e7d7      	b.n	80090bc <_dtoa_r+0x254>
 800910c:	3101      	adds	r1, #1
 800910e:	0052      	lsls	r2, r2, #1
 8009110:	e7d8      	b.n	80090c4 <_dtoa_r+0x25c>
 8009112:	bf00      	nop
 8009114:	f3af 8000 	nop.w
 8009118:	636f4361 	.word	0x636f4361
 800911c:	3fd287a7 	.word	0x3fd287a7
 8009120:	8b60c8b3 	.word	0x8b60c8b3
 8009124:	3fc68a28 	.word	0x3fc68a28
 8009128:	509f79fb 	.word	0x509f79fb
 800912c:	3fd34413 	.word	0x3fd34413
 8009130:	0800b78e 	.word	0x0800b78e
 8009134:	0800b7a5 	.word	0x0800b7a5
 8009138:	7ff00000 	.word	0x7ff00000
 800913c:	0800b751 	.word	0x0800b751
 8009140:	3ff80000 	.word	0x3ff80000
 8009144:	0800b900 	.word	0x0800b900
 8009148:	0800b7fd 	.word	0x0800b7fd
 800914c:	0800b78a 	.word	0x0800b78a
 8009150:	0800b750 	.word	0x0800b750
 8009154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009158:	6018      	str	r0, [r3, #0]
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	2b0e      	cmp	r3, #14
 800915e:	f200 80a4 	bhi.w	80092aa <_dtoa_r+0x442>
 8009162:	2c00      	cmp	r4, #0
 8009164:	f000 80a1 	beq.w	80092aa <_dtoa_r+0x442>
 8009168:	2f00      	cmp	r7, #0
 800916a:	dd33      	ble.n	80091d4 <_dtoa_r+0x36c>
 800916c:	4bad      	ldr	r3, [pc, #692]	@ (8009424 <_dtoa_r+0x5bc>)
 800916e:	f007 020f 	and.w	r2, r7, #15
 8009172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009176:	ed93 7b00 	vldr	d7, [r3]
 800917a:	05f8      	lsls	r0, r7, #23
 800917c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009184:	d516      	bpl.n	80091b4 <_dtoa_r+0x34c>
 8009186:	4ba8      	ldr	r3, [pc, #672]	@ (8009428 <_dtoa_r+0x5c0>)
 8009188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800918c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009190:	f7f7 fb84 	bl	800089c <__aeabi_ddiv>
 8009194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009198:	f004 040f 	and.w	r4, r4, #15
 800919c:	2603      	movs	r6, #3
 800919e:	4da2      	ldr	r5, [pc, #648]	@ (8009428 <_dtoa_r+0x5c0>)
 80091a0:	b954      	cbnz	r4, 80091b8 <_dtoa_r+0x350>
 80091a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091aa:	f7f7 fb77 	bl	800089c <__aeabi_ddiv>
 80091ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b2:	e028      	b.n	8009206 <_dtoa_r+0x39e>
 80091b4:	2602      	movs	r6, #2
 80091b6:	e7f2      	b.n	800919e <_dtoa_r+0x336>
 80091b8:	07e1      	lsls	r1, r4, #31
 80091ba:	d508      	bpl.n	80091ce <_dtoa_r+0x366>
 80091bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091c4:	f7f7 fa40 	bl	8000648 <__aeabi_dmul>
 80091c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091cc:	3601      	adds	r6, #1
 80091ce:	1064      	asrs	r4, r4, #1
 80091d0:	3508      	adds	r5, #8
 80091d2:	e7e5      	b.n	80091a0 <_dtoa_r+0x338>
 80091d4:	f000 80d2 	beq.w	800937c <_dtoa_r+0x514>
 80091d8:	427c      	negs	r4, r7
 80091da:	4b92      	ldr	r3, [pc, #584]	@ (8009424 <_dtoa_r+0x5bc>)
 80091dc:	4d92      	ldr	r5, [pc, #584]	@ (8009428 <_dtoa_r+0x5c0>)
 80091de:	f004 020f 	and.w	r2, r4, #15
 80091e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091ee:	f7f7 fa2b 	bl	8000648 <__aeabi_dmul>
 80091f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f6:	1124      	asrs	r4, r4, #4
 80091f8:	2300      	movs	r3, #0
 80091fa:	2602      	movs	r6, #2
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	f040 80b2 	bne.w	8009366 <_dtoa_r+0x4fe>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1d3      	bne.n	80091ae <_dtoa_r+0x346>
 8009206:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009208:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80b7 	beq.w	8009380 <_dtoa_r+0x518>
 8009212:	4b86      	ldr	r3, [pc, #536]	@ (800942c <_dtoa_r+0x5c4>)
 8009214:	2200      	movs	r2, #0
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f7 fc87 	bl	8000b2c <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	f000 80ae 	beq.w	8009380 <_dtoa_r+0x518>
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80aa 	beq.w	8009380 <_dtoa_r+0x518>
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dd37      	ble.n	80092a2 <_dtoa_r+0x43a>
 8009232:	1e7b      	subs	r3, r7, #1
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	4620      	mov	r0, r4
 8009238:	4b7d      	ldr	r3, [pc, #500]	@ (8009430 <_dtoa_r+0x5c8>)
 800923a:	2200      	movs	r2, #0
 800923c:	4629      	mov	r1, r5
 800923e:	f7f7 fa03 	bl	8000648 <__aeabi_dmul>
 8009242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009246:	9c00      	ldr	r4, [sp, #0]
 8009248:	3601      	adds	r6, #1
 800924a:	4630      	mov	r0, r6
 800924c:	f7f7 f992 	bl	8000574 <__aeabi_i2d>
 8009250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009254:	f7f7 f9f8 	bl	8000648 <__aeabi_dmul>
 8009258:	4b76      	ldr	r3, [pc, #472]	@ (8009434 <_dtoa_r+0x5cc>)
 800925a:	2200      	movs	r2, #0
 800925c:	f7f7 f83e 	bl	80002dc <__adddf3>
 8009260:	4605      	mov	r5, r0
 8009262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009266:	2c00      	cmp	r4, #0
 8009268:	f040 808d 	bne.w	8009386 <_dtoa_r+0x51e>
 800926c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009270:	4b71      	ldr	r3, [pc, #452]	@ (8009438 <_dtoa_r+0x5d0>)
 8009272:	2200      	movs	r2, #0
 8009274:	f7f7 f830 	bl	80002d8 <__aeabi_dsub>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009280:	462a      	mov	r2, r5
 8009282:	4633      	mov	r3, r6
 8009284:	f7f7 fc70 	bl	8000b68 <__aeabi_dcmpgt>
 8009288:	2800      	cmp	r0, #0
 800928a:	f040 828b 	bne.w	80097a4 <_dtoa_r+0x93c>
 800928e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009292:	462a      	mov	r2, r5
 8009294:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009298:	f7f7 fc48 	bl	8000b2c <__aeabi_dcmplt>
 800929c:	2800      	cmp	r0, #0
 800929e:	f040 8128 	bne.w	80094f2 <_dtoa_r+0x68a>
 80092a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80092a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80092aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f2c0 815a 	blt.w	8009566 <_dtoa_r+0x6fe>
 80092b2:	2f0e      	cmp	r7, #14
 80092b4:	f300 8157 	bgt.w	8009566 <_dtoa_r+0x6fe>
 80092b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009424 <_dtoa_r+0x5bc>)
 80092ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092be:	ed93 7b00 	vldr	d7, [r3]
 80092c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	ed8d 7b00 	vstr	d7, [sp]
 80092ca:	da03      	bge.n	80092d4 <_dtoa_r+0x46c>
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f340 8101 	ble.w	80094d6 <_dtoa_r+0x66e>
 80092d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092d8:	4656      	mov	r6, sl
 80092da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 fadb 	bl	800089c <__aeabi_ddiv>
 80092e6:	f7f7 fc5f 	bl	8000ba8 <__aeabi_d2iz>
 80092ea:	4680      	mov	r8, r0
 80092ec:	f7f7 f942 	bl	8000574 <__aeabi_i2d>
 80092f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f4:	f7f7 f9a8 	bl	8000648 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009304:	f7f6 ffe8 	bl	80002d8 <__aeabi_dsub>
 8009308:	f806 4b01 	strb.w	r4, [r6], #1
 800930c:	9d07      	ldr	r5, [sp, #28]
 800930e:	eba6 040a 	sub.w	r4, r6, sl
 8009312:	42a5      	cmp	r5, r4
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	f040 8117 	bne.w	800954a <_dtoa_r+0x6e2>
 800931c:	f7f6 ffde 	bl	80002dc <__adddf3>
 8009320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	f7f7 fc1e 	bl	8000b68 <__aeabi_dcmpgt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 80f9 	bne.w	8009524 <_dtoa_r+0x6bc>
 8009332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800933e:	b118      	cbz	r0, 8009348 <_dtoa_r+0x4e0>
 8009340:	f018 0f01 	tst.w	r8, #1
 8009344:	f040 80ee 	bne.w	8009524 <_dtoa_r+0x6bc>
 8009348:	4649      	mov	r1, r9
 800934a:	4658      	mov	r0, fp
 800934c:	f000 ffdc 	bl	800a308 <_Bfree>
 8009350:	2300      	movs	r3, #0
 8009352:	7033      	strb	r3, [r6, #0]
 8009354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009356:	3701      	adds	r7, #1
 8009358:	601f      	str	r7, [r3, #0]
 800935a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 831d 	beq.w	800999c <_dtoa_r+0xb34>
 8009362:	601e      	str	r6, [r3, #0]
 8009364:	e31a      	b.n	800999c <_dtoa_r+0xb34>
 8009366:	07e2      	lsls	r2, r4, #31
 8009368:	d505      	bpl.n	8009376 <_dtoa_r+0x50e>
 800936a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800936e:	f7f7 f96b 	bl	8000648 <__aeabi_dmul>
 8009372:	3601      	adds	r6, #1
 8009374:	2301      	movs	r3, #1
 8009376:	1064      	asrs	r4, r4, #1
 8009378:	3508      	adds	r5, #8
 800937a:	e73f      	b.n	80091fc <_dtoa_r+0x394>
 800937c:	2602      	movs	r6, #2
 800937e:	e742      	b.n	8009206 <_dtoa_r+0x39e>
 8009380:	9c07      	ldr	r4, [sp, #28]
 8009382:	9704      	str	r7, [sp, #16]
 8009384:	e761      	b.n	800924a <_dtoa_r+0x3e2>
 8009386:	4b27      	ldr	r3, [pc, #156]	@ (8009424 <_dtoa_r+0x5bc>)
 8009388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800938a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800938e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009392:	4454      	add	r4, sl
 8009394:	2900      	cmp	r1, #0
 8009396:	d053      	beq.n	8009440 <_dtoa_r+0x5d8>
 8009398:	4928      	ldr	r1, [pc, #160]	@ (800943c <_dtoa_r+0x5d4>)
 800939a:	2000      	movs	r0, #0
 800939c:	f7f7 fa7e 	bl	800089c <__aeabi_ddiv>
 80093a0:	4633      	mov	r3, r6
 80093a2:	462a      	mov	r2, r5
 80093a4:	f7f6 ff98 	bl	80002d8 <__aeabi_dsub>
 80093a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093ac:	4656      	mov	r6, sl
 80093ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b2:	f7f7 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 80093b6:	4605      	mov	r5, r0
 80093b8:	f7f7 f8dc 	bl	8000574 <__aeabi_i2d>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c4:	f7f6 ff88 	bl	80002d8 <__aeabi_dsub>
 80093c8:	3530      	adds	r5, #48	@ 0x30
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093d2:	f806 5b01 	strb.w	r5, [r6], #1
 80093d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093da:	f7f7 fba7 	bl	8000b2c <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d171      	bne.n	80094c6 <_dtoa_r+0x65e>
 80093e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e6:	4911      	ldr	r1, [pc, #68]	@ (800942c <_dtoa_r+0x5c4>)
 80093e8:	2000      	movs	r0, #0
 80093ea:	f7f6 ff75 	bl	80002d8 <__aeabi_dsub>
 80093ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093f2:	f7f7 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f040 8095 	bne.w	8009526 <_dtoa_r+0x6be>
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	f43f af50 	beq.w	80092a2 <_dtoa_r+0x43a>
 8009402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009406:	4b0a      	ldr	r3, [pc, #40]	@ (8009430 <_dtoa_r+0x5c8>)
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f91d 	bl	8000648 <__aeabi_dmul>
 800940e:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <_dtoa_r+0x5c8>)
 8009410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009414:	2200      	movs	r2, #0
 8009416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941a:	f7f7 f915 	bl	8000648 <__aeabi_dmul>
 800941e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009422:	e7c4      	b.n	80093ae <_dtoa_r+0x546>
 8009424:	0800b900 	.word	0x0800b900
 8009428:	0800b8d8 	.word	0x0800b8d8
 800942c:	3ff00000 	.word	0x3ff00000
 8009430:	40240000 	.word	0x40240000
 8009434:	401c0000 	.word	0x401c0000
 8009438:	40140000 	.word	0x40140000
 800943c:	3fe00000 	.word	0x3fe00000
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	f7f7 f900 	bl	8000648 <__aeabi_dmul>
 8009448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800944c:	9415      	str	r4, [sp, #84]	@ 0x54
 800944e:	4656      	mov	r6, sl
 8009450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009454:	f7f7 fba8 	bl	8000ba8 <__aeabi_d2iz>
 8009458:	4605      	mov	r5, r0
 800945a:	f7f7 f88b 	bl	8000574 <__aeabi_i2d>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009466:	f7f6 ff37 	bl	80002d8 <__aeabi_dsub>
 800946a:	3530      	adds	r5, #48	@ 0x30
 800946c:	f806 5b01 	strb.w	r5, [r6], #1
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	42a6      	cmp	r6, r4
 8009476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800947a:	f04f 0200 	mov.w	r2, #0
 800947e:	d124      	bne.n	80094ca <_dtoa_r+0x662>
 8009480:	4bac      	ldr	r3, [pc, #688]	@ (8009734 <_dtoa_r+0x8cc>)
 8009482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009486:	f7f6 ff29 	bl	80002dc <__adddf3>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009492:	f7f7 fb69 	bl	8000b68 <__aeabi_dcmpgt>
 8009496:	2800      	cmp	r0, #0
 8009498:	d145      	bne.n	8009526 <_dtoa_r+0x6be>
 800949a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800949e:	49a5      	ldr	r1, [pc, #660]	@ (8009734 <_dtoa_r+0x8cc>)
 80094a0:	2000      	movs	r0, #0
 80094a2:	f7f6 ff19 	bl	80002d8 <__aeabi_dsub>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ae:	f7f7 fb3d 	bl	8000b2c <__aeabi_dcmplt>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f43f aef5 	beq.w	80092a2 <_dtoa_r+0x43a>
 80094b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80094ba:	1e73      	subs	r3, r6, #1
 80094bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80094be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094c2:	2b30      	cmp	r3, #48	@ 0x30
 80094c4:	d0f8      	beq.n	80094b8 <_dtoa_r+0x650>
 80094c6:	9f04      	ldr	r7, [sp, #16]
 80094c8:	e73e      	b.n	8009348 <_dtoa_r+0x4e0>
 80094ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009738 <_dtoa_r+0x8d0>)
 80094cc:	f7f7 f8bc 	bl	8000648 <__aeabi_dmul>
 80094d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d4:	e7bc      	b.n	8009450 <_dtoa_r+0x5e8>
 80094d6:	d10c      	bne.n	80094f2 <_dtoa_r+0x68a>
 80094d8:	4b98      	ldr	r3, [pc, #608]	@ (800973c <_dtoa_r+0x8d4>)
 80094da:	2200      	movs	r2, #0
 80094dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e0:	f7f7 f8b2 	bl	8000648 <__aeabi_dmul>
 80094e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094e8:	f7f7 fb34 	bl	8000b54 <__aeabi_dcmpge>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f000 8157 	beq.w	80097a0 <_dtoa_r+0x938>
 80094f2:	2400      	movs	r4, #0
 80094f4:	4625      	mov	r5, r4
 80094f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f8:	43db      	mvns	r3, r3
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	4656      	mov	r6, sl
 80094fe:	2700      	movs	r7, #0
 8009500:	4621      	mov	r1, r4
 8009502:	4658      	mov	r0, fp
 8009504:	f000 ff00 	bl	800a308 <_Bfree>
 8009508:	2d00      	cmp	r5, #0
 800950a:	d0dc      	beq.n	80094c6 <_dtoa_r+0x65e>
 800950c:	b12f      	cbz	r7, 800951a <_dtoa_r+0x6b2>
 800950e:	42af      	cmp	r7, r5
 8009510:	d003      	beq.n	800951a <_dtoa_r+0x6b2>
 8009512:	4639      	mov	r1, r7
 8009514:	4658      	mov	r0, fp
 8009516:	f000 fef7 	bl	800a308 <_Bfree>
 800951a:	4629      	mov	r1, r5
 800951c:	4658      	mov	r0, fp
 800951e:	f000 fef3 	bl	800a308 <_Bfree>
 8009522:	e7d0      	b.n	80094c6 <_dtoa_r+0x65e>
 8009524:	9704      	str	r7, [sp, #16]
 8009526:	4633      	mov	r3, r6
 8009528:	461e      	mov	r6, r3
 800952a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800952e:	2a39      	cmp	r2, #57	@ 0x39
 8009530:	d107      	bne.n	8009542 <_dtoa_r+0x6da>
 8009532:	459a      	cmp	sl, r3
 8009534:	d1f8      	bne.n	8009528 <_dtoa_r+0x6c0>
 8009536:	9a04      	ldr	r2, [sp, #16]
 8009538:	3201      	adds	r2, #1
 800953a:	9204      	str	r2, [sp, #16]
 800953c:	2230      	movs	r2, #48	@ 0x30
 800953e:	f88a 2000 	strb.w	r2, [sl]
 8009542:	781a      	ldrb	r2, [r3, #0]
 8009544:	3201      	adds	r2, #1
 8009546:	701a      	strb	r2, [r3, #0]
 8009548:	e7bd      	b.n	80094c6 <_dtoa_r+0x65e>
 800954a:	4b7b      	ldr	r3, [pc, #492]	@ (8009738 <_dtoa_r+0x8d0>)
 800954c:	2200      	movs	r2, #0
 800954e:	f7f7 f87b 	bl	8000648 <__aeabi_dmul>
 8009552:	2200      	movs	r2, #0
 8009554:	2300      	movs	r3, #0
 8009556:	4604      	mov	r4, r0
 8009558:	460d      	mov	r5, r1
 800955a:	f7f7 fadd 	bl	8000b18 <__aeabi_dcmpeq>
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f aebb 	beq.w	80092da <_dtoa_r+0x472>
 8009564:	e6f0      	b.n	8009348 <_dtoa_r+0x4e0>
 8009566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009568:	2a00      	cmp	r2, #0
 800956a:	f000 80db 	beq.w	8009724 <_dtoa_r+0x8bc>
 800956e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009570:	2a01      	cmp	r2, #1
 8009572:	f300 80bf 	bgt.w	80096f4 <_dtoa_r+0x88c>
 8009576:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009578:	2a00      	cmp	r2, #0
 800957a:	f000 80b7 	beq.w	80096ec <_dtoa_r+0x884>
 800957e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009582:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009584:	4646      	mov	r6, r8
 8009586:	9a08      	ldr	r2, [sp, #32]
 8009588:	2101      	movs	r1, #1
 800958a:	441a      	add	r2, r3
 800958c:	4658      	mov	r0, fp
 800958e:	4498      	add	r8, r3
 8009590:	9208      	str	r2, [sp, #32]
 8009592:	f000 ffb7 	bl	800a504 <__i2b>
 8009596:	4605      	mov	r5, r0
 8009598:	b15e      	cbz	r6, 80095b2 <_dtoa_r+0x74a>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd08      	ble.n	80095b2 <_dtoa_r+0x74a>
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	9a08      	ldr	r2, [sp, #32]
 80095a4:	bfa8      	it	ge
 80095a6:	4633      	movge	r3, r6
 80095a8:	eba8 0803 	sub.w	r8, r8, r3
 80095ac:	1af6      	subs	r6, r6, r3
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	9308      	str	r3, [sp, #32]
 80095b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b4:	b1f3      	cbz	r3, 80095f4 <_dtoa_r+0x78c>
 80095b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80b7 	beq.w	800972c <_dtoa_r+0x8c4>
 80095be:	b18c      	cbz	r4, 80095e4 <_dtoa_r+0x77c>
 80095c0:	4629      	mov	r1, r5
 80095c2:	4622      	mov	r2, r4
 80095c4:	4658      	mov	r0, fp
 80095c6:	f001 f85d 	bl	800a684 <__pow5mult>
 80095ca:	464a      	mov	r2, r9
 80095cc:	4601      	mov	r1, r0
 80095ce:	4605      	mov	r5, r0
 80095d0:	4658      	mov	r0, fp
 80095d2:	f000 ffad 	bl	800a530 <__multiply>
 80095d6:	4649      	mov	r1, r9
 80095d8:	9004      	str	r0, [sp, #16]
 80095da:	4658      	mov	r0, fp
 80095dc:	f000 fe94 	bl	800a308 <_Bfree>
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	4699      	mov	r9, r3
 80095e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e6:	1b1a      	subs	r2, r3, r4
 80095e8:	d004      	beq.n	80095f4 <_dtoa_r+0x78c>
 80095ea:	4649      	mov	r1, r9
 80095ec:	4658      	mov	r0, fp
 80095ee:	f001 f849 	bl	800a684 <__pow5mult>
 80095f2:	4681      	mov	r9, r0
 80095f4:	2101      	movs	r1, #1
 80095f6:	4658      	mov	r0, fp
 80095f8:	f000 ff84 	bl	800a504 <__i2b>
 80095fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fe:	4604      	mov	r4, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 81cf 	beq.w	80099a4 <_dtoa_r+0xb3c>
 8009606:	461a      	mov	r2, r3
 8009608:	4601      	mov	r1, r0
 800960a:	4658      	mov	r0, fp
 800960c:	f001 f83a 	bl	800a684 <__pow5mult>
 8009610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009612:	2b01      	cmp	r3, #1
 8009614:	4604      	mov	r4, r0
 8009616:	f300 8095 	bgt.w	8009744 <_dtoa_r+0x8dc>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f040 8087 	bne.w	8009730 <_dtoa_r+0x8c8>
 8009622:	9b03      	ldr	r3, [sp, #12]
 8009624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 8089 	bne.w	8009740 <_dtoa_r+0x8d8>
 800962e:	9b03      	ldr	r3, [sp, #12]
 8009630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009634:	0d1b      	lsrs	r3, r3, #20
 8009636:	051b      	lsls	r3, r3, #20
 8009638:	b12b      	cbz	r3, 8009646 <_dtoa_r+0x7de>
 800963a:	9b08      	ldr	r3, [sp, #32]
 800963c:	3301      	adds	r3, #1
 800963e:	9308      	str	r3, [sp, #32]
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	2301      	movs	r3, #1
 8009646:	930a      	str	r3, [sp, #40]	@ 0x28
 8009648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 81b0 	beq.w	80099b0 <_dtoa_r+0xb48>
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009656:	6918      	ldr	r0, [r3, #16]
 8009658:	f000 ff08 	bl	800a46c <__hi0bits>
 800965c:	f1c0 0020 	rsb	r0, r0, #32
 8009660:	9b08      	ldr	r3, [sp, #32]
 8009662:	4418      	add	r0, r3
 8009664:	f010 001f 	ands.w	r0, r0, #31
 8009668:	d077      	beq.n	800975a <_dtoa_r+0x8f2>
 800966a:	f1c0 0320 	rsb	r3, r0, #32
 800966e:	2b04      	cmp	r3, #4
 8009670:	dd6b      	ble.n	800974a <_dtoa_r+0x8e2>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	f1c0 001c 	rsb	r0, r0, #28
 8009678:	4403      	add	r3, r0
 800967a:	4480      	add	r8, r0
 800967c:	4406      	add	r6, r0
 800967e:	9308      	str	r3, [sp, #32]
 8009680:	f1b8 0f00 	cmp.w	r8, #0
 8009684:	dd05      	ble.n	8009692 <_dtoa_r+0x82a>
 8009686:	4649      	mov	r1, r9
 8009688:	4642      	mov	r2, r8
 800968a:	4658      	mov	r0, fp
 800968c:	f001 f854 	bl	800a738 <__lshift>
 8009690:	4681      	mov	r9, r0
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	2b00      	cmp	r3, #0
 8009696:	dd05      	ble.n	80096a4 <_dtoa_r+0x83c>
 8009698:	4621      	mov	r1, r4
 800969a:	461a      	mov	r2, r3
 800969c:	4658      	mov	r0, fp
 800969e:	f001 f84b 	bl	800a738 <__lshift>
 80096a2:	4604      	mov	r4, r0
 80096a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d059      	beq.n	800975e <_dtoa_r+0x8f6>
 80096aa:	4621      	mov	r1, r4
 80096ac:	4648      	mov	r0, r9
 80096ae:	f001 f8af 	bl	800a810 <__mcmp>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	da53      	bge.n	800975e <_dtoa_r+0x8f6>
 80096b6:	1e7b      	subs	r3, r7, #1
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	4649      	mov	r1, r9
 80096bc:	2300      	movs	r3, #0
 80096be:	220a      	movs	r2, #10
 80096c0:	4658      	mov	r0, fp
 80096c2:	f000 fe43 	bl	800a34c <__multadd>
 80096c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096c8:	4681      	mov	r9, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 8172 	beq.w	80099b4 <_dtoa_r+0xb4c>
 80096d0:	2300      	movs	r3, #0
 80096d2:	4629      	mov	r1, r5
 80096d4:	220a      	movs	r2, #10
 80096d6:	4658      	mov	r0, fp
 80096d8:	f000 fe38 	bl	800a34c <__multadd>
 80096dc:	9b00      	ldr	r3, [sp, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	4605      	mov	r5, r0
 80096e2:	dc67      	bgt.n	80097b4 <_dtoa_r+0x94c>
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	dc41      	bgt.n	800976e <_dtoa_r+0x906>
 80096ea:	e063      	b.n	80097b4 <_dtoa_r+0x94c>
 80096ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80096f2:	e746      	b.n	8009582 <_dtoa_r+0x71a>
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	1e5c      	subs	r4, r3, #1
 80096f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	bfbf      	itttt	lt
 80096fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009700:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009702:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009704:	1ae3      	sublt	r3, r4, r3
 8009706:	bfb4      	ite	lt
 8009708:	18d2      	addlt	r2, r2, r3
 800970a:	1b1c      	subge	r4, r3, r4
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	bfbc      	itt	lt
 8009710:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009712:	2400      	movlt	r4, #0
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfb5      	itete	lt
 8009718:	eba8 0603 	sublt.w	r6, r8, r3
 800971c:	9b07      	ldrge	r3, [sp, #28]
 800971e:	2300      	movlt	r3, #0
 8009720:	4646      	movge	r6, r8
 8009722:	e730      	b.n	8009586 <_dtoa_r+0x71e>
 8009724:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009726:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009728:	4646      	mov	r6, r8
 800972a:	e735      	b.n	8009598 <_dtoa_r+0x730>
 800972c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800972e:	e75c      	b.n	80095ea <_dtoa_r+0x782>
 8009730:	2300      	movs	r3, #0
 8009732:	e788      	b.n	8009646 <_dtoa_r+0x7de>
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	40240000 	.word	0x40240000
 800973c:	40140000 	.word	0x40140000
 8009740:	9b02      	ldr	r3, [sp, #8]
 8009742:	e780      	b.n	8009646 <_dtoa_r+0x7de>
 8009744:	2300      	movs	r3, #0
 8009746:	930a      	str	r3, [sp, #40]	@ 0x28
 8009748:	e782      	b.n	8009650 <_dtoa_r+0x7e8>
 800974a:	d099      	beq.n	8009680 <_dtoa_r+0x818>
 800974c:	9a08      	ldr	r2, [sp, #32]
 800974e:	331c      	adds	r3, #28
 8009750:	441a      	add	r2, r3
 8009752:	4498      	add	r8, r3
 8009754:	441e      	add	r6, r3
 8009756:	9208      	str	r2, [sp, #32]
 8009758:	e792      	b.n	8009680 <_dtoa_r+0x818>
 800975a:	4603      	mov	r3, r0
 800975c:	e7f6      	b.n	800974c <_dtoa_r+0x8e4>
 800975e:	9b07      	ldr	r3, [sp, #28]
 8009760:	9704      	str	r7, [sp, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	dc20      	bgt.n	80097a8 <_dtoa_r+0x940>
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	2b02      	cmp	r3, #2
 800976c:	dd1e      	ble.n	80097ac <_dtoa_r+0x944>
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f47f aec0 	bne.w	80094f6 <_dtoa_r+0x68e>
 8009776:	4621      	mov	r1, r4
 8009778:	2205      	movs	r2, #5
 800977a:	4658      	mov	r0, fp
 800977c:	f000 fde6 	bl	800a34c <__multadd>
 8009780:	4601      	mov	r1, r0
 8009782:	4604      	mov	r4, r0
 8009784:	4648      	mov	r0, r9
 8009786:	f001 f843 	bl	800a810 <__mcmp>
 800978a:	2800      	cmp	r0, #0
 800978c:	f77f aeb3 	ble.w	80094f6 <_dtoa_r+0x68e>
 8009790:	4656      	mov	r6, sl
 8009792:	2331      	movs	r3, #49	@ 0x31
 8009794:	f806 3b01 	strb.w	r3, [r6], #1
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	3301      	adds	r3, #1
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	e6ae      	b.n	80094fe <_dtoa_r+0x696>
 80097a0:	9c07      	ldr	r4, [sp, #28]
 80097a2:	9704      	str	r7, [sp, #16]
 80097a4:	4625      	mov	r5, r4
 80097a6:	e7f3      	b.n	8009790 <_dtoa_r+0x928>
 80097a8:	9b07      	ldr	r3, [sp, #28]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8104 	beq.w	80099bc <_dtoa_r+0xb54>
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	dd05      	ble.n	80097c4 <_dtoa_r+0x95c>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4632      	mov	r2, r6
 80097bc:	4658      	mov	r0, fp
 80097be:	f000 ffbb 	bl	800a738 <__lshift>
 80097c2:	4605      	mov	r5, r0
 80097c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d05a      	beq.n	8009880 <_dtoa_r+0xa18>
 80097ca:	6869      	ldr	r1, [r5, #4]
 80097cc:	4658      	mov	r0, fp
 80097ce:	f000 fd5b 	bl	800a288 <_Balloc>
 80097d2:	4606      	mov	r6, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <_dtoa_r+0x97a>
 80097d6:	4b84      	ldr	r3, [pc, #528]	@ (80099e8 <_dtoa_r+0xb80>)
 80097d8:	4602      	mov	r2, r0
 80097da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097de:	f7ff bb5a 	b.w	8008e96 <_dtoa_r+0x2e>
 80097e2:	692a      	ldr	r2, [r5, #16]
 80097e4:	3202      	adds	r2, #2
 80097e6:	0092      	lsls	r2, r2, #2
 80097e8:	f105 010c 	add.w	r1, r5, #12
 80097ec:	300c      	adds	r0, #12
 80097ee:	f7ff fa92 	bl	8008d16 <memcpy>
 80097f2:	2201      	movs	r2, #1
 80097f4:	4631      	mov	r1, r6
 80097f6:	4658      	mov	r0, fp
 80097f8:	f000 ff9e 	bl	800a738 <__lshift>
 80097fc:	f10a 0301 	add.w	r3, sl, #1
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	4453      	add	r3, sl
 8009806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	462f      	mov	r7, r5
 8009810:	930a      	str	r3, [sp, #40]	@ 0x28
 8009812:	4605      	mov	r5, r0
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	4621      	mov	r1, r4
 8009818:	3b01      	subs	r3, #1
 800981a:	4648      	mov	r0, r9
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	f7ff fa99 	bl	8008d54 <quorem>
 8009822:	4639      	mov	r1, r7
 8009824:	9002      	str	r0, [sp, #8]
 8009826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800982a:	4648      	mov	r0, r9
 800982c:	f000 fff0 	bl	800a810 <__mcmp>
 8009830:	462a      	mov	r2, r5
 8009832:	9008      	str	r0, [sp, #32]
 8009834:	4621      	mov	r1, r4
 8009836:	4658      	mov	r0, fp
 8009838:	f001 f806 	bl	800a848 <__mdiff>
 800983c:	68c2      	ldr	r2, [r0, #12]
 800983e:	4606      	mov	r6, r0
 8009840:	bb02      	cbnz	r2, 8009884 <_dtoa_r+0xa1c>
 8009842:	4601      	mov	r1, r0
 8009844:	4648      	mov	r0, r9
 8009846:	f000 ffe3 	bl	800a810 <__mcmp>
 800984a:	4602      	mov	r2, r0
 800984c:	4631      	mov	r1, r6
 800984e:	4658      	mov	r0, fp
 8009850:	920e      	str	r2, [sp, #56]	@ 0x38
 8009852:	f000 fd59 	bl	800a308 <_Bfree>
 8009856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800985a:	9e07      	ldr	r6, [sp, #28]
 800985c:	ea43 0102 	orr.w	r1, r3, r2
 8009860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009862:	4319      	orrs	r1, r3
 8009864:	d110      	bne.n	8009888 <_dtoa_r+0xa20>
 8009866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800986a:	d029      	beq.n	80098c0 <_dtoa_r+0xa58>
 800986c:	9b08      	ldr	r3, [sp, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd02      	ble.n	8009878 <_dtoa_r+0xa10>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009878:	9b00      	ldr	r3, [sp, #0]
 800987a:	f883 8000 	strb.w	r8, [r3]
 800987e:	e63f      	b.n	8009500 <_dtoa_r+0x698>
 8009880:	4628      	mov	r0, r5
 8009882:	e7bb      	b.n	80097fc <_dtoa_r+0x994>
 8009884:	2201      	movs	r2, #1
 8009886:	e7e1      	b.n	800984c <_dtoa_r+0x9e4>
 8009888:	9b08      	ldr	r3, [sp, #32]
 800988a:	2b00      	cmp	r3, #0
 800988c:	db04      	blt.n	8009898 <_dtoa_r+0xa30>
 800988e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009890:	430b      	orrs	r3, r1
 8009892:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009894:	430b      	orrs	r3, r1
 8009896:	d120      	bne.n	80098da <_dtoa_r+0xa72>
 8009898:	2a00      	cmp	r2, #0
 800989a:	dded      	ble.n	8009878 <_dtoa_r+0xa10>
 800989c:	4649      	mov	r1, r9
 800989e:	2201      	movs	r2, #1
 80098a0:	4658      	mov	r0, fp
 80098a2:	f000 ff49 	bl	800a738 <__lshift>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4681      	mov	r9, r0
 80098aa:	f000 ffb1 	bl	800a810 <__mcmp>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	dc03      	bgt.n	80098ba <_dtoa_r+0xa52>
 80098b2:	d1e1      	bne.n	8009878 <_dtoa_r+0xa10>
 80098b4:	f018 0f01 	tst.w	r8, #1
 80098b8:	d0de      	beq.n	8009878 <_dtoa_r+0xa10>
 80098ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098be:	d1d8      	bne.n	8009872 <_dtoa_r+0xa0a>
 80098c0:	9a00      	ldr	r2, [sp, #0]
 80098c2:	2339      	movs	r3, #57	@ 0x39
 80098c4:	7013      	strb	r3, [r2, #0]
 80098c6:	4633      	mov	r3, r6
 80098c8:	461e      	mov	r6, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098d0:	2a39      	cmp	r2, #57	@ 0x39
 80098d2:	d052      	beq.n	800997a <_dtoa_r+0xb12>
 80098d4:	3201      	adds	r2, #1
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	e612      	b.n	8009500 <_dtoa_r+0x698>
 80098da:	2a00      	cmp	r2, #0
 80098dc:	dd07      	ble.n	80098ee <_dtoa_r+0xa86>
 80098de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098e2:	d0ed      	beq.n	80098c0 <_dtoa_r+0xa58>
 80098e4:	9a00      	ldr	r2, [sp, #0]
 80098e6:	f108 0301 	add.w	r3, r8, #1
 80098ea:	7013      	strb	r3, [r2, #0]
 80098ec:	e608      	b.n	8009500 <_dtoa_r+0x698>
 80098ee:	9b07      	ldr	r3, [sp, #28]
 80098f0:	9a07      	ldr	r2, [sp, #28]
 80098f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80098f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d028      	beq.n	800994e <_dtoa_r+0xae6>
 80098fc:	4649      	mov	r1, r9
 80098fe:	2300      	movs	r3, #0
 8009900:	220a      	movs	r2, #10
 8009902:	4658      	mov	r0, fp
 8009904:	f000 fd22 	bl	800a34c <__multadd>
 8009908:	42af      	cmp	r7, r5
 800990a:	4681      	mov	r9, r0
 800990c:	f04f 0300 	mov.w	r3, #0
 8009910:	f04f 020a 	mov.w	r2, #10
 8009914:	4639      	mov	r1, r7
 8009916:	4658      	mov	r0, fp
 8009918:	d107      	bne.n	800992a <_dtoa_r+0xac2>
 800991a:	f000 fd17 	bl	800a34c <__multadd>
 800991e:	4607      	mov	r7, r0
 8009920:	4605      	mov	r5, r0
 8009922:	9b07      	ldr	r3, [sp, #28]
 8009924:	3301      	adds	r3, #1
 8009926:	9307      	str	r3, [sp, #28]
 8009928:	e774      	b.n	8009814 <_dtoa_r+0x9ac>
 800992a:	f000 fd0f 	bl	800a34c <__multadd>
 800992e:	4629      	mov	r1, r5
 8009930:	4607      	mov	r7, r0
 8009932:	2300      	movs	r3, #0
 8009934:	220a      	movs	r2, #10
 8009936:	4658      	mov	r0, fp
 8009938:	f000 fd08 	bl	800a34c <__multadd>
 800993c:	4605      	mov	r5, r0
 800993e:	e7f0      	b.n	8009922 <_dtoa_r+0xaba>
 8009940:	9b00      	ldr	r3, [sp, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	bfcc      	ite	gt
 8009946:	461e      	movgt	r6, r3
 8009948:	2601      	movle	r6, #1
 800994a:	4456      	add	r6, sl
 800994c:	2700      	movs	r7, #0
 800994e:	4649      	mov	r1, r9
 8009950:	2201      	movs	r2, #1
 8009952:	4658      	mov	r0, fp
 8009954:	f000 fef0 	bl	800a738 <__lshift>
 8009958:	4621      	mov	r1, r4
 800995a:	4681      	mov	r9, r0
 800995c:	f000 ff58 	bl	800a810 <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	dcb0      	bgt.n	80098c6 <_dtoa_r+0xa5e>
 8009964:	d102      	bne.n	800996c <_dtoa_r+0xb04>
 8009966:	f018 0f01 	tst.w	r8, #1
 800996a:	d1ac      	bne.n	80098c6 <_dtoa_r+0xa5e>
 800996c:	4633      	mov	r3, r6
 800996e:	461e      	mov	r6, r3
 8009970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009974:	2a30      	cmp	r2, #48	@ 0x30
 8009976:	d0fa      	beq.n	800996e <_dtoa_r+0xb06>
 8009978:	e5c2      	b.n	8009500 <_dtoa_r+0x698>
 800997a:	459a      	cmp	sl, r3
 800997c:	d1a4      	bne.n	80098c8 <_dtoa_r+0xa60>
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	3301      	adds	r3, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	2331      	movs	r3, #49	@ 0x31
 8009986:	f88a 3000 	strb.w	r3, [sl]
 800998a:	e5b9      	b.n	8009500 <_dtoa_r+0x698>
 800998c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800998e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80099ec <_dtoa_r+0xb84>
 8009992:	b11b      	cbz	r3, 800999c <_dtoa_r+0xb34>
 8009994:	f10a 0308 	add.w	r3, sl, #8
 8009998:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	4650      	mov	r0, sl
 800999e:	b019      	add	sp, #100	@ 0x64
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	f77f ae37 	ble.w	800961a <_dtoa_r+0x7b2>
 80099ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80099b0:	2001      	movs	r0, #1
 80099b2:	e655      	b.n	8009660 <_dtoa_r+0x7f8>
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f77f aed6 	ble.w	8009768 <_dtoa_r+0x900>
 80099bc:	4656      	mov	r6, sl
 80099be:	4621      	mov	r1, r4
 80099c0:	4648      	mov	r0, r9
 80099c2:	f7ff f9c7 	bl	8008d54 <quorem>
 80099c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099ca:	f806 8b01 	strb.w	r8, [r6], #1
 80099ce:	9b00      	ldr	r3, [sp, #0]
 80099d0:	eba6 020a 	sub.w	r2, r6, sl
 80099d4:	4293      	cmp	r3, r2
 80099d6:	ddb3      	ble.n	8009940 <_dtoa_r+0xad8>
 80099d8:	4649      	mov	r1, r9
 80099da:	2300      	movs	r3, #0
 80099dc:	220a      	movs	r2, #10
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 fcb4 	bl	800a34c <__multadd>
 80099e4:	4681      	mov	r9, r0
 80099e6:	e7ea      	b.n	80099be <_dtoa_r+0xb56>
 80099e8:	0800b7fd 	.word	0x0800b7fd
 80099ec:	0800b781 	.word	0x0800b781

080099f0 <_free_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4605      	mov	r5, r0
 80099f4:	2900      	cmp	r1, #0
 80099f6:	d041      	beq.n	8009a7c <_free_r+0x8c>
 80099f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fc:	1f0c      	subs	r4, r1, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfb8      	it	lt
 8009a02:	18e4      	addlt	r4, r4, r3
 8009a04:	f000 fc34 	bl	800a270 <__malloc_lock>
 8009a08:	4a1d      	ldr	r2, [pc, #116]	@ (8009a80 <_free_r+0x90>)
 8009a0a:	6813      	ldr	r3, [r2, #0]
 8009a0c:	b933      	cbnz	r3, 8009a1c <_free_r+0x2c>
 8009a0e:	6063      	str	r3, [r4, #4]
 8009a10:	6014      	str	r4, [r2, #0]
 8009a12:	4628      	mov	r0, r5
 8009a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a18:	f000 bc30 	b.w	800a27c <__malloc_unlock>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d908      	bls.n	8009a32 <_free_r+0x42>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	1821      	adds	r1, r4, r0
 8009a24:	428b      	cmp	r3, r1
 8009a26:	bf01      	itttt	eq
 8009a28:	6819      	ldreq	r1, [r3, #0]
 8009a2a:	685b      	ldreq	r3, [r3, #4]
 8009a2c:	1809      	addeq	r1, r1, r0
 8009a2e:	6021      	streq	r1, [r4, #0]
 8009a30:	e7ed      	b.n	8009a0e <_free_r+0x1e>
 8009a32:	461a      	mov	r2, r3
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	b10b      	cbz	r3, 8009a3c <_free_r+0x4c>
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	d9fa      	bls.n	8009a32 <_free_r+0x42>
 8009a3c:	6811      	ldr	r1, [r2, #0]
 8009a3e:	1850      	adds	r0, r2, r1
 8009a40:	42a0      	cmp	r0, r4
 8009a42:	d10b      	bne.n	8009a5c <_free_r+0x6c>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	4401      	add	r1, r0
 8009a48:	1850      	adds	r0, r2, r1
 8009a4a:	4283      	cmp	r3, r0
 8009a4c:	6011      	str	r1, [r2, #0]
 8009a4e:	d1e0      	bne.n	8009a12 <_free_r+0x22>
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	6053      	str	r3, [r2, #4]
 8009a56:	4408      	add	r0, r1
 8009a58:	6010      	str	r0, [r2, #0]
 8009a5a:	e7da      	b.n	8009a12 <_free_r+0x22>
 8009a5c:	d902      	bls.n	8009a64 <_free_r+0x74>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	602b      	str	r3, [r5, #0]
 8009a62:	e7d6      	b.n	8009a12 <_free_r+0x22>
 8009a64:	6820      	ldr	r0, [r4, #0]
 8009a66:	1821      	adds	r1, r4, r0
 8009a68:	428b      	cmp	r3, r1
 8009a6a:	bf04      	itt	eq
 8009a6c:	6819      	ldreq	r1, [r3, #0]
 8009a6e:	685b      	ldreq	r3, [r3, #4]
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	bf04      	itt	eq
 8009a74:	1809      	addeq	r1, r1, r0
 8009a76:	6021      	streq	r1, [r4, #0]
 8009a78:	6054      	str	r4, [r2, #4]
 8009a7a:	e7ca      	b.n	8009a12 <_free_r+0x22>
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	2000064c 	.word	0x2000064c

08009a84 <rshift>:
 8009a84:	6903      	ldr	r3, [r0, #16]
 8009a86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a92:	f100 0414 	add.w	r4, r0, #20
 8009a96:	dd45      	ble.n	8009b24 <rshift+0xa0>
 8009a98:	f011 011f 	ands.w	r1, r1, #31
 8009a9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009aa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aa4:	d10c      	bne.n	8009ac0 <rshift+0x3c>
 8009aa6:	f100 0710 	add.w	r7, r0, #16
 8009aaa:	4629      	mov	r1, r5
 8009aac:	42b1      	cmp	r1, r6
 8009aae:	d334      	bcc.n	8009b1a <rshift+0x96>
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	1eea      	subs	r2, r5, #3
 8009ab6:	4296      	cmp	r6, r2
 8009ab8:	bf38      	it	cc
 8009aba:	2300      	movcc	r3, #0
 8009abc:	4423      	add	r3, r4
 8009abe:	e015      	b.n	8009aec <rshift+0x68>
 8009ac0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ac4:	f1c1 0820 	rsb	r8, r1, #32
 8009ac8:	40cf      	lsrs	r7, r1
 8009aca:	f105 0e04 	add.w	lr, r5, #4
 8009ace:	46a1      	mov	r9, r4
 8009ad0:	4576      	cmp	r6, lr
 8009ad2:	46f4      	mov	ip, lr
 8009ad4:	d815      	bhi.n	8009b02 <rshift+0x7e>
 8009ad6:	1a9a      	subs	r2, r3, r2
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	3a04      	subs	r2, #4
 8009adc:	3501      	adds	r5, #1
 8009ade:	42ae      	cmp	r6, r5
 8009ae0:	bf38      	it	cc
 8009ae2:	2200      	movcc	r2, #0
 8009ae4:	18a3      	adds	r3, r4, r2
 8009ae6:	50a7      	str	r7, [r4, r2]
 8009ae8:	b107      	cbz	r7, 8009aec <rshift+0x68>
 8009aea:	3304      	adds	r3, #4
 8009aec:	1b1a      	subs	r2, r3, r4
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009af4:	bf08      	it	eq
 8009af6:	2300      	moveq	r3, #0
 8009af8:	6102      	str	r2, [r0, #16]
 8009afa:	bf08      	it	eq
 8009afc:	6143      	streq	r3, [r0, #20]
 8009afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b02:	f8dc c000 	ldr.w	ip, [ip]
 8009b06:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b0a:	ea4c 0707 	orr.w	r7, ip, r7
 8009b0e:	f849 7b04 	str.w	r7, [r9], #4
 8009b12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b16:	40cf      	lsrs	r7, r1
 8009b18:	e7da      	b.n	8009ad0 <rshift+0x4c>
 8009b1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b22:	e7c3      	b.n	8009aac <rshift+0x28>
 8009b24:	4623      	mov	r3, r4
 8009b26:	e7e1      	b.n	8009aec <rshift+0x68>

08009b28 <__hexdig_fun>:
 8009b28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d802      	bhi.n	8009b36 <__hexdig_fun+0xe>
 8009b30:	3820      	subs	r0, #32
 8009b32:	b2c0      	uxtb	r0, r0
 8009b34:	4770      	bx	lr
 8009b36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	d801      	bhi.n	8009b42 <__hexdig_fun+0x1a>
 8009b3e:	3847      	subs	r0, #71	@ 0x47
 8009b40:	e7f7      	b.n	8009b32 <__hexdig_fun+0xa>
 8009b42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d801      	bhi.n	8009b4e <__hexdig_fun+0x26>
 8009b4a:	3827      	subs	r0, #39	@ 0x27
 8009b4c:	e7f1      	b.n	8009b32 <__hexdig_fun+0xa>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	4770      	bx	lr
	...

08009b54 <__gethex>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	468a      	mov	sl, r1
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	680b      	ldr	r3, [r1, #0]
 8009b60:	9001      	str	r0, [sp, #4]
 8009b62:	4690      	mov	r8, r2
 8009b64:	1c9c      	adds	r4, r3, #2
 8009b66:	46a1      	mov	r9, r4
 8009b68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b6c:	2830      	cmp	r0, #48	@ 0x30
 8009b6e:	d0fa      	beq.n	8009b66 <__gethex+0x12>
 8009b70:	eba9 0303 	sub.w	r3, r9, r3
 8009b74:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b78:	f7ff ffd6 	bl	8009b28 <__hexdig_fun>
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d168      	bne.n	8009c54 <__gethex+0x100>
 8009b82:	49a0      	ldr	r1, [pc, #640]	@ (8009e04 <__gethex+0x2b0>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	4648      	mov	r0, r9
 8009b88:	f7ff f83c 	bl	8008c04 <strncmp>
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d167      	bne.n	8009c62 <__gethex+0x10e>
 8009b92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b96:	4626      	mov	r6, r4
 8009b98:	f7ff ffc6 	bl	8009b28 <__hexdig_fun>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d062      	beq.n	8009c66 <__gethex+0x112>
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	7818      	ldrb	r0, [r3, #0]
 8009ba4:	2830      	cmp	r0, #48	@ 0x30
 8009ba6:	4699      	mov	r9, r3
 8009ba8:	f103 0301 	add.w	r3, r3, #1
 8009bac:	d0f9      	beq.n	8009ba2 <__gethex+0x4e>
 8009bae:	f7ff ffbb 	bl	8009b28 <__hexdig_fun>
 8009bb2:	fab0 f580 	clz	r5, r0
 8009bb6:	096d      	lsrs	r5, r5, #5
 8009bb8:	f04f 0b01 	mov.w	fp, #1
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	3201      	adds	r2, #1
 8009bc2:	7830      	ldrb	r0, [r6, #0]
 8009bc4:	f7ff ffb0 	bl	8009b28 <__hexdig_fun>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1f8      	bne.n	8009bbe <__gethex+0x6a>
 8009bcc:	498d      	ldr	r1, [pc, #564]	@ (8009e04 <__gethex+0x2b0>)
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff f817 	bl	8008c04 <strncmp>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d13f      	bne.n	8009c5a <__gethex+0x106>
 8009bda:	b944      	cbnz	r4, 8009bee <__gethex+0x9a>
 8009bdc:	1c74      	adds	r4, r6, #1
 8009bde:	4622      	mov	r2, r4
 8009be0:	4616      	mov	r6, r2
 8009be2:	3201      	adds	r2, #1
 8009be4:	7830      	ldrb	r0, [r6, #0]
 8009be6:	f7ff ff9f 	bl	8009b28 <__hexdig_fun>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1f8      	bne.n	8009be0 <__gethex+0x8c>
 8009bee:	1ba4      	subs	r4, r4, r6
 8009bf0:	00a7      	lsls	r7, r4, #2
 8009bf2:	7833      	ldrb	r3, [r6, #0]
 8009bf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009bf8:	2b50      	cmp	r3, #80	@ 0x50
 8009bfa:	d13e      	bne.n	8009c7a <__gethex+0x126>
 8009bfc:	7873      	ldrb	r3, [r6, #1]
 8009bfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c00:	d033      	beq.n	8009c6a <__gethex+0x116>
 8009c02:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c04:	d034      	beq.n	8009c70 <__gethex+0x11c>
 8009c06:	1c71      	adds	r1, r6, #1
 8009c08:	2400      	movs	r4, #0
 8009c0a:	7808      	ldrb	r0, [r1, #0]
 8009c0c:	f7ff ff8c 	bl	8009b28 <__hexdig_fun>
 8009c10:	1e43      	subs	r3, r0, #1
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b18      	cmp	r3, #24
 8009c16:	d830      	bhi.n	8009c7a <__gethex+0x126>
 8009c18:	f1a0 0210 	sub.w	r2, r0, #16
 8009c1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c20:	f7ff ff82 	bl	8009b28 <__hexdig_fun>
 8009c24:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c28:	fa5f fc8c 	uxtb.w	ip, ip
 8009c2c:	f1bc 0f18 	cmp.w	ip, #24
 8009c30:	f04f 030a 	mov.w	r3, #10
 8009c34:	d91e      	bls.n	8009c74 <__gethex+0x120>
 8009c36:	b104      	cbz	r4, 8009c3a <__gethex+0xe6>
 8009c38:	4252      	negs	r2, r2
 8009c3a:	4417      	add	r7, r2
 8009c3c:	f8ca 1000 	str.w	r1, [sl]
 8009c40:	b1ed      	cbz	r5, 8009c7e <__gethex+0x12a>
 8009c42:	f1bb 0f00 	cmp.w	fp, #0
 8009c46:	bf0c      	ite	eq
 8009c48:	2506      	moveq	r5, #6
 8009c4a:	2500      	movne	r5, #0
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	b005      	add	sp, #20
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	2500      	movs	r5, #0
 8009c56:	462c      	mov	r4, r5
 8009c58:	e7b0      	b.n	8009bbc <__gethex+0x68>
 8009c5a:	2c00      	cmp	r4, #0
 8009c5c:	d1c7      	bne.n	8009bee <__gethex+0x9a>
 8009c5e:	4627      	mov	r7, r4
 8009c60:	e7c7      	b.n	8009bf2 <__gethex+0x9e>
 8009c62:	464e      	mov	r6, r9
 8009c64:	462f      	mov	r7, r5
 8009c66:	2501      	movs	r5, #1
 8009c68:	e7c3      	b.n	8009bf2 <__gethex+0x9e>
 8009c6a:	2400      	movs	r4, #0
 8009c6c:	1cb1      	adds	r1, r6, #2
 8009c6e:	e7cc      	b.n	8009c0a <__gethex+0xb6>
 8009c70:	2401      	movs	r4, #1
 8009c72:	e7fb      	b.n	8009c6c <__gethex+0x118>
 8009c74:	fb03 0002 	mla	r0, r3, r2, r0
 8009c78:	e7ce      	b.n	8009c18 <__gethex+0xc4>
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	e7de      	b.n	8009c3c <__gethex+0xe8>
 8009c7e:	eba6 0309 	sub.w	r3, r6, r9
 8009c82:	3b01      	subs	r3, #1
 8009c84:	4629      	mov	r1, r5
 8009c86:	2b07      	cmp	r3, #7
 8009c88:	dc0a      	bgt.n	8009ca0 <__gethex+0x14c>
 8009c8a:	9801      	ldr	r0, [sp, #4]
 8009c8c:	f000 fafc 	bl	800a288 <_Balloc>
 8009c90:	4604      	mov	r4, r0
 8009c92:	b940      	cbnz	r0, 8009ca6 <__gethex+0x152>
 8009c94:	4b5c      	ldr	r3, [pc, #368]	@ (8009e08 <__gethex+0x2b4>)
 8009c96:	4602      	mov	r2, r0
 8009c98:	21e4      	movs	r1, #228	@ 0xe4
 8009c9a:	485c      	ldr	r0, [pc, #368]	@ (8009e0c <__gethex+0x2b8>)
 8009c9c:	f001 fc22 	bl	800b4e4 <__assert_func>
 8009ca0:	3101      	adds	r1, #1
 8009ca2:	105b      	asrs	r3, r3, #1
 8009ca4:	e7ef      	b.n	8009c86 <__gethex+0x132>
 8009ca6:	f100 0a14 	add.w	sl, r0, #20
 8009caa:	2300      	movs	r3, #0
 8009cac:	4655      	mov	r5, sl
 8009cae:	469b      	mov	fp, r3
 8009cb0:	45b1      	cmp	r9, r6
 8009cb2:	d337      	bcc.n	8009d24 <__gethex+0x1d0>
 8009cb4:	f845 bb04 	str.w	fp, [r5], #4
 8009cb8:	eba5 050a 	sub.w	r5, r5, sl
 8009cbc:	10ad      	asrs	r5, r5, #2
 8009cbe:	6125      	str	r5, [r4, #16]
 8009cc0:	4658      	mov	r0, fp
 8009cc2:	f000 fbd3 	bl	800a46c <__hi0bits>
 8009cc6:	016d      	lsls	r5, r5, #5
 8009cc8:	f8d8 6000 	ldr.w	r6, [r8]
 8009ccc:	1a2d      	subs	r5, r5, r0
 8009cce:	42b5      	cmp	r5, r6
 8009cd0:	dd54      	ble.n	8009d7c <__gethex+0x228>
 8009cd2:	1bad      	subs	r5, r5, r6
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 ff67 	bl	800abaa <__any_on>
 8009cdc:	4681      	mov	r9, r0
 8009cde:	b178      	cbz	r0, 8009d00 <__gethex+0x1ac>
 8009ce0:	1e6b      	subs	r3, r5, #1
 8009ce2:	1159      	asrs	r1, r3, #5
 8009ce4:	f003 021f 	and.w	r2, r3, #31
 8009ce8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	fa09 f202 	lsl.w	r2, r9, r2
 8009cf4:	420a      	tst	r2, r1
 8009cf6:	d003      	beq.n	8009d00 <__gethex+0x1ac>
 8009cf8:	454b      	cmp	r3, r9
 8009cfa:	dc36      	bgt.n	8009d6a <__gethex+0x216>
 8009cfc:	f04f 0902 	mov.w	r9, #2
 8009d00:	4629      	mov	r1, r5
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff febe 	bl	8009a84 <rshift>
 8009d08:	442f      	add	r7, r5
 8009d0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d0e:	42bb      	cmp	r3, r7
 8009d10:	da42      	bge.n	8009d98 <__gethex+0x244>
 8009d12:	9801      	ldr	r0, [sp, #4]
 8009d14:	4621      	mov	r1, r4
 8009d16:	f000 faf7 	bl	800a308 <_Bfree>
 8009d1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	25a3      	movs	r5, #163	@ 0xa3
 8009d22:	e793      	b.n	8009c4c <__gethex+0xf8>
 8009d24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d28:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d2a:	d012      	beq.n	8009d52 <__gethex+0x1fe>
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d104      	bne.n	8009d3a <__gethex+0x1e6>
 8009d30:	f845 bb04 	str.w	fp, [r5], #4
 8009d34:	f04f 0b00 	mov.w	fp, #0
 8009d38:	465b      	mov	r3, fp
 8009d3a:	7830      	ldrb	r0, [r6, #0]
 8009d3c:	9303      	str	r3, [sp, #12]
 8009d3e:	f7ff fef3 	bl	8009b28 <__hexdig_fun>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	f000 000f 	and.w	r0, r0, #15
 8009d48:	4098      	lsls	r0, r3
 8009d4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d4e:	3304      	adds	r3, #4
 8009d50:	e7ae      	b.n	8009cb0 <__gethex+0x15c>
 8009d52:	45b1      	cmp	r9, r6
 8009d54:	d8ea      	bhi.n	8009d2c <__gethex+0x1d8>
 8009d56:	492b      	ldr	r1, [pc, #172]	@ (8009e04 <__gethex+0x2b0>)
 8009d58:	9303      	str	r3, [sp, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7fe ff51 	bl	8008c04 <strncmp>
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e1      	bne.n	8009d2c <__gethex+0x1d8>
 8009d68:	e7a2      	b.n	8009cb0 <__gethex+0x15c>
 8009d6a:	1ea9      	subs	r1, r5, #2
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 ff1c 	bl	800abaa <__any_on>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0c2      	beq.n	8009cfc <__gethex+0x1a8>
 8009d76:	f04f 0903 	mov.w	r9, #3
 8009d7a:	e7c1      	b.n	8009d00 <__gethex+0x1ac>
 8009d7c:	da09      	bge.n	8009d92 <__gethex+0x23e>
 8009d7e:	1b75      	subs	r5, r6, r5
 8009d80:	4621      	mov	r1, r4
 8009d82:	9801      	ldr	r0, [sp, #4]
 8009d84:	462a      	mov	r2, r5
 8009d86:	f000 fcd7 	bl	800a738 <__lshift>
 8009d8a:	1b7f      	subs	r7, r7, r5
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	f100 0a14 	add.w	sl, r0, #20
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	e7b8      	b.n	8009d0a <__gethex+0x1b6>
 8009d98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d9c:	42bd      	cmp	r5, r7
 8009d9e:	dd6f      	ble.n	8009e80 <__gethex+0x32c>
 8009da0:	1bed      	subs	r5, r5, r7
 8009da2:	42ae      	cmp	r6, r5
 8009da4:	dc34      	bgt.n	8009e10 <__gethex+0x2bc>
 8009da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d022      	beq.n	8009df4 <__gethex+0x2a0>
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d024      	beq.n	8009dfc <__gethex+0x2a8>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d115      	bne.n	8009de2 <__gethex+0x28e>
 8009db6:	42ae      	cmp	r6, r5
 8009db8:	d113      	bne.n	8009de2 <__gethex+0x28e>
 8009dba:	2e01      	cmp	r6, #1
 8009dbc:	d10b      	bne.n	8009dd6 <__gethex+0x282>
 8009dbe:	9a02      	ldr	r2, [sp, #8]
 8009dc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	f8ca 3000 	str.w	r3, [sl]
 8009dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dd0:	2562      	movs	r5, #98	@ 0x62
 8009dd2:	601c      	str	r4, [r3, #0]
 8009dd4:	e73a      	b.n	8009c4c <__gethex+0xf8>
 8009dd6:	1e71      	subs	r1, r6, #1
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fee6 	bl	800abaa <__any_on>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1ed      	bne.n	8009dbe <__gethex+0x26a>
 8009de2:	9801      	ldr	r0, [sp, #4]
 8009de4:	4621      	mov	r1, r4
 8009de6:	f000 fa8f 	bl	800a308 <_Bfree>
 8009dea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dec:	2300      	movs	r3, #0
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	2550      	movs	r5, #80	@ 0x50
 8009df2:	e72b      	b.n	8009c4c <__gethex+0xf8>
 8009df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1f3      	bne.n	8009de2 <__gethex+0x28e>
 8009dfa:	e7e0      	b.n	8009dbe <__gethex+0x26a>
 8009dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1dd      	bne.n	8009dbe <__gethex+0x26a>
 8009e02:	e7ee      	b.n	8009de2 <__gethex+0x28e>
 8009e04:	0800b6e8 	.word	0x0800b6e8
 8009e08:	0800b7fd 	.word	0x0800b7fd
 8009e0c:	0800b80e 	.word	0x0800b80e
 8009e10:	1e6f      	subs	r7, r5, #1
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	d130      	bne.n	8009e7a <__gethex+0x326>
 8009e18:	b127      	cbz	r7, 8009e24 <__gethex+0x2d0>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fec4 	bl	800abaa <__any_on>
 8009e22:	4681      	mov	r9, r0
 8009e24:	117a      	asrs	r2, r7, #5
 8009e26:	2301      	movs	r3, #1
 8009e28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e2c:	f007 071f 	and.w	r7, r7, #31
 8009e30:	40bb      	lsls	r3, r7
 8009e32:	4213      	tst	r3, r2
 8009e34:	4629      	mov	r1, r5
 8009e36:	4620      	mov	r0, r4
 8009e38:	bf18      	it	ne
 8009e3a:	f049 0902 	orrne.w	r9, r9, #2
 8009e3e:	f7ff fe21 	bl	8009a84 <rshift>
 8009e42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e46:	1b76      	subs	r6, r6, r5
 8009e48:	2502      	movs	r5, #2
 8009e4a:	f1b9 0f00 	cmp.w	r9, #0
 8009e4e:	d047      	beq.n	8009ee0 <__gethex+0x38c>
 8009e50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d015      	beq.n	8009e84 <__gethex+0x330>
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d017      	beq.n	8009e8c <__gethex+0x338>
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d109      	bne.n	8009e74 <__gethex+0x320>
 8009e60:	f019 0f02 	tst.w	r9, #2
 8009e64:	d006      	beq.n	8009e74 <__gethex+0x320>
 8009e66:	f8da 3000 	ldr.w	r3, [sl]
 8009e6a:	ea49 0903 	orr.w	r9, r9, r3
 8009e6e:	f019 0f01 	tst.w	r9, #1
 8009e72:	d10e      	bne.n	8009e92 <__gethex+0x33e>
 8009e74:	f045 0510 	orr.w	r5, r5, #16
 8009e78:	e032      	b.n	8009ee0 <__gethex+0x38c>
 8009e7a:	f04f 0901 	mov.w	r9, #1
 8009e7e:	e7d1      	b.n	8009e24 <__gethex+0x2d0>
 8009e80:	2501      	movs	r5, #1
 8009e82:	e7e2      	b.n	8009e4a <__gethex+0x2f6>
 8009e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e86:	f1c3 0301 	rsb	r3, r3, #1
 8009e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <__gethex+0x320>
 8009e92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e96:	f104 0314 	add.w	r3, r4, #20
 8009e9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ea2:	f04f 0c00 	mov.w	ip, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009eb0:	d01b      	beq.n	8009eea <__gethex+0x396>
 8009eb2:	3201      	adds	r2, #1
 8009eb4:	6002      	str	r2, [r0, #0]
 8009eb6:	2d02      	cmp	r5, #2
 8009eb8:	f104 0314 	add.w	r3, r4, #20
 8009ebc:	d13c      	bne.n	8009f38 <__gethex+0x3e4>
 8009ebe:	f8d8 2000 	ldr.w	r2, [r8]
 8009ec2:	3a01      	subs	r2, #1
 8009ec4:	42b2      	cmp	r2, r6
 8009ec6:	d109      	bne.n	8009edc <__gethex+0x388>
 8009ec8:	1171      	asrs	r1, r6, #5
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ed0:	f006 061f 	and.w	r6, r6, #31
 8009ed4:	fa02 f606 	lsl.w	r6, r2, r6
 8009ed8:	421e      	tst	r6, r3
 8009eda:	d13a      	bne.n	8009f52 <__gethex+0x3fe>
 8009edc:	f045 0520 	orr.w	r5, r5, #32
 8009ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ee2:	601c      	str	r4, [r3, #0]
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	601f      	str	r7, [r3, #0]
 8009ee8:	e6b0      	b.n	8009c4c <__gethex+0xf8>
 8009eea:	4299      	cmp	r1, r3
 8009eec:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ef0:	d8d9      	bhi.n	8009ea6 <__gethex+0x352>
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	459b      	cmp	fp, r3
 8009ef6:	db17      	blt.n	8009f28 <__gethex+0x3d4>
 8009ef8:	6861      	ldr	r1, [r4, #4]
 8009efa:	9801      	ldr	r0, [sp, #4]
 8009efc:	3101      	adds	r1, #1
 8009efe:	f000 f9c3 	bl	800a288 <_Balloc>
 8009f02:	4681      	mov	r9, r0
 8009f04:	b918      	cbnz	r0, 8009f0e <__gethex+0x3ba>
 8009f06:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <__gethex+0x41c>)
 8009f08:	4602      	mov	r2, r0
 8009f0a:	2184      	movs	r1, #132	@ 0x84
 8009f0c:	e6c5      	b.n	8009c9a <__gethex+0x146>
 8009f0e:	6922      	ldr	r2, [r4, #16]
 8009f10:	3202      	adds	r2, #2
 8009f12:	f104 010c 	add.w	r1, r4, #12
 8009f16:	0092      	lsls	r2, r2, #2
 8009f18:	300c      	adds	r0, #12
 8009f1a:	f7fe fefc 	bl	8008d16 <memcpy>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	9801      	ldr	r0, [sp, #4]
 8009f22:	f000 f9f1 	bl	800a308 <_Bfree>
 8009f26:	464c      	mov	r4, r9
 8009f28:	6923      	ldr	r3, [r4, #16]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f30:	6122      	str	r2, [r4, #16]
 8009f32:	2201      	movs	r2, #1
 8009f34:	615a      	str	r2, [r3, #20]
 8009f36:	e7be      	b.n	8009eb6 <__gethex+0x362>
 8009f38:	6922      	ldr	r2, [r4, #16]
 8009f3a:	455a      	cmp	r2, fp
 8009f3c:	dd0b      	ble.n	8009f56 <__gethex+0x402>
 8009f3e:	2101      	movs	r1, #1
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff fd9f 	bl	8009a84 <rshift>
 8009f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f4a:	3701      	adds	r7, #1
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	f6ff aee0 	blt.w	8009d12 <__gethex+0x1be>
 8009f52:	2501      	movs	r5, #1
 8009f54:	e7c2      	b.n	8009edc <__gethex+0x388>
 8009f56:	f016 061f 	ands.w	r6, r6, #31
 8009f5a:	d0fa      	beq.n	8009f52 <__gethex+0x3fe>
 8009f5c:	4453      	add	r3, sl
 8009f5e:	f1c6 0620 	rsb	r6, r6, #32
 8009f62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f66:	f000 fa81 	bl	800a46c <__hi0bits>
 8009f6a:	42b0      	cmp	r0, r6
 8009f6c:	dbe7      	blt.n	8009f3e <__gethex+0x3ea>
 8009f6e:	e7f0      	b.n	8009f52 <__gethex+0x3fe>
 8009f70:	0800b7fd 	.word	0x0800b7fd

08009f74 <L_shift>:
 8009f74:	f1c2 0208 	rsb	r2, r2, #8
 8009f78:	0092      	lsls	r2, r2, #2
 8009f7a:	b570      	push	{r4, r5, r6, lr}
 8009f7c:	f1c2 0620 	rsb	r6, r2, #32
 8009f80:	6843      	ldr	r3, [r0, #4]
 8009f82:	6804      	ldr	r4, [r0, #0]
 8009f84:	fa03 f506 	lsl.w	r5, r3, r6
 8009f88:	432c      	orrs	r4, r5
 8009f8a:	40d3      	lsrs	r3, r2
 8009f8c:	6004      	str	r4, [r0, #0]
 8009f8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f92:	4288      	cmp	r0, r1
 8009f94:	d3f4      	bcc.n	8009f80 <L_shift+0xc>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}

08009f98 <__match>:
 8009f98:	b530      	push	{r4, r5, lr}
 8009f9a:	6803      	ldr	r3, [r0, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa2:	b914      	cbnz	r4, 8009faa <__match+0x12>
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	bd30      	pop	{r4, r5, pc}
 8009faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009fb2:	2d19      	cmp	r5, #25
 8009fb4:	bf98      	it	ls
 8009fb6:	3220      	addls	r2, #32
 8009fb8:	42a2      	cmp	r2, r4
 8009fba:	d0f0      	beq.n	8009f9e <__match+0x6>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e7f3      	b.n	8009fa8 <__match+0x10>

08009fc0 <__hexnan>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	680b      	ldr	r3, [r1, #0]
 8009fc6:	6801      	ldr	r1, [r0, #0]
 8009fc8:	115e      	asrs	r6, r3, #5
 8009fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fce:	f013 031f 	ands.w	r3, r3, #31
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	bf18      	it	ne
 8009fd6:	3604      	addne	r6, #4
 8009fd8:	2500      	movs	r5, #0
 8009fda:	1f37      	subs	r7, r6, #4
 8009fdc:	4682      	mov	sl, r0
 8009fde:	4690      	mov	r8, r2
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fe6:	46b9      	mov	r9, r7
 8009fe8:	463c      	mov	r4, r7
 8009fea:	9502      	str	r5, [sp, #8]
 8009fec:	46ab      	mov	fp, r5
 8009fee:	784a      	ldrb	r2, [r1, #1]
 8009ff0:	1c4b      	adds	r3, r1, #1
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	b342      	cbz	r2, 800a048 <__hexnan+0x88>
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	9105      	str	r1, [sp, #20]
 8009ffa:	9204      	str	r2, [sp, #16]
 8009ffc:	f7ff fd94 	bl	8009b28 <__hexdig_fun>
 800a000:	2800      	cmp	r0, #0
 800a002:	d151      	bne.n	800a0a8 <__hexnan+0xe8>
 800a004:	9a04      	ldr	r2, [sp, #16]
 800a006:	9905      	ldr	r1, [sp, #20]
 800a008:	2a20      	cmp	r2, #32
 800a00a:	d818      	bhi.n	800a03e <__hexnan+0x7e>
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	459b      	cmp	fp, r3
 800a010:	dd13      	ble.n	800a03a <__hexnan+0x7a>
 800a012:	454c      	cmp	r4, r9
 800a014:	d206      	bcs.n	800a024 <__hexnan+0x64>
 800a016:	2d07      	cmp	r5, #7
 800a018:	dc04      	bgt.n	800a024 <__hexnan+0x64>
 800a01a:	462a      	mov	r2, r5
 800a01c:	4649      	mov	r1, r9
 800a01e:	4620      	mov	r0, r4
 800a020:	f7ff ffa8 	bl	8009f74 <L_shift>
 800a024:	4544      	cmp	r4, r8
 800a026:	d952      	bls.n	800a0ce <__hexnan+0x10e>
 800a028:	2300      	movs	r3, #0
 800a02a:	f1a4 0904 	sub.w	r9, r4, #4
 800a02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a032:	f8cd b008 	str.w	fp, [sp, #8]
 800a036:	464c      	mov	r4, r9
 800a038:	461d      	mov	r5, r3
 800a03a:	9903      	ldr	r1, [sp, #12]
 800a03c:	e7d7      	b.n	8009fee <__hexnan+0x2e>
 800a03e:	2a29      	cmp	r2, #41	@ 0x29
 800a040:	d157      	bne.n	800a0f2 <__hexnan+0x132>
 800a042:	3102      	adds	r1, #2
 800a044:	f8ca 1000 	str.w	r1, [sl]
 800a048:	f1bb 0f00 	cmp.w	fp, #0
 800a04c:	d051      	beq.n	800a0f2 <__hexnan+0x132>
 800a04e:	454c      	cmp	r4, r9
 800a050:	d206      	bcs.n	800a060 <__hexnan+0xa0>
 800a052:	2d07      	cmp	r5, #7
 800a054:	dc04      	bgt.n	800a060 <__hexnan+0xa0>
 800a056:	462a      	mov	r2, r5
 800a058:	4649      	mov	r1, r9
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff ff8a 	bl	8009f74 <L_shift>
 800a060:	4544      	cmp	r4, r8
 800a062:	d936      	bls.n	800a0d2 <__hexnan+0x112>
 800a064:	f1a8 0204 	sub.w	r2, r8, #4
 800a068:	4623      	mov	r3, r4
 800a06a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a06e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a072:	429f      	cmp	r7, r3
 800a074:	d2f9      	bcs.n	800a06a <__hexnan+0xaa>
 800a076:	1b3b      	subs	r3, r7, r4
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	3304      	adds	r3, #4
 800a07e:	3401      	adds	r4, #1
 800a080:	3e03      	subs	r6, #3
 800a082:	42b4      	cmp	r4, r6
 800a084:	bf88      	it	hi
 800a086:	2304      	movhi	r3, #4
 800a088:	4443      	add	r3, r8
 800a08a:	2200      	movs	r2, #0
 800a08c:	f843 2b04 	str.w	r2, [r3], #4
 800a090:	429f      	cmp	r7, r3
 800a092:	d2fb      	bcs.n	800a08c <__hexnan+0xcc>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	b91b      	cbnz	r3, 800a0a0 <__hexnan+0xe0>
 800a098:	4547      	cmp	r7, r8
 800a09a:	d128      	bne.n	800a0ee <__hexnan+0x12e>
 800a09c:	2301      	movs	r3, #1
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	2005      	movs	r0, #5
 800a0a2:	b007      	add	sp, #28
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	2d08      	cmp	r5, #8
 800a0ac:	f10b 0b01 	add.w	fp, fp, #1
 800a0b0:	dd06      	ble.n	800a0c0 <__hexnan+0x100>
 800a0b2:	4544      	cmp	r4, r8
 800a0b4:	d9c1      	bls.n	800a03a <__hexnan+0x7a>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0bc:	2501      	movs	r5, #1
 800a0be:	3c04      	subs	r4, #4
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	f000 000f 	and.w	r0, r0, #15
 800a0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	e7b5      	b.n	800a03a <__hexnan+0x7a>
 800a0ce:	2508      	movs	r5, #8
 800a0d0:	e7b3      	b.n	800a03a <__hexnan+0x7a>
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0dd      	beq.n	800a094 <__hexnan+0xd4>
 800a0d8:	f1c3 0320 	rsb	r3, r3, #32
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	40da      	lsrs	r2, r3
 800a0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0ec:	e7d2      	b.n	800a094 <__hexnan+0xd4>
 800a0ee:	3f04      	subs	r7, #4
 800a0f0:	e7d0      	b.n	800a094 <__hexnan+0xd4>
 800a0f2:	2004      	movs	r0, #4
 800a0f4:	e7d5      	b.n	800a0a2 <__hexnan+0xe2>
	...

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	@ (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 b825 	b.w	800a14c <_malloc_r>
 800a102:	bf00      	nop
 800a104:	20000190 	.word	0x20000190

0800a108 <sbrk_aligned>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4e0f      	ldr	r6, [pc, #60]	@ (800a148 <sbrk_aligned+0x40>)
 800a10c:	460c      	mov	r4, r1
 800a10e:	6831      	ldr	r1, [r6, #0]
 800a110:	4605      	mov	r5, r0
 800a112:	b911      	cbnz	r1, 800a11a <sbrk_aligned+0x12>
 800a114:	f001 f9d6 	bl	800b4c4 <_sbrk_r>
 800a118:	6030      	str	r0, [r6, #0]
 800a11a:	4621      	mov	r1, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	f001 f9d1 	bl	800b4c4 <_sbrk_r>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d103      	bne.n	800a12e <sbrk_aligned+0x26>
 800a126:	f04f 34ff 	mov.w	r4, #4294967295
 800a12a:	4620      	mov	r0, r4
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
 800a12e:	1cc4      	adds	r4, r0, #3
 800a130:	f024 0403 	bic.w	r4, r4, #3
 800a134:	42a0      	cmp	r0, r4
 800a136:	d0f8      	beq.n	800a12a <sbrk_aligned+0x22>
 800a138:	1a21      	subs	r1, r4, r0
 800a13a:	4628      	mov	r0, r5
 800a13c:	f001 f9c2 	bl	800b4c4 <_sbrk_r>
 800a140:	3001      	adds	r0, #1
 800a142:	d1f2      	bne.n	800a12a <sbrk_aligned+0x22>
 800a144:	e7ef      	b.n	800a126 <sbrk_aligned+0x1e>
 800a146:	bf00      	nop
 800a148:	20000648 	.word	0x20000648

0800a14c <_malloc_r>:
 800a14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a150:	1ccd      	adds	r5, r1, #3
 800a152:	f025 0503 	bic.w	r5, r5, #3
 800a156:	3508      	adds	r5, #8
 800a158:	2d0c      	cmp	r5, #12
 800a15a:	bf38      	it	cc
 800a15c:	250c      	movcc	r5, #12
 800a15e:	2d00      	cmp	r5, #0
 800a160:	4606      	mov	r6, r0
 800a162:	db01      	blt.n	800a168 <_malloc_r+0x1c>
 800a164:	42a9      	cmp	r1, r5
 800a166:	d904      	bls.n	800a172 <_malloc_r+0x26>
 800a168:	230c      	movs	r3, #12
 800a16a:	6033      	str	r3, [r6, #0]
 800a16c:	2000      	movs	r0, #0
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a248 <_malloc_r+0xfc>
 800a176:	f000 f87b 	bl	800a270 <__malloc_lock>
 800a17a:	f8d8 3000 	ldr.w	r3, [r8]
 800a17e:	461c      	mov	r4, r3
 800a180:	bb44      	cbnz	r4, 800a1d4 <_malloc_r+0x88>
 800a182:	4629      	mov	r1, r5
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ffbf 	bl	800a108 <sbrk_aligned>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	4604      	mov	r4, r0
 800a18e:	d158      	bne.n	800a242 <_malloc_r+0xf6>
 800a190:	f8d8 4000 	ldr.w	r4, [r8]
 800a194:	4627      	mov	r7, r4
 800a196:	2f00      	cmp	r7, #0
 800a198:	d143      	bne.n	800a222 <_malloc_r+0xd6>
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	d04b      	beq.n	800a236 <_malloc_r+0xea>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	eb04 0903 	add.w	r9, r4, r3
 800a1a8:	f001 f98c 	bl	800b4c4 <_sbrk_r>
 800a1ac:	4581      	cmp	r9, r0
 800a1ae:	d142      	bne.n	800a236 <_malloc_r+0xea>
 800a1b0:	6821      	ldr	r1, [r4, #0]
 800a1b2:	1a6d      	subs	r5, r5, r1
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ffa6 	bl	800a108 <sbrk_aligned>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d03a      	beq.n	800a236 <_malloc_r+0xea>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	442b      	add	r3, r5
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	bb62      	cbnz	r2, 800a228 <_malloc_r+0xdc>
 800a1ce:	f8c8 7000 	str.w	r7, [r8]
 800a1d2:	e00f      	b.n	800a1f4 <_malloc_r+0xa8>
 800a1d4:	6822      	ldr	r2, [r4, #0]
 800a1d6:	1b52      	subs	r2, r2, r5
 800a1d8:	d420      	bmi.n	800a21c <_malloc_r+0xd0>
 800a1da:	2a0b      	cmp	r2, #11
 800a1dc:	d917      	bls.n	800a20e <_malloc_r+0xc2>
 800a1de:	1961      	adds	r1, r4, r5
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	6025      	str	r5, [r4, #0]
 800a1e4:	bf18      	it	ne
 800a1e6:	6059      	strne	r1, [r3, #4]
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	bf08      	it	eq
 800a1ec:	f8c8 1000 	streq.w	r1, [r8]
 800a1f0:	5162      	str	r2, [r4, r5]
 800a1f2:	604b      	str	r3, [r1, #4]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 f841 	bl	800a27c <__malloc_unlock>
 800a1fa:	f104 000b 	add.w	r0, r4, #11
 800a1fe:	1d23      	adds	r3, r4, #4
 800a200:	f020 0007 	bic.w	r0, r0, #7
 800a204:	1ac2      	subs	r2, r0, r3
 800a206:	bf1c      	itt	ne
 800a208:	1a1b      	subne	r3, r3, r0
 800a20a:	50a3      	strne	r3, [r4, r2]
 800a20c:	e7af      	b.n	800a16e <_malloc_r+0x22>
 800a20e:	6862      	ldr	r2, [r4, #4]
 800a210:	42a3      	cmp	r3, r4
 800a212:	bf0c      	ite	eq
 800a214:	f8c8 2000 	streq.w	r2, [r8]
 800a218:	605a      	strne	r2, [r3, #4]
 800a21a:	e7eb      	b.n	800a1f4 <_malloc_r+0xa8>
 800a21c:	4623      	mov	r3, r4
 800a21e:	6864      	ldr	r4, [r4, #4]
 800a220:	e7ae      	b.n	800a180 <_malloc_r+0x34>
 800a222:	463c      	mov	r4, r7
 800a224:	687f      	ldr	r7, [r7, #4]
 800a226:	e7b6      	b.n	800a196 <_malloc_r+0x4a>
 800a228:	461a      	mov	r2, r3
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	d1fb      	bne.n	800a228 <_malloc_r+0xdc>
 800a230:	2300      	movs	r3, #0
 800a232:	6053      	str	r3, [r2, #4]
 800a234:	e7de      	b.n	800a1f4 <_malloc_r+0xa8>
 800a236:	230c      	movs	r3, #12
 800a238:	6033      	str	r3, [r6, #0]
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 f81e 	bl	800a27c <__malloc_unlock>
 800a240:	e794      	b.n	800a16c <_malloc_r+0x20>
 800a242:	6005      	str	r5, [r0, #0]
 800a244:	e7d6      	b.n	800a1f4 <_malloc_r+0xa8>
 800a246:	bf00      	nop
 800a248:	2000064c 	.word	0x2000064c

0800a24c <__ascii_mbtowc>:
 800a24c:	b082      	sub	sp, #8
 800a24e:	b901      	cbnz	r1, 800a252 <__ascii_mbtowc+0x6>
 800a250:	a901      	add	r1, sp, #4
 800a252:	b142      	cbz	r2, 800a266 <__ascii_mbtowc+0x1a>
 800a254:	b14b      	cbz	r3, 800a26a <__ascii_mbtowc+0x1e>
 800a256:	7813      	ldrb	r3, [r2, #0]
 800a258:	600b      	str	r3, [r1, #0]
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	1e10      	subs	r0, r2, #0
 800a25e:	bf18      	it	ne
 800a260:	2001      	movne	r0, #1
 800a262:	b002      	add	sp, #8
 800a264:	4770      	bx	lr
 800a266:	4610      	mov	r0, r2
 800a268:	e7fb      	b.n	800a262 <__ascii_mbtowc+0x16>
 800a26a:	f06f 0001 	mvn.w	r0, #1
 800a26e:	e7f8      	b.n	800a262 <__ascii_mbtowc+0x16>

0800a270 <__malloc_lock>:
 800a270:	4801      	ldr	r0, [pc, #4]	@ (800a278 <__malloc_lock+0x8>)
 800a272:	f7fe bd4e 	b.w	8008d12 <__retarget_lock_acquire_recursive>
 800a276:	bf00      	nop
 800a278:	20000644 	.word	0x20000644

0800a27c <__malloc_unlock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	@ (800a284 <__malloc_unlock+0x8>)
 800a27e:	f7fe bd49 	b.w	8008d14 <__retarget_lock_release_recursive>
 800a282:	bf00      	nop
 800a284:	20000644 	.word	0x20000644

0800a288 <_Balloc>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	69c6      	ldr	r6, [r0, #28]
 800a28c:	4604      	mov	r4, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	b976      	cbnz	r6, 800a2b0 <_Balloc+0x28>
 800a292:	2010      	movs	r0, #16
 800a294:	f7ff ff30 	bl	800a0f8 <malloc>
 800a298:	4602      	mov	r2, r0
 800a29a:	61e0      	str	r0, [r4, #28]
 800a29c:	b920      	cbnz	r0, 800a2a8 <_Balloc+0x20>
 800a29e:	4b18      	ldr	r3, [pc, #96]	@ (800a300 <_Balloc+0x78>)
 800a2a0:	4818      	ldr	r0, [pc, #96]	@ (800a304 <_Balloc+0x7c>)
 800a2a2:	216b      	movs	r1, #107	@ 0x6b
 800a2a4:	f001 f91e 	bl	800b4e4 <__assert_func>
 800a2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ac:	6006      	str	r6, [r0, #0]
 800a2ae:	60c6      	str	r6, [r0, #12]
 800a2b0:	69e6      	ldr	r6, [r4, #28]
 800a2b2:	68f3      	ldr	r3, [r6, #12]
 800a2b4:	b183      	cbz	r3, 800a2d8 <_Balloc+0x50>
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2be:	b9b8      	cbnz	r0, 800a2f0 <_Balloc+0x68>
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2c6:	1d72      	adds	r2, r6, #5
 800a2c8:	0092      	lsls	r2, r2, #2
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f001 f928 	bl	800b520 <_calloc_r>
 800a2d0:	b160      	cbz	r0, 800a2ec <_Balloc+0x64>
 800a2d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2d6:	e00e      	b.n	800a2f6 <_Balloc+0x6e>
 800a2d8:	2221      	movs	r2, #33	@ 0x21
 800a2da:	2104      	movs	r1, #4
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f001 f91f 	bl	800b520 <_calloc_r>
 800a2e2:	69e3      	ldr	r3, [r4, #28]
 800a2e4:	60f0      	str	r0, [r6, #12]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e4      	bne.n	800a2b6 <_Balloc+0x2e>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	6802      	ldr	r2, [r0, #0]
 800a2f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2fc:	e7f7      	b.n	800a2ee <_Balloc+0x66>
 800a2fe:	bf00      	nop
 800a300:	0800b78e 	.word	0x0800b78e
 800a304:	0800b86e 	.word	0x0800b86e

0800a308 <_Bfree>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	69c6      	ldr	r6, [r0, #28]
 800a30c:	4605      	mov	r5, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	b976      	cbnz	r6, 800a330 <_Bfree+0x28>
 800a312:	2010      	movs	r0, #16
 800a314:	f7ff fef0 	bl	800a0f8 <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	61e8      	str	r0, [r5, #28]
 800a31c:	b920      	cbnz	r0, 800a328 <_Bfree+0x20>
 800a31e:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <_Bfree+0x3c>)
 800a320:	4809      	ldr	r0, [pc, #36]	@ (800a348 <_Bfree+0x40>)
 800a322:	218f      	movs	r1, #143	@ 0x8f
 800a324:	f001 f8de 	bl	800b4e4 <__assert_func>
 800a328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a32c:	6006      	str	r6, [r0, #0]
 800a32e:	60c6      	str	r6, [r0, #12]
 800a330:	b13c      	cbz	r4, 800a342 <_Bfree+0x3a>
 800a332:	69eb      	ldr	r3, [r5, #28]
 800a334:	6862      	ldr	r2, [r4, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a33c:	6021      	str	r1, [r4, #0]
 800a33e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	0800b78e 	.word	0x0800b78e
 800a348:	0800b86e 	.word	0x0800b86e

0800a34c <__multadd>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	690d      	ldr	r5, [r1, #16]
 800a352:	4607      	mov	r7, r0
 800a354:	460c      	mov	r4, r1
 800a356:	461e      	mov	r6, r3
 800a358:	f101 0c14 	add.w	ip, r1, #20
 800a35c:	2000      	movs	r0, #0
 800a35e:	f8dc 3000 	ldr.w	r3, [ip]
 800a362:	b299      	uxth	r1, r3
 800a364:	fb02 6101 	mla	r1, r2, r1, r6
 800a368:	0c1e      	lsrs	r6, r3, #16
 800a36a:	0c0b      	lsrs	r3, r1, #16
 800a36c:	fb02 3306 	mla	r3, r2, r6, r3
 800a370:	b289      	uxth	r1, r1
 800a372:	3001      	adds	r0, #1
 800a374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a378:	4285      	cmp	r5, r0
 800a37a:	f84c 1b04 	str.w	r1, [ip], #4
 800a37e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a382:	dcec      	bgt.n	800a35e <__multadd+0x12>
 800a384:	b30e      	cbz	r6, 800a3ca <__multadd+0x7e>
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dc19      	bgt.n	800a3c0 <__multadd+0x74>
 800a38c:	6861      	ldr	r1, [r4, #4]
 800a38e:	4638      	mov	r0, r7
 800a390:	3101      	adds	r1, #1
 800a392:	f7ff ff79 	bl	800a288 <_Balloc>
 800a396:	4680      	mov	r8, r0
 800a398:	b928      	cbnz	r0, 800a3a6 <__multadd+0x5a>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d0 <__multadd+0x84>)
 800a39e:	480d      	ldr	r0, [pc, #52]	@ (800a3d4 <__multadd+0x88>)
 800a3a0:	21ba      	movs	r1, #186	@ 0xba
 800a3a2:	f001 f89f 	bl	800b4e4 <__assert_func>
 800a3a6:	6922      	ldr	r2, [r4, #16]
 800a3a8:	3202      	adds	r2, #2
 800a3aa:	f104 010c 	add.w	r1, r4, #12
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	300c      	adds	r0, #12
 800a3b2:	f7fe fcb0 	bl	8008d16 <memcpy>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ffa5 	bl	800a308 <_Bfree>
 800a3be:	4644      	mov	r4, r8
 800a3c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	615e      	str	r6, [r3, #20]
 800a3c8:	6125      	str	r5, [r4, #16]
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	0800b7fd 	.word	0x0800b7fd
 800a3d4:	0800b86e 	.word	0x0800b86e

0800a3d8 <__s2b>:
 800a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	460c      	mov	r4, r1
 800a3de:	4615      	mov	r5, r2
 800a3e0:	461f      	mov	r7, r3
 800a3e2:	2209      	movs	r2, #9
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	db09      	blt.n	800a408 <__s2b+0x30>
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ff47 	bl	800a288 <_Balloc>
 800a3fa:	b940      	cbnz	r0, 800a40e <__s2b+0x36>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	4b19      	ldr	r3, [pc, #100]	@ (800a464 <__s2b+0x8c>)
 800a400:	4819      	ldr	r0, [pc, #100]	@ (800a468 <__s2b+0x90>)
 800a402:	21d3      	movs	r1, #211	@ 0xd3
 800a404:	f001 f86e 	bl	800b4e4 <__assert_func>
 800a408:	0052      	lsls	r2, r2, #1
 800a40a:	3101      	adds	r1, #1
 800a40c:	e7f0      	b.n	800a3f0 <__s2b+0x18>
 800a40e:	9b08      	ldr	r3, [sp, #32]
 800a410:	6143      	str	r3, [r0, #20]
 800a412:	2d09      	cmp	r5, #9
 800a414:	f04f 0301 	mov.w	r3, #1
 800a418:	6103      	str	r3, [r0, #16]
 800a41a:	dd16      	ble.n	800a44a <__s2b+0x72>
 800a41c:	f104 0909 	add.w	r9, r4, #9
 800a420:	46c8      	mov	r8, r9
 800a422:	442c      	add	r4, r5
 800a424:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a428:	4601      	mov	r1, r0
 800a42a:	3b30      	subs	r3, #48	@ 0x30
 800a42c:	220a      	movs	r2, #10
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ff8c 	bl	800a34c <__multadd>
 800a434:	45a0      	cmp	r8, r4
 800a436:	d1f5      	bne.n	800a424 <__s2b+0x4c>
 800a438:	f1a5 0408 	sub.w	r4, r5, #8
 800a43c:	444c      	add	r4, r9
 800a43e:	1b2d      	subs	r5, r5, r4
 800a440:	1963      	adds	r3, r4, r5
 800a442:	42bb      	cmp	r3, r7
 800a444:	db04      	blt.n	800a450 <__s2b+0x78>
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	340a      	adds	r4, #10
 800a44c:	2509      	movs	r5, #9
 800a44e:	e7f6      	b.n	800a43e <__s2b+0x66>
 800a450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a454:	4601      	mov	r1, r0
 800a456:	3b30      	subs	r3, #48	@ 0x30
 800a458:	220a      	movs	r2, #10
 800a45a:	4630      	mov	r0, r6
 800a45c:	f7ff ff76 	bl	800a34c <__multadd>
 800a460:	e7ee      	b.n	800a440 <__s2b+0x68>
 800a462:	bf00      	nop
 800a464:	0800b7fd 	.word	0x0800b7fd
 800a468:	0800b86e 	.word	0x0800b86e

0800a46c <__hi0bits>:
 800a46c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a470:	4603      	mov	r3, r0
 800a472:	bf36      	itet	cc
 800a474:	0403      	lslcc	r3, r0, #16
 800a476:	2000      	movcs	r0, #0
 800a478:	2010      	movcc	r0, #16
 800a47a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a47e:	bf3c      	itt	cc
 800a480:	021b      	lslcc	r3, r3, #8
 800a482:	3008      	addcc	r0, #8
 800a484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a488:	bf3c      	itt	cc
 800a48a:	011b      	lslcc	r3, r3, #4
 800a48c:	3004      	addcc	r0, #4
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a492:	bf3c      	itt	cc
 800a494:	009b      	lslcc	r3, r3, #2
 800a496:	3002      	addcc	r0, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db05      	blt.n	800a4a8 <__hi0bits+0x3c>
 800a49c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4a0:	f100 0001 	add.w	r0, r0, #1
 800a4a4:	bf08      	it	eq
 800a4a6:	2020      	moveq	r0, #32
 800a4a8:	4770      	bx	lr

0800a4aa <__lo0bits>:
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f013 0007 	ands.w	r0, r3, #7
 800a4b2:	d00b      	beq.n	800a4cc <__lo0bits+0x22>
 800a4b4:	07d9      	lsls	r1, r3, #31
 800a4b6:	d421      	bmi.n	800a4fc <__lo0bits+0x52>
 800a4b8:	0798      	lsls	r0, r3, #30
 800a4ba:	bf49      	itett	mi
 800a4bc:	085b      	lsrmi	r3, r3, #1
 800a4be:	089b      	lsrpl	r3, r3, #2
 800a4c0:	2001      	movmi	r0, #1
 800a4c2:	6013      	strmi	r3, [r2, #0]
 800a4c4:	bf5c      	itt	pl
 800a4c6:	6013      	strpl	r3, [r2, #0]
 800a4c8:	2002      	movpl	r0, #2
 800a4ca:	4770      	bx	lr
 800a4cc:	b299      	uxth	r1, r3
 800a4ce:	b909      	cbnz	r1, 800a4d4 <__lo0bits+0x2a>
 800a4d0:	0c1b      	lsrs	r3, r3, #16
 800a4d2:	2010      	movs	r0, #16
 800a4d4:	b2d9      	uxtb	r1, r3
 800a4d6:	b909      	cbnz	r1, 800a4dc <__lo0bits+0x32>
 800a4d8:	3008      	adds	r0, #8
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	0719      	lsls	r1, r3, #28
 800a4de:	bf04      	itt	eq
 800a4e0:	091b      	lsreq	r3, r3, #4
 800a4e2:	3004      	addeq	r0, #4
 800a4e4:	0799      	lsls	r1, r3, #30
 800a4e6:	bf04      	itt	eq
 800a4e8:	089b      	lsreq	r3, r3, #2
 800a4ea:	3002      	addeq	r0, #2
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	d403      	bmi.n	800a4f8 <__lo0bits+0x4e>
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	f100 0001 	add.w	r0, r0, #1
 800a4f6:	d003      	beq.n	800a500 <__lo0bits+0x56>
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4770      	bx	lr
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	4770      	bx	lr
 800a500:	2020      	movs	r0, #32
 800a502:	4770      	bx	lr

0800a504 <__i2b>:
 800a504:	b510      	push	{r4, lr}
 800a506:	460c      	mov	r4, r1
 800a508:	2101      	movs	r1, #1
 800a50a:	f7ff febd 	bl	800a288 <_Balloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	b928      	cbnz	r0, 800a51e <__i2b+0x1a>
 800a512:	4b05      	ldr	r3, [pc, #20]	@ (800a528 <__i2b+0x24>)
 800a514:	4805      	ldr	r0, [pc, #20]	@ (800a52c <__i2b+0x28>)
 800a516:	f240 1145 	movw	r1, #325	@ 0x145
 800a51a:	f000 ffe3 	bl	800b4e4 <__assert_func>
 800a51e:	2301      	movs	r3, #1
 800a520:	6144      	str	r4, [r0, #20]
 800a522:	6103      	str	r3, [r0, #16]
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800b7fd 	.word	0x0800b7fd
 800a52c:	0800b86e 	.word	0x0800b86e

0800a530 <__multiply>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4614      	mov	r4, r2
 800a536:	690a      	ldr	r2, [r1, #16]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	bfa8      	it	ge
 800a53e:	4623      	movge	r3, r4
 800a540:	460f      	mov	r7, r1
 800a542:	bfa4      	itt	ge
 800a544:	460c      	movge	r4, r1
 800a546:	461f      	movge	r7, r3
 800a548:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a54c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	6861      	ldr	r1, [r4, #4]
 800a554:	eb0a 0609 	add.w	r6, sl, r9
 800a558:	42b3      	cmp	r3, r6
 800a55a:	b085      	sub	sp, #20
 800a55c:	bfb8      	it	lt
 800a55e:	3101      	addlt	r1, #1
 800a560:	f7ff fe92 	bl	800a288 <_Balloc>
 800a564:	b930      	cbnz	r0, 800a574 <__multiply+0x44>
 800a566:	4602      	mov	r2, r0
 800a568:	4b44      	ldr	r3, [pc, #272]	@ (800a67c <__multiply+0x14c>)
 800a56a:	4845      	ldr	r0, [pc, #276]	@ (800a680 <__multiply+0x150>)
 800a56c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a570:	f000 ffb8 	bl	800b4e4 <__assert_func>
 800a574:	f100 0514 	add.w	r5, r0, #20
 800a578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a57c:	462b      	mov	r3, r5
 800a57e:	2200      	movs	r2, #0
 800a580:	4543      	cmp	r3, r8
 800a582:	d321      	bcc.n	800a5c8 <__multiply+0x98>
 800a584:	f107 0114 	add.w	r1, r7, #20
 800a588:	f104 0214 	add.w	r2, r4, #20
 800a58c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a590:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	1b13      	subs	r3, r2, r4
 800a598:	3b15      	subs	r3, #21
 800a59a:	f023 0303 	bic.w	r3, r3, #3
 800a59e:	3304      	adds	r3, #4
 800a5a0:	f104 0715 	add.w	r7, r4, #21
 800a5a4:	42ba      	cmp	r2, r7
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	9103      	str	r1, [sp, #12]
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	d80c      	bhi.n	800a5ce <__multiply+0x9e>
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	dd03      	ble.n	800a5c0 <__multiply+0x90>
 800a5b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d05b      	beq.n	800a678 <__multiply+0x148>
 800a5c0:	6106      	str	r6, [r0, #16]
 800a5c2:	b005      	add	sp, #20
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c8:	f843 2b04 	str.w	r2, [r3], #4
 800a5cc:	e7d8      	b.n	800a580 <__multiply+0x50>
 800a5ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5d2:	f1ba 0f00 	cmp.w	sl, #0
 800a5d6:	d024      	beq.n	800a622 <__multiply+0xf2>
 800a5d8:	f104 0e14 	add.w	lr, r4, #20
 800a5dc:	46a9      	mov	r9, r5
 800a5de:	f04f 0c00 	mov.w	ip, #0
 800a5e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5e6:	f8d9 3000 	ldr.w	r3, [r9]
 800a5ea:	fa1f fb87 	uxth.w	fp, r7
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a5f8:	f8d9 7000 	ldr.w	r7, [r9]
 800a5fc:	4463      	add	r3, ip
 800a5fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a602:	fb0a c70b 	mla	r7, sl, fp, ip
 800a606:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a610:	4572      	cmp	r2, lr
 800a612:	f849 3b04 	str.w	r3, [r9], #4
 800a616:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a61a:	d8e2      	bhi.n	800a5e2 <__multiply+0xb2>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	f845 c003 	str.w	ip, [r5, r3]
 800a622:	9b03      	ldr	r3, [sp, #12]
 800a624:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a628:	3104      	adds	r1, #4
 800a62a:	f1b9 0f00 	cmp.w	r9, #0
 800a62e:	d021      	beq.n	800a674 <__multiply+0x144>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	f104 0c14 	add.w	ip, r4, #20
 800a636:	46ae      	mov	lr, r5
 800a638:	f04f 0a00 	mov.w	sl, #0
 800a63c:	f8bc b000 	ldrh.w	fp, [ip]
 800a640:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a644:	fb09 770b 	mla	r7, r9, fp, r7
 800a648:	4457      	add	r7, sl
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a650:	f84e 3b04 	str.w	r3, [lr], #4
 800a654:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a65c:	f8be 3000 	ldrh.w	r3, [lr]
 800a660:	fb09 330a 	mla	r3, r9, sl, r3
 800a664:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a668:	4562      	cmp	r2, ip
 800a66a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a66e:	d8e5      	bhi.n	800a63c <__multiply+0x10c>
 800a670:	9f01      	ldr	r7, [sp, #4]
 800a672:	51eb      	str	r3, [r5, r7]
 800a674:	3504      	adds	r5, #4
 800a676:	e799      	b.n	800a5ac <__multiply+0x7c>
 800a678:	3e01      	subs	r6, #1
 800a67a:	e79b      	b.n	800a5b4 <__multiply+0x84>
 800a67c:	0800b7fd 	.word	0x0800b7fd
 800a680:	0800b86e 	.word	0x0800b86e

0800a684 <__pow5mult>:
 800a684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a688:	4615      	mov	r5, r2
 800a68a:	f012 0203 	ands.w	r2, r2, #3
 800a68e:	4607      	mov	r7, r0
 800a690:	460e      	mov	r6, r1
 800a692:	d007      	beq.n	800a6a4 <__pow5mult+0x20>
 800a694:	4c25      	ldr	r4, [pc, #148]	@ (800a72c <__pow5mult+0xa8>)
 800a696:	3a01      	subs	r2, #1
 800a698:	2300      	movs	r3, #0
 800a69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a69e:	f7ff fe55 	bl	800a34c <__multadd>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	10ad      	asrs	r5, r5, #2
 800a6a6:	d03d      	beq.n	800a724 <__pow5mult+0xa0>
 800a6a8:	69fc      	ldr	r4, [r7, #28]
 800a6aa:	b97c      	cbnz	r4, 800a6cc <__pow5mult+0x48>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f7ff fd23 	bl	800a0f8 <malloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	61f8      	str	r0, [r7, #28]
 800a6b6:	b928      	cbnz	r0, 800a6c4 <__pow5mult+0x40>
 800a6b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <__pow5mult+0xac>)
 800a6ba:	481e      	ldr	r0, [pc, #120]	@ (800a734 <__pow5mult+0xb0>)
 800a6bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6c0:	f000 ff10 	bl	800b4e4 <__assert_func>
 800a6c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6c8:	6004      	str	r4, [r0, #0]
 800a6ca:	60c4      	str	r4, [r0, #12]
 800a6cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6d4:	b94c      	cbnz	r4, 800a6ea <__pow5mult+0x66>
 800a6d6:	f240 2171 	movw	r1, #625	@ 0x271
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f7ff ff12 	bl	800a504 <__i2b>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	f04f 0900 	mov.w	r9, #0
 800a6ee:	07eb      	lsls	r3, r5, #31
 800a6f0:	d50a      	bpl.n	800a708 <__pow5mult+0x84>
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f7ff ff1a 	bl	800a530 <__multiply>
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4680      	mov	r8, r0
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff fe01 	bl	800a308 <_Bfree>
 800a706:	4646      	mov	r6, r8
 800a708:	106d      	asrs	r5, r5, #1
 800a70a:	d00b      	beq.n	800a724 <__pow5mult+0xa0>
 800a70c:	6820      	ldr	r0, [r4, #0]
 800a70e:	b938      	cbnz	r0, 800a720 <__pow5mult+0x9c>
 800a710:	4622      	mov	r2, r4
 800a712:	4621      	mov	r1, r4
 800a714:	4638      	mov	r0, r7
 800a716:	f7ff ff0b 	bl	800a530 <__multiply>
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	f8c0 9000 	str.w	r9, [r0]
 800a720:	4604      	mov	r4, r0
 800a722:	e7e4      	b.n	800a6ee <__pow5mult+0x6a>
 800a724:	4630      	mov	r0, r6
 800a726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a72a:	bf00      	nop
 800a72c:	0800b8c8 	.word	0x0800b8c8
 800a730:	0800b78e 	.word	0x0800b78e
 800a734:	0800b86e 	.word	0x0800b86e

0800a738 <__lshift>:
 800a738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	460c      	mov	r4, r1
 800a73e:	6849      	ldr	r1, [r1, #4]
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	4607      	mov	r7, r0
 800a74a:	4691      	mov	r9, r2
 800a74c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a750:	f108 0601 	add.w	r6, r8, #1
 800a754:	42b3      	cmp	r3, r6
 800a756:	db0b      	blt.n	800a770 <__lshift+0x38>
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff fd95 	bl	800a288 <_Balloc>
 800a75e:	4605      	mov	r5, r0
 800a760:	b948      	cbnz	r0, 800a776 <__lshift+0x3e>
 800a762:	4602      	mov	r2, r0
 800a764:	4b28      	ldr	r3, [pc, #160]	@ (800a808 <__lshift+0xd0>)
 800a766:	4829      	ldr	r0, [pc, #164]	@ (800a80c <__lshift+0xd4>)
 800a768:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a76c:	f000 feba 	bl	800b4e4 <__assert_func>
 800a770:	3101      	adds	r1, #1
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	e7ee      	b.n	800a754 <__lshift+0x1c>
 800a776:	2300      	movs	r3, #0
 800a778:	f100 0114 	add.w	r1, r0, #20
 800a77c:	f100 0210 	add.w	r2, r0, #16
 800a780:	4618      	mov	r0, r3
 800a782:	4553      	cmp	r3, sl
 800a784:	db33      	blt.n	800a7ee <__lshift+0xb6>
 800a786:	6920      	ldr	r0, [r4, #16]
 800a788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a78c:	f104 0314 	add.w	r3, r4, #20
 800a790:	f019 091f 	ands.w	r9, r9, #31
 800a794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a79c:	d02b      	beq.n	800a7f6 <__lshift+0xbe>
 800a79e:	f1c9 0e20 	rsb	lr, r9, #32
 800a7a2:	468a      	mov	sl, r1
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7ac:	4310      	orrs	r0, r2
 800a7ae:	f84a 0b04 	str.w	r0, [sl], #4
 800a7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b6:	459c      	cmp	ip, r3
 800a7b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7bc:	d8f3      	bhi.n	800a7a6 <__lshift+0x6e>
 800a7be:	ebac 0304 	sub.w	r3, ip, r4
 800a7c2:	3b15      	subs	r3, #21
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	f104 0015 	add.w	r0, r4, #21
 800a7ce:	4584      	cmp	ip, r0
 800a7d0:	bf38      	it	cc
 800a7d2:	2304      	movcc	r3, #4
 800a7d4:	50ca      	str	r2, [r1, r3]
 800a7d6:	b10a      	cbz	r2, 800a7dc <__lshift+0xa4>
 800a7d8:	f108 0602 	add.w	r6, r8, #2
 800a7dc:	3e01      	subs	r6, #1
 800a7de:	4638      	mov	r0, r7
 800a7e0:	612e      	str	r6, [r5, #16]
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	f7ff fd90 	bl	800a308 <_Bfree>
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	e7c5      	b.n	800a782 <__lshift+0x4a>
 800a7f6:	3904      	subs	r1, #4
 800a7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a800:	459c      	cmp	ip, r3
 800a802:	d8f9      	bhi.n	800a7f8 <__lshift+0xc0>
 800a804:	e7ea      	b.n	800a7dc <__lshift+0xa4>
 800a806:	bf00      	nop
 800a808:	0800b7fd 	.word	0x0800b7fd
 800a80c:	0800b86e 	.word	0x0800b86e

0800a810 <__mcmp>:
 800a810:	690a      	ldr	r2, [r1, #16]
 800a812:	4603      	mov	r3, r0
 800a814:	6900      	ldr	r0, [r0, #16]
 800a816:	1a80      	subs	r0, r0, r2
 800a818:	b530      	push	{r4, r5, lr}
 800a81a:	d10e      	bne.n	800a83a <__mcmp+0x2a>
 800a81c:	3314      	adds	r3, #20
 800a81e:	3114      	adds	r1, #20
 800a820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a82c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a830:	4295      	cmp	r5, r2
 800a832:	d003      	beq.n	800a83c <__mcmp+0x2c>
 800a834:	d205      	bcs.n	800a842 <__mcmp+0x32>
 800a836:	f04f 30ff 	mov.w	r0, #4294967295
 800a83a:	bd30      	pop	{r4, r5, pc}
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d3f3      	bcc.n	800a828 <__mcmp+0x18>
 800a840:	e7fb      	b.n	800a83a <__mcmp+0x2a>
 800a842:	2001      	movs	r0, #1
 800a844:	e7f9      	b.n	800a83a <__mcmp+0x2a>
	...

0800a848 <__mdiff>:
 800a848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4689      	mov	r9, r1
 800a84e:	4606      	mov	r6, r0
 800a850:	4611      	mov	r1, r2
 800a852:	4648      	mov	r0, r9
 800a854:	4614      	mov	r4, r2
 800a856:	f7ff ffdb 	bl	800a810 <__mcmp>
 800a85a:	1e05      	subs	r5, r0, #0
 800a85c:	d112      	bne.n	800a884 <__mdiff+0x3c>
 800a85e:	4629      	mov	r1, r5
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fd11 	bl	800a288 <_Balloc>
 800a866:	4602      	mov	r2, r0
 800a868:	b928      	cbnz	r0, 800a876 <__mdiff+0x2e>
 800a86a:	4b3f      	ldr	r3, [pc, #252]	@ (800a968 <__mdiff+0x120>)
 800a86c:	f240 2137 	movw	r1, #567	@ 0x237
 800a870:	483e      	ldr	r0, [pc, #248]	@ (800a96c <__mdiff+0x124>)
 800a872:	f000 fe37 	bl	800b4e4 <__assert_func>
 800a876:	2301      	movs	r3, #1
 800a878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a87c:	4610      	mov	r0, r2
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	bfbc      	itt	lt
 800a886:	464b      	movlt	r3, r9
 800a888:	46a1      	movlt	r9, r4
 800a88a:	4630      	mov	r0, r6
 800a88c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a890:	bfba      	itte	lt
 800a892:	461c      	movlt	r4, r3
 800a894:	2501      	movlt	r5, #1
 800a896:	2500      	movge	r5, #0
 800a898:	f7ff fcf6 	bl	800a288 <_Balloc>
 800a89c:	4602      	mov	r2, r0
 800a89e:	b918      	cbnz	r0, 800a8a8 <__mdiff+0x60>
 800a8a0:	4b31      	ldr	r3, [pc, #196]	@ (800a968 <__mdiff+0x120>)
 800a8a2:	f240 2145 	movw	r1, #581	@ 0x245
 800a8a6:	e7e3      	b.n	800a870 <__mdiff+0x28>
 800a8a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a8ac:	6926      	ldr	r6, [r4, #16]
 800a8ae:	60c5      	str	r5, [r0, #12]
 800a8b0:	f109 0310 	add.w	r3, r9, #16
 800a8b4:	f109 0514 	add.w	r5, r9, #20
 800a8b8:	f104 0e14 	add.w	lr, r4, #20
 800a8bc:	f100 0b14 	add.w	fp, r0, #20
 800a8c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	46d9      	mov	r9, fp
 800a8cc:	f04f 0c00 	mov.w	ip, #0
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	fa1f f38a 	uxth.w	r3, sl
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	b283      	uxth	r3, r0
 800a8e4:	1acb      	subs	r3, r1, r3
 800a8e6:	0c00      	lsrs	r0, r0, #16
 800a8e8:	4463      	add	r3, ip
 800a8ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8f8:	4576      	cmp	r6, lr
 800a8fa:	f849 3b04 	str.w	r3, [r9], #4
 800a8fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a902:	d8e5      	bhi.n	800a8d0 <__mdiff+0x88>
 800a904:	1b33      	subs	r3, r6, r4
 800a906:	3b15      	subs	r3, #21
 800a908:	f023 0303 	bic.w	r3, r3, #3
 800a90c:	3415      	adds	r4, #21
 800a90e:	3304      	adds	r3, #4
 800a910:	42a6      	cmp	r6, r4
 800a912:	bf38      	it	cc
 800a914:	2304      	movcc	r3, #4
 800a916:	441d      	add	r5, r3
 800a918:	445b      	add	r3, fp
 800a91a:	461e      	mov	r6, r3
 800a91c:	462c      	mov	r4, r5
 800a91e:	4544      	cmp	r4, r8
 800a920:	d30e      	bcc.n	800a940 <__mdiff+0xf8>
 800a922:	f108 0103 	add.w	r1, r8, #3
 800a926:	1b49      	subs	r1, r1, r5
 800a928:	f021 0103 	bic.w	r1, r1, #3
 800a92c:	3d03      	subs	r5, #3
 800a92e:	45a8      	cmp	r8, r5
 800a930:	bf38      	it	cc
 800a932:	2100      	movcc	r1, #0
 800a934:	440b      	add	r3, r1
 800a936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a93a:	b191      	cbz	r1, 800a962 <__mdiff+0x11a>
 800a93c:	6117      	str	r7, [r2, #16]
 800a93e:	e79d      	b.n	800a87c <__mdiff+0x34>
 800a940:	f854 1b04 	ldr.w	r1, [r4], #4
 800a944:	46e6      	mov	lr, ip
 800a946:	0c08      	lsrs	r0, r1, #16
 800a948:	fa1c fc81 	uxtah	ip, ip, r1
 800a94c:	4471      	add	r1, lr
 800a94e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a952:	b289      	uxth	r1, r1
 800a954:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a958:	f846 1b04 	str.w	r1, [r6], #4
 800a95c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a960:	e7dd      	b.n	800a91e <__mdiff+0xd6>
 800a962:	3f01      	subs	r7, #1
 800a964:	e7e7      	b.n	800a936 <__mdiff+0xee>
 800a966:	bf00      	nop
 800a968:	0800b7fd 	.word	0x0800b7fd
 800a96c:	0800b86e 	.word	0x0800b86e

0800a970 <__ulp>:
 800a970:	b082      	sub	sp, #8
 800a972:	ed8d 0b00 	vstr	d0, [sp]
 800a976:	9a01      	ldr	r2, [sp, #4]
 800a978:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b8 <__ulp+0x48>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc08      	bgt.n	800a996 <__ulp+0x26>
 800a984:	425b      	negs	r3, r3
 800a986:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a98a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a98e:	da04      	bge.n	800a99a <__ulp+0x2a>
 800a990:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a994:	4113      	asrs	r3, r2
 800a996:	2200      	movs	r2, #0
 800a998:	e008      	b.n	800a9ac <__ulp+0x3c>
 800a99a:	f1a2 0314 	sub.w	r3, r2, #20
 800a99e:	2b1e      	cmp	r3, #30
 800a9a0:	bfda      	itte	le
 800a9a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a9a6:	40da      	lsrle	r2, r3
 800a9a8:	2201      	movgt	r2, #1
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	ec41 0b10 	vmov	d0, r0, r1
 800a9b4:	b002      	add	sp, #8
 800a9b6:	4770      	bx	lr
 800a9b8:	7ff00000 	.word	0x7ff00000

0800a9bc <__b2d>:
 800a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	6906      	ldr	r6, [r0, #16]
 800a9c2:	f100 0814 	add.w	r8, r0, #20
 800a9c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a9ca:	1f37      	subs	r7, r6, #4
 800a9cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f7ff fd4b 	bl	800a46c <__hi0bits>
 800a9d6:	f1c0 0320 	rsb	r3, r0, #32
 800a9da:	280a      	cmp	r0, #10
 800a9dc:	600b      	str	r3, [r1, #0]
 800a9de:	491b      	ldr	r1, [pc, #108]	@ (800aa4c <__b2d+0x90>)
 800a9e0:	dc15      	bgt.n	800aa0e <__b2d+0x52>
 800a9e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a9e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a9ea:	45b8      	cmp	r8, r7
 800a9ec:	ea43 0501 	orr.w	r5, r3, r1
 800a9f0:	bf34      	ite	cc
 800a9f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9f6:	2300      	movcs	r3, #0
 800a9f8:	3015      	adds	r0, #21
 800a9fa:	fa02 f000 	lsl.w	r0, r2, r0
 800a9fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa02:	4303      	orrs	r3, r0
 800aa04:	461c      	mov	r4, r3
 800aa06:	ec45 4b10 	vmov	d0, r4, r5
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0e:	45b8      	cmp	r8, r7
 800aa10:	bf3a      	itte	cc
 800aa12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa16:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa1a:	2300      	movcs	r3, #0
 800aa1c:	380b      	subs	r0, #11
 800aa1e:	d012      	beq.n	800aa46 <__b2d+0x8a>
 800aa20:	f1c0 0120 	rsb	r1, r0, #32
 800aa24:	fa23 f401 	lsr.w	r4, r3, r1
 800aa28:	4082      	lsls	r2, r0
 800aa2a:	4322      	orrs	r2, r4
 800aa2c:	4547      	cmp	r7, r8
 800aa2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa32:	bf8c      	ite	hi
 800aa34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa38:	2200      	movls	r2, #0
 800aa3a:	4083      	lsls	r3, r0
 800aa3c:	40ca      	lsrs	r2, r1
 800aa3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa42:	4313      	orrs	r3, r2
 800aa44:	e7de      	b.n	800aa04 <__b2d+0x48>
 800aa46:	ea42 0501 	orr.w	r5, r2, r1
 800aa4a:	e7db      	b.n	800aa04 <__b2d+0x48>
 800aa4c:	3ff00000 	.word	0x3ff00000

0800aa50 <__d2b>:
 800aa50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa54:	460f      	mov	r7, r1
 800aa56:	2101      	movs	r1, #1
 800aa58:	ec59 8b10 	vmov	r8, r9, d0
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	f7ff fc13 	bl	800a288 <_Balloc>
 800aa62:	4604      	mov	r4, r0
 800aa64:	b930      	cbnz	r0, 800aa74 <__d2b+0x24>
 800aa66:	4602      	mov	r2, r0
 800aa68:	4b23      	ldr	r3, [pc, #140]	@ (800aaf8 <__d2b+0xa8>)
 800aa6a:	4824      	ldr	r0, [pc, #144]	@ (800aafc <__d2b+0xac>)
 800aa6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa70:	f000 fd38 	bl	800b4e4 <__assert_func>
 800aa74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa7c:	b10d      	cbz	r5, 800aa82 <__d2b+0x32>
 800aa7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	f1b8 0300 	subs.w	r3, r8, #0
 800aa88:	d023      	beq.n	800aad2 <__d2b+0x82>
 800aa8a:	4668      	mov	r0, sp
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	f7ff fd0c 	bl	800a4aa <__lo0bits>
 800aa92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa96:	b1d0      	cbz	r0, 800aace <__d2b+0x7e>
 800aa98:	f1c0 0320 	rsb	r3, r0, #32
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	40c2      	lsrs	r2, r0
 800aaa4:	6163      	str	r3, [r4, #20]
 800aaa6:	9201      	str	r2, [sp, #4]
 800aaa8:	9b01      	ldr	r3, [sp, #4]
 800aaaa:	61a3      	str	r3, [r4, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf0c      	ite	eq
 800aab0:	2201      	moveq	r2, #1
 800aab2:	2202      	movne	r2, #2
 800aab4:	6122      	str	r2, [r4, #16]
 800aab6:	b1a5      	cbz	r5, 800aae2 <__d2b+0x92>
 800aab8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aabc:	4405      	add	r5, r0
 800aabe:	603d      	str	r5, [r7, #0]
 800aac0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aac4:	6030      	str	r0, [r6, #0]
 800aac6:	4620      	mov	r0, r4
 800aac8:	b003      	add	sp, #12
 800aaca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aace:	6161      	str	r1, [r4, #20]
 800aad0:	e7ea      	b.n	800aaa8 <__d2b+0x58>
 800aad2:	a801      	add	r0, sp, #4
 800aad4:	f7ff fce9 	bl	800a4aa <__lo0bits>
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	6163      	str	r3, [r4, #20]
 800aadc:	3020      	adds	r0, #32
 800aade:	2201      	movs	r2, #1
 800aae0:	e7e8      	b.n	800aab4 <__d2b+0x64>
 800aae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aaea:	6038      	str	r0, [r7, #0]
 800aaec:	6918      	ldr	r0, [r3, #16]
 800aaee:	f7ff fcbd 	bl	800a46c <__hi0bits>
 800aaf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaf6:	e7e5      	b.n	800aac4 <__d2b+0x74>
 800aaf8:	0800b7fd 	.word	0x0800b7fd
 800aafc:	0800b86e 	.word	0x0800b86e

0800ab00 <__ratio>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	b085      	sub	sp, #20
 800ab06:	e9cd 1000 	strd	r1, r0, [sp]
 800ab0a:	a902      	add	r1, sp, #8
 800ab0c:	f7ff ff56 	bl	800a9bc <__b2d>
 800ab10:	9800      	ldr	r0, [sp, #0]
 800ab12:	a903      	add	r1, sp, #12
 800ab14:	ec55 4b10 	vmov	r4, r5, d0
 800ab18:	f7ff ff50 	bl	800a9bc <__b2d>
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	6919      	ldr	r1, [r3, #16]
 800ab20:	9b00      	ldr	r3, [sp, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	1ac9      	subs	r1, r1, r3
 800ab26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	ec5b ab10 	vmov	sl, fp, d0
 800ab30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfce      	itee	gt
 800ab38:	462a      	movgt	r2, r5
 800ab3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab3e:	465a      	movle	r2, fp
 800ab40:	462f      	mov	r7, r5
 800ab42:	46d9      	mov	r9, fp
 800ab44:	bfcc      	ite	gt
 800ab46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ab4e:	464b      	mov	r3, r9
 800ab50:	4652      	mov	r2, sl
 800ab52:	4620      	mov	r0, r4
 800ab54:	4639      	mov	r1, r7
 800ab56:	f7f5 fea1 	bl	800089c <__aeabi_ddiv>
 800ab5a:	ec41 0b10 	vmov	d0, r0, r1
 800ab5e:	b005      	add	sp, #20
 800ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab64 <__copybits>:
 800ab64:	3901      	subs	r1, #1
 800ab66:	b570      	push	{r4, r5, r6, lr}
 800ab68:	1149      	asrs	r1, r1, #5
 800ab6a:	6914      	ldr	r4, [r2, #16]
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	f102 0314 	add.w	r3, r2, #20
 800ab72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab7a:	1f05      	subs	r5, r0, #4
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d30c      	bcc.n	800ab9a <__copybits+0x36>
 800ab80:	1aa3      	subs	r3, r4, r2
 800ab82:	3b11      	subs	r3, #17
 800ab84:	f023 0303 	bic.w	r3, r3, #3
 800ab88:	3211      	adds	r2, #17
 800ab8a:	42a2      	cmp	r2, r4
 800ab8c:	bf88      	it	hi
 800ab8e:	2300      	movhi	r3, #0
 800ab90:	4418      	add	r0, r3
 800ab92:	2300      	movs	r3, #0
 800ab94:	4288      	cmp	r0, r1
 800ab96:	d305      	bcc.n	800aba4 <__copybits+0x40>
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800aba2:	e7eb      	b.n	800ab7c <__copybits+0x18>
 800aba4:	f840 3b04 	str.w	r3, [r0], #4
 800aba8:	e7f4      	b.n	800ab94 <__copybits+0x30>

0800abaa <__any_on>:
 800abaa:	f100 0214 	add.w	r2, r0, #20
 800abae:	6900      	ldr	r0, [r0, #16]
 800abb0:	114b      	asrs	r3, r1, #5
 800abb2:	4298      	cmp	r0, r3
 800abb4:	b510      	push	{r4, lr}
 800abb6:	db11      	blt.n	800abdc <__any_on+0x32>
 800abb8:	dd0a      	ble.n	800abd0 <__any_on+0x26>
 800abba:	f011 011f 	ands.w	r1, r1, #31
 800abbe:	d007      	beq.n	800abd0 <__any_on+0x26>
 800abc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abc4:	fa24 f001 	lsr.w	r0, r4, r1
 800abc8:	fa00 f101 	lsl.w	r1, r0, r1
 800abcc:	428c      	cmp	r4, r1
 800abce:	d10b      	bne.n	800abe8 <__any_on+0x3e>
 800abd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d803      	bhi.n	800abe0 <__any_on+0x36>
 800abd8:	2000      	movs	r0, #0
 800abda:	bd10      	pop	{r4, pc}
 800abdc:	4603      	mov	r3, r0
 800abde:	e7f7      	b.n	800abd0 <__any_on+0x26>
 800abe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe4:	2900      	cmp	r1, #0
 800abe6:	d0f5      	beq.n	800abd4 <__any_on+0x2a>
 800abe8:	2001      	movs	r0, #1
 800abea:	e7f6      	b.n	800abda <__any_on+0x30>

0800abec <_strtol_l.constprop.0>:
 800abec:	2b24      	cmp	r3, #36	@ 0x24
 800abee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf2:	4686      	mov	lr, r0
 800abf4:	4690      	mov	r8, r2
 800abf6:	d801      	bhi.n	800abfc <_strtol_l.constprop.0+0x10>
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d106      	bne.n	800ac0a <_strtol_l.constprop.0+0x1e>
 800abfc:	f7fe f85e 	bl	8008cbc <__errno>
 800ac00:	2316      	movs	r3, #22
 800ac02:	6003      	str	r3, [r0, #0]
 800ac04:	2000      	movs	r0, #0
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	4834      	ldr	r0, [pc, #208]	@ (800acdc <_strtol_l.constprop.0+0xf0>)
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	462a      	mov	r2, r5
 800ac10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac14:	5d06      	ldrb	r6, [r0, r4]
 800ac16:	f016 0608 	ands.w	r6, r6, #8
 800ac1a:	d1f8      	bne.n	800ac0e <_strtol_l.constprop.0+0x22>
 800ac1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac1e:	d12d      	bne.n	800ac7c <_strtol_l.constprop.0+0x90>
 800ac20:	782c      	ldrb	r4, [r5, #0]
 800ac22:	2601      	movs	r6, #1
 800ac24:	1c95      	adds	r5, r2, #2
 800ac26:	f033 0210 	bics.w	r2, r3, #16
 800ac2a:	d109      	bne.n	800ac40 <_strtol_l.constprop.0+0x54>
 800ac2c:	2c30      	cmp	r4, #48	@ 0x30
 800ac2e:	d12a      	bne.n	800ac86 <_strtol_l.constprop.0+0x9a>
 800ac30:	782a      	ldrb	r2, [r5, #0]
 800ac32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac36:	2a58      	cmp	r2, #88	@ 0x58
 800ac38:	d125      	bne.n	800ac86 <_strtol_l.constprop.0+0x9a>
 800ac3a:	786c      	ldrb	r4, [r5, #1]
 800ac3c:	2310      	movs	r3, #16
 800ac3e:	3502      	adds	r5, #2
 800ac40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac48:	2200      	movs	r2, #0
 800ac4a:	fbbc f9f3 	udiv	r9, ip, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac58:	2f09      	cmp	r7, #9
 800ac5a:	d81b      	bhi.n	800ac94 <_strtol_l.constprop.0+0xa8>
 800ac5c:	463c      	mov	r4, r7
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	dd27      	ble.n	800acb2 <_strtol_l.constprop.0+0xc6>
 800ac62:	1c57      	adds	r7, r2, #1
 800ac64:	d007      	beq.n	800ac76 <_strtol_l.constprop.0+0x8a>
 800ac66:	4581      	cmp	r9, r0
 800ac68:	d320      	bcc.n	800acac <_strtol_l.constprop.0+0xc0>
 800ac6a:	d101      	bne.n	800ac70 <_strtol_l.constprop.0+0x84>
 800ac6c:	45a2      	cmp	sl, r4
 800ac6e:	db1d      	blt.n	800acac <_strtol_l.constprop.0+0xc0>
 800ac70:	fb00 4003 	mla	r0, r0, r3, r4
 800ac74:	2201      	movs	r2, #1
 800ac76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac7a:	e7eb      	b.n	800ac54 <_strtol_l.constprop.0+0x68>
 800ac7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac7e:	bf04      	itt	eq
 800ac80:	782c      	ldrbeq	r4, [r5, #0]
 800ac82:	1c95      	addeq	r5, r2, #2
 800ac84:	e7cf      	b.n	800ac26 <_strtol_l.constprop.0+0x3a>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1da      	bne.n	800ac40 <_strtol_l.constprop.0+0x54>
 800ac8a:	2c30      	cmp	r4, #48	@ 0x30
 800ac8c:	bf0c      	ite	eq
 800ac8e:	2308      	moveq	r3, #8
 800ac90:	230a      	movne	r3, #10
 800ac92:	e7d5      	b.n	800ac40 <_strtol_l.constprop.0+0x54>
 800ac94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac98:	2f19      	cmp	r7, #25
 800ac9a:	d801      	bhi.n	800aca0 <_strtol_l.constprop.0+0xb4>
 800ac9c:	3c37      	subs	r4, #55	@ 0x37
 800ac9e:	e7de      	b.n	800ac5e <_strtol_l.constprop.0+0x72>
 800aca0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aca4:	2f19      	cmp	r7, #25
 800aca6:	d804      	bhi.n	800acb2 <_strtol_l.constprop.0+0xc6>
 800aca8:	3c57      	subs	r4, #87	@ 0x57
 800acaa:	e7d8      	b.n	800ac5e <_strtol_l.constprop.0+0x72>
 800acac:	f04f 32ff 	mov.w	r2, #4294967295
 800acb0:	e7e1      	b.n	800ac76 <_strtol_l.constprop.0+0x8a>
 800acb2:	1c53      	adds	r3, r2, #1
 800acb4:	d108      	bne.n	800acc8 <_strtol_l.constprop.0+0xdc>
 800acb6:	2322      	movs	r3, #34	@ 0x22
 800acb8:	f8ce 3000 	str.w	r3, [lr]
 800acbc:	4660      	mov	r0, ip
 800acbe:	f1b8 0f00 	cmp.w	r8, #0
 800acc2:	d0a0      	beq.n	800ac06 <_strtol_l.constprop.0+0x1a>
 800acc4:	1e69      	subs	r1, r5, #1
 800acc6:	e006      	b.n	800acd6 <_strtol_l.constprop.0+0xea>
 800acc8:	b106      	cbz	r6, 800accc <_strtol_l.constprop.0+0xe0>
 800acca:	4240      	negs	r0, r0
 800accc:	f1b8 0f00 	cmp.w	r8, #0
 800acd0:	d099      	beq.n	800ac06 <_strtol_l.constprop.0+0x1a>
 800acd2:	2a00      	cmp	r2, #0
 800acd4:	d1f6      	bne.n	800acc4 <_strtol_l.constprop.0+0xd8>
 800acd6:	f8c8 1000 	str.w	r1, [r8]
 800acda:	e794      	b.n	800ac06 <_strtol_l.constprop.0+0x1a>
 800acdc:	0800b9c9 	.word	0x0800b9c9

0800ace0 <_strtol_r>:
 800ace0:	f7ff bf84 	b.w	800abec <_strtol_l.constprop.0>

0800ace4 <__ascii_wctomb>:
 800ace4:	4603      	mov	r3, r0
 800ace6:	4608      	mov	r0, r1
 800ace8:	b141      	cbz	r1, 800acfc <__ascii_wctomb+0x18>
 800acea:	2aff      	cmp	r2, #255	@ 0xff
 800acec:	d904      	bls.n	800acf8 <__ascii_wctomb+0x14>
 800acee:	228a      	movs	r2, #138	@ 0x8a
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	4770      	bx	lr
 800acf8:	700a      	strb	r2, [r1, #0]
 800acfa:	2001      	movs	r0, #1
 800acfc:	4770      	bx	lr

0800acfe <__ssputs_r>:
 800acfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad02:	688e      	ldr	r6, [r1, #8]
 800ad04:	461f      	mov	r7, r3
 800ad06:	42be      	cmp	r6, r7
 800ad08:	680b      	ldr	r3, [r1, #0]
 800ad0a:	4682      	mov	sl, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	4690      	mov	r8, r2
 800ad10:	d82d      	bhi.n	800ad6e <__ssputs_r+0x70>
 800ad12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad1a:	d026      	beq.n	800ad6a <__ssputs_r+0x6c>
 800ad1c:	6965      	ldr	r5, [r4, #20]
 800ad1e:	6909      	ldr	r1, [r1, #16]
 800ad20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad24:	eba3 0901 	sub.w	r9, r3, r1
 800ad28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad2c:	1c7b      	adds	r3, r7, #1
 800ad2e:	444b      	add	r3, r9
 800ad30:	106d      	asrs	r5, r5, #1
 800ad32:	429d      	cmp	r5, r3
 800ad34:	bf38      	it	cc
 800ad36:	461d      	movcc	r5, r3
 800ad38:	0553      	lsls	r3, r2, #21
 800ad3a:	d527      	bpl.n	800ad8c <__ssputs_r+0x8e>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7ff fa05 	bl	800a14c <_malloc_r>
 800ad42:	4606      	mov	r6, r0
 800ad44:	b360      	cbz	r0, 800ada0 <__ssputs_r+0xa2>
 800ad46:	6921      	ldr	r1, [r4, #16]
 800ad48:	464a      	mov	r2, r9
 800ad4a:	f7fd ffe4 	bl	8008d16 <memcpy>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad58:	81a3      	strh	r3, [r4, #12]
 800ad5a:	6126      	str	r6, [r4, #16]
 800ad5c:	6165      	str	r5, [r4, #20]
 800ad5e:	444e      	add	r6, r9
 800ad60:	eba5 0509 	sub.w	r5, r5, r9
 800ad64:	6026      	str	r6, [r4, #0]
 800ad66:	60a5      	str	r5, [r4, #8]
 800ad68:	463e      	mov	r6, r7
 800ad6a:	42be      	cmp	r6, r7
 800ad6c:	d900      	bls.n	800ad70 <__ssputs_r+0x72>
 800ad6e:	463e      	mov	r6, r7
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	4632      	mov	r2, r6
 800ad74:	4641      	mov	r1, r8
 800ad76:	f000 fb69 	bl	800b44c <memmove>
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	1b9b      	subs	r3, r3, r6
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	4433      	add	r3, r6
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	2000      	movs	r0, #0
 800ad88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	f000 fbdb 	bl	800b548 <_realloc_r>
 800ad92:	4606      	mov	r6, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d1e0      	bne.n	800ad5a <__ssputs_r+0x5c>
 800ad98:	6921      	ldr	r1, [r4, #16]
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	f7fe fe28 	bl	80099f0 <_free_r>
 800ada0:	230c      	movs	r3, #12
 800ada2:	f8ca 3000 	str.w	r3, [sl]
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	f04f 30ff 	mov.w	r0, #4294967295
 800adb2:	e7e9      	b.n	800ad88 <__ssputs_r+0x8a>

0800adb4 <_svfiprintf_r>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	4698      	mov	r8, r3
 800adba:	898b      	ldrh	r3, [r1, #12]
 800adbc:	061b      	lsls	r3, r3, #24
 800adbe:	b09d      	sub	sp, #116	@ 0x74
 800adc0:	4607      	mov	r7, r0
 800adc2:	460d      	mov	r5, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	d510      	bpl.n	800adea <_svfiprintf_r+0x36>
 800adc8:	690b      	ldr	r3, [r1, #16]
 800adca:	b973      	cbnz	r3, 800adea <_svfiprintf_r+0x36>
 800adcc:	2140      	movs	r1, #64	@ 0x40
 800adce:	f7ff f9bd 	bl	800a14c <_malloc_r>
 800add2:	6028      	str	r0, [r5, #0]
 800add4:	6128      	str	r0, [r5, #16]
 800add6:	b930      	cbnz	r0, 800ade6 <_svfiprintf_r+0x32>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	f04f 30ff 	mov.w	r0, #4294967295
 800ade0:	b01d      	add	sp, #116	@ 0x74
 800ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade6:	2340      	movs	r3, #64	@ 0x40
 800ade8:	616b      	str	r3, [r5, #20]
 800adea:	2300      	movs	r3, #0
 800adec:	9309      	str	r3, [sp, #36]	@ 0x24
 800adee:	2320      	movs	r3, #32
 800adf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf8:	2330      	movs	r3, #48	@ 0x30
 800adfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af98 <_svfiprintf_r+0x1e4>
 800adfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae02:	f04f 0901 	mov.w	r9, #1
 800ae06:	4623      	mov	r3, r4
 800ae08:	469a      	mov	sl, r3
 800ae0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae0e:	b10a      	cbz	r2, 800ae14 <_svfiprintf_r+0x60>
 800ae10:	2a25      	cmp	r2, #37	@ 0x25
 800ae12:	d1f9      	bne.n	800ae08 <_svfiprintf_r+0x54>
 800ae14:	ebba 0b04 	subs.w	fp, sl, r4
 800ae18:	d00b      	beq.n	800ae32 <_svfiprintf_r+0x7e>
 800ae1a:	465b      	mov	r3, fp
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4638      	mov	r0, r7
 800ae22:	f7ff ff6c 	bl	800acfe <__ssputs_r>
 800ae26:	3001      	adds	r0, #1
 800ae28:	f000 80a7 	beq.w	800af7a <_svfiprintf_r+0x1c6>
 800ae2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae2e:	445a      	add	r2, fp
 800ae30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae32:	f89a 3000 	ldrb.w	r3, [sl]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 809f 	beq.w	800af7a <_svfiprintf_r+0x1c6>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae46:	f10a 0a01 	add.w	sl, sl, #1
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	9307      	str	r3, [sp, #28]
 800ae4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae52:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae54:	4654      	mov	r4, sl
 800ae56:	2205      	movs	r2, #5
 800ae58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5c:	484e      	ldr	r0, [pc, #312]	@ (800af98 <_svfiprintf_r+0x1e4>)
 800ae5e:	f7f5 f9df 	bl	8000220 <memchr>
 800ae62:	9a04      	ldr	r2, [sp, #16]
 800ae64:	b9d8      	cbnz	r0, 800ae9e <_svfiprintf_r+0xea>
 800ae66:	06d0      	lsls	r0, r2, #27
 800ae68:	bf44      	itt	mi
 800ae6a:	2320      	movmi	r3, #32
 800ae6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae70:	0711      	lsls	r1, r2, #28
 800ae72:	bf44      	itt	mi
 800ae74:	232b      	movmi	r3, #43	@ 0x2b
 800ae76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae80:	d015      	beq.n	800aeae <_svfiprintf_r+0xfa>
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	4654      	mov	r4, sl
 800ae86:	2000      	movs	r0, #0
 800ae88:	f04f 0c0a 	mov.w	ip, #10
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae92:	3b30      	subs	r3, #48	@ 0x30
 800ae94:	2b09      	cmp	r3, #9
 800ae96:	d94b      	bls.n	800af30 <_svfiprintf_r+0x17c>
 800ae98:	b1b0      	cbz	r0, 800aec8 <_svfiprintf_r+0x114>
 800ae9a:	9207      	str	r2, [sp, #28]
 800ae9c:	e014      	b.n	800aec8 <_svfiprintf_r+0x114>
 800ae9e:	eba0 0308 	sub.w	r3, r0, r8
 800aea2:	fa09 f303 	lsl.w	r3, r9, r3
 800aea6:	4313      	orrs	r3, r2
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	46a2      	mov	sl, r4
 800aeac:	e7d2      	b.n	800ae54 <_svfiprintf_r+0xa0>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	1d19      	adds	r1, r3, #4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9103      	str	r1, [sp, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bfbb      	ittet	lt
 800aeba:	425b      	neglt	r3, r3
 800aebc:	f042 0202 	orrlt.w	r2, r2, #2
 800aec0:	9307      	strge	r3, [sp, #28]
 800aec2:	9307      	strlt	r3, [sp, #28]
 800aec4:	bfb8      	it	lt
 800aec6:	9204      	strlt	r2, [sp, #16]
 800aec8:	7823      	ldrb	r3, [r4, #0]
 800aeca:	2b2e      	cmp	r3, #46	@ 0x2e
 800aecc:	d10a      	bne.n	800aee4 <_svfiprintf_r+0x130>
 800aece:	7863      	ldrb	r3, [r4, #1]
 800aed0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aed2:	d132      	bne.n	800af3a <_svfiprintf_r+0x186>
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	1d1a      	adds	r2, r3, #4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	9203      	str	r2, [sp, #12]
 800aedc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aee0:	3402      	adds	r4, #2
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afa8 <_svfiprintf_r+0x1f4>
 800aee8:	7821      	ldrb	r1, [r4, #0]
 800aeea:	2203      	movs	r2, #3
 800aeec:	4650      	mov	r0, sl
 800aeee:	f7f5 f997 	bl	8000220 <memchr>
 800aef2:	b138      	cbz	r0, 800af04 <_svfiprintf_r+0x150>
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	eba0 000a 	sub.w	r0, r0, sl
 800aefa:	2240      	movs	r2, #64	@ 0x40
 800aefc:	4082      	lsls	r2, r0
 800aefe:	4313      	orrs	r3, r2
 800af00:	3401      	adds	r4, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af08:	4824      	ldr	r0, [pc, #144]	@ (800af9c <_svfiprintf_r+0x1e8>)
 800af0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af0e:	2206      	movs	r2, #6
 800af10:	f7f5 f986 	bl	8000220 <memchr>
 800af14:	2800      	cmp	r0, #0
 800af16:	d036      	beq.n	800af86 <_svfiprintf_r+0x1d2>
 800af18:	4b21      	ldr	r3, [pc, #132]	@ (800afa0 <_svfiprintf_r+0x1ec>)
 800af1a:	bb1b      	cbnz	r3, 800af64 <_svfiprintf_r+0x1b0>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2a:	4433      	add	r3, r6
 800af2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af2e:	e76a      	b.n	800ae06 <_svfiprintf_r+0x52>
 800af30:	fb0c 3202 	mla	r2, ip, r2, r3
 800af34:	460c      	mov	r4, r1
 800af36:	2001      	movs	r0, #1
 800af38:	e7a8      	b.n	800ae8c <_svfiprintf_r+0xd8>
 800af3a:	2300      	movs	r3, #0
 800af3c:	3401      	adds	r4, #1
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0c0a 	mov.w	ip, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4c:	3a30      	subs	r2, #48	@ 0x30
 800af4e:	2a09      	cmp	r2, #9
 800af50:	d903      	bls.n	800af5a <_svfiprintf_r+0x1a6>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0c6      	beq.n	800aee4 <_svfiprintf_r+0x130>
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	e7c4      	b.n	800aee4 <_svfiprintf_r+0x130>
 800af5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af5e:	4604      	mov	r4, r0
 800af60:	2301      	movs	r3, #1
 800af62:	e7f0      	b.n	800af46 <_svfiprintf_r+0x192>
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b0e      	ldr	r3, [pc, #56]	@ (800afa4 <_svfiprintf_r+0x1f0>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4638      	mov	r0, r7
 800af70:	f7fc fda0 	bl	8007ab4 <_printf_float>
 800af74:	1c42      	adds	r2, r0, #1
 800af76:	4606      	mov	r6, r0
 800af78:	d1d6      	bne.n	800af28 <_svfiprintf_r+0x174>
 800af7a:	89ab      	ldrh	r3, [r5, #12]
 800af7c:	065b      	lsls	r3, r3, #25
 800af7e:	f53f af2d 	bmi.w	800addc <_svfiprintf_r+0x28>
 800af82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af84:	e72c      	b.n	800ade0 <_svfiprintf_r+0x2c>
 800af86:	ab03      	add	r3, sp, #12
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	462a      	mov	r2, r5
 800af8c:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <_svfiprintf_r+0x1f0>)
 800af8e:	a904      	add	r1, sp, #16
 800af90:	4638      	mov	r0, r7
 800af92:	f7fd f827 	bl	8007fe4 <_printf_i>
 800af96:	e7ed      	b.n	800af74 <_svfiprintf_r+0x1c0>
 800af98:	0800bac9 	.word	0x0800bac9
 800af9c:	0800bad3 	.word	0x0800bad3
 800afa0:	08007ab5 	.word	0x08007ab5
 800afa4:	0800acff 	.word	0x0800acff
 800afa8:	0800bacf 	.word	0x0800bacf

0800afac <__sfputc_r>:
 800afac:	6893      	ldr	r3, [r2, #8]
 800afae:	3b01      	subs	r3, #1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	b410      	push	{r4}
 800afb4:	6093      	str	r3, [r2, #8]
 800afb6:	da08      	bge.n	800afca <__sfputc_r+0x1e>
 800afb8:	6994      	ldr	r4, [r2, #24]
 800afba:	42a3      	cmp	r3, r4
 800afbc:	db01      	blt.n	800afc2 <__sfputc_r+0x16>
 800afbe:	290a      	cmp	r1, #10
 800afc0:	d103      	bne.n	800afca <__sfputc_r+0x1e>
 800afc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afc6:	f7fd bd80 	b.w	8008aca <__swbuf_r>
 800afca:	6813      	ldr	r3, [r2, #0]
 800afcc:	1c58      	adds	r0, r3, #1
 800afce:	6010      	str	r0, [r2, #0]
 800afd0:	7019      	strb	r1, [r3, #0]
 800afd2:	4608      	mov	r0, r1
 800afd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <__sfputs_r>:
 800afda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	4614      	mov	r4, r2
 800afe2:	18d5      	adds	r5, r2, r3
 800afe4:	42ac      	cmp	r4, r5
 800afe6:	d101      	bne.n	800afec <__sfputs_r+0x12>
 800afe8:	2000      	movs	r0, #0
 800afea:	e007      	b.n	800affc <__sfputs_r+0x22>
 800afec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff0:	463a      	mov	r2, r7
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff ffda 	bl	800afac <__sfputc_r>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d1f3      	bne.n	800afe4 <__sfputs_r+0xa>
 800affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b000 <_vfiprintf_r>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	460d      	mov	r5, r1
 800b006:	b09d      	sub	sp, #116	@ 0x74
 800b008:	4614      	mov	r4, r2
 800b00a:	4698      	mov	r8, r3
 800b00c:	4606      	mov	r6, r0
 800b00e:	b118      	cbz	r0, 800b018 <_vfiprintf_r+0x18>
 800b010:	6a03      	ldr	r3, [r0, #32]
 800b012:	b90b      	cbnz	r3, 800b018 <_vfiprintf_r+0x18>
 800b014:	f7fd fba6 	bl	8008764 <__sinit>
 800b018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b01a:	07d9      	lsls	r1, r3, #31
 800b01c:	d405      	bmi.n	800b02a <_vfiprintf_r+0x2a>
 800b01e:	89ab      	ldrh	r3, [r5, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d402      	bmi.n	800b02a <_vfiprintf_r+0x2a>
 800b024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b026:	f7fd fe74 	bl	8008d12 <__retarget_lock_acquire_recursive>
 800b02a:	89ab      	ldrh	r3, [r5, #12]
 800b02c:	071b      	lsls	r3, r3, #28
 800b02e:	d501      	bpl.n	800b034 <_vfiprintf_r+0x34>
 800b030:	692b      	ldr	r3, [r5, #16]
 800b032:	b99b      	cbnz	r3, 800b05c <_vfiprintf_r+0x5c>
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f7fd fd86 	bl	8008b48 <__swsetup_r>
 800b03c:	b170      	cbz	r0, 800b05c <_vfiprintf_r+0x5c>
 800b03e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b040:	07dc      	lsls	r4, r3, #31
 800b042:	d504      	bpl.n	800b04e <_vfiprintf_r+0x4e>
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	b01d      	add	sp, #116	@ 0x74
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	0598      	lsls	r0, r3, #22
 800b052:	d4f7      	bmi.n	800b044 <_vfiprintf_r+0x44>
 800b054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b056:	f7fd fe5d 	bl	8008d14 <__retarget_lock_release_recursive>
 800b05a:	e7f3      	b.n	800b044 <_vfiprintf_r+0x44>
 800b05c:	2300      	movs	r3, #0
 800b05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b060:	2320      	movs	r3, #32
 800b062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b066:	f8cd 800c 	str.w	r8, [sp, #12]
 800b06a:	2330      	movs	r3, #48	@ 0x30
 800b06c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b21c <_vfiprintf_r+0x21c>
 800b070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b074:	f04f 0901 	mov.w	r9, #1
 800b078:	4623      	mov	r3, r4
 800b07a:	469a      	mov	sl, r3
 800b07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b080:	b10a      	cbz	r2, 800b086 <_vfiprintf_r+0x86>
 800b082:	2a25      	cmp	r2, #37	@ 0x25
 800b084:	d1f9      	bne.n	800b07a <_vfiprintf_r+0x7a>
 800b086:	ebba 0b04 	subs.w	fp, sl, r4
 800b08a:	d00b      	beq.n	800b0a4 <_vfiprintf_r+0xa4>
 800b08c:	465b      	mov	r3, fp
 800b08e:	4622      	mov	r2, r4
 800b090:	4629      	mov	r1, r5
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff ffa1 	bl	800afda <__sfputs_r>
 800b098:	3001      	adds	r0, #1
 800b09a:	f000 80a7 	beq.w	800b1ec <_vfiprintf_r+0x1ec>
 800b09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a0:	445a      	add	r2, fp
 800b0a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 809f 	beq.w	800b1ec <_vfiprintf_r+0x1ec>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0b8:	f10a 0a01 	add.w	sl, sl, #1
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	9307      	str	r3, [sp, #28]
 800b0c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0c6:	4654      	mov	r4, sl
 800b0c8:	2205      	movs	r2, #5
 800b0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ce:	4853      	ldr	r0, [pc, #332]	@ (800b21c <_vfiprintf_r+0x21c>)
 800b0d0:	f7f5 f8a6 	bl	8000220 <memchr>
 800b0d4:	9a04      	ldr	r2, [sp, #16]
 800b0d6:	b9d8      	cbnz	r0, 800b110 <_vfiprintf_r+0x110>
 800b0d8:	06d1      	lsls	r1, r2, #27
 800b0da:	bf44      	itt	mi
 800b0dc:	2320      	movmi	r3, #32
 800b0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0e2:	0713      	lsls	r3, r2, #28
 800b0e4:	bf44      	itt	mi
 800b0e6:	232b      	movmi	r3, #43	@ 0x2b
 800b0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0f2:	d015      	beq.n	800b120 <_vfiprintf_r+0x120>
 800b0f4:	9a07      	ldr	r2, [sp, #28]
 800b0f6:	4654      	mov	r4, sl
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	f04f 0c0a 	mov.w	ip, #10
 800b0fe:	4621      	mov	r1, r4
 800b100:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b104:	3b30      	subs	r3, #48	@ 0x30
 800b106:	2b09      	cmp	r3, #9
 800b108:	d94b      	bls.n	800b1a2 <_vfiprintf_r+0x1a2>
 800b10a:	b1b0      	cbz	r0, 800b13a <_vfiprintf_r+0x13a>
 800b10c:	9207      	str	r2, [sp, #28]
 800b10e:	e014      	b.n	800b13a <_vfiprintf_r+0x13a>
 800b110:	eba0 0308 	sub.w	r3, r0, r8
 800b114:	fa09 f303 	lsl.w	r3, r9, r3
 800b118:	4313      	orrs	r3, r2
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	46a2      	mov	sl, r4
 800b11e:	e7d2      	b.n	800b0c6 <_vfiprintf_r+0xc6>
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	1d19      	adds	r1, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	9103      	str	r1, [sp, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfbb      	ittet	lt
 800b12c:	425b      	neglt	r3, r3
 800b12e:	f042 0202 	orrlt.w	r2, r2, #2
 800b132:	9307      	strge	r3, [sp, #28]
 800b134:	9307      	strlt	r3, [sp, #28]
 800b136:	bfb8      	it	lt
 800b138:	9204      	strlt	r2, [sp, #16]
 800b13a:	7823      	ldrb	r3, [r4, #0]
 800b13c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b13e:	d10a      	bne.n	800b156 <_vfiprintf_r+0x156>
 800b140:	7863      	ldrb	r3, [r4, #1]
 800b142:	2b2a      	cmp	r3, #42	@ 0x2a
 800b144:	d132      	bne.n	800b1ac <_vfiprintf_r+0x1ac>
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	1d1a      	adds	r2, r3, #4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	9203      	str	r2, [sp, #12]
 800b14e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b152:	3402      	adds	r4, #2
 800b154:	9305      	str	r3, [sp, #20]
 800b156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b22c <_vfiprintf_r+0x22c>
 800b15a:	7821      	ldrb	r1, [r4, #0]
 800b15c:	2203      	movs	r2, #3
 800b15e:	4650      	mov	r0, sl
 800b160:	f7f5 f85e 	bl	8000220 <memchr>
 800b164:	b138      	cbz	r0, 800b176 <_vfiprintf_r+0x176>
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	eba0 000a 	sub.w	r0, r0, sl
 800b16c:	2240      	movs	r2, #64	@ 0x40
 800b16e:	4082      	lsls	r2, r0
 800b170:	4313      	orrs	r3, r2
 800b172:	3401      	adds	r4, #1
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17a:	4829      	ldr	r0, [pc, #164]	@ (800b220 <_vfiprintf_r+0x220>)
 800b17c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b180:	2206      	movs	r2, #6
 800b182:	f7f5 f84d 	bl	8000220 <memchr>
 800b186:	2800      	cmp	r0, #0
 800b188:	d03f      	beq.n	800b20a <_vfiprintf_r+0x20a>
 800b18a:	4b26      	ldr	r3, [pc, #152]	@ (800b224 <_vfiprintf_r+0x224>)
 800b18c:	bb1b      	cbnz	r3, 800b1d6 <_vfiprintf_r+0x1d6>
 800b18e:	9b03      	ldr	r3, [sp, #12]
 800b190:	3307      	adds	r3, #7
 800b192:	f023 0307 	bic.w	r3, r3, #7
 800b196:	3308      	adds	r3, #8
 800b198:	9303      	str	r3, [sp, #12]
 800b19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19c:	443b      	add	r3, r7
 800b19e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a0:	e76a      	b.n	800b078 <_vfiprintf_r+0x78>
 800b1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	e7a8      	b.n	800b0fe <_vfiprintf_r+0xfe>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	3401      	adds	r4, #1
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	f04f 0c0a 	mov.w	ip, #10
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1be:	3a30      	subs	r2, #48	@ 0x30
 800b1c0:	2a09      	cmp	r2, #9
 800b1c2:	d903      	bls.n	800b1cc <_vfiprintf_r+0x1cc>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d0c6      	beq.n	800b156 <_vfiprintf_r+0x156>
 800b1c8:	9105      	str	r1, [sp, #20]
 800b1ca:	e7c4      	b.n	800b156 <_vfiprintf_r+0x156>
 800b1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7f0      	b.n	800b1b8 <_vfiprintf_r+0x1b8>
 800b1d6:	ab03      	add	r3, sp, #12
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	462a      	mov	r2, r5
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <_vfiprintf_r+0x228>)
 800b1de:	a904      	add	r1, sp, #16
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7fc fc67 	bl	8007ab4 <_printf_float>
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	1c78      	adds	r0, r7, #1
 800b1ea:	d1d6      	bne.n	800b19a <_vfiprintf_r+0x19a>
 800b1ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1ee:	07d9      	lsls	r1, r3, #31
 800b1f0:	d405      	bmi.n	800b1fe <_vfiprintf_r+0x1fe>
 800b1f2:	89ab      	ldrh	r3, [r5, #12]
 800b1f4:	059a      	lsls	r2, r3, #22
 800b1f6:	d402      	bmi.n	800b1fe <_vfiprintf_r+0x1fe>
 800b1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1fa:	f7fd fd8b 	bl	8008d14 <__retarget_lock_release_recursive>
 800b1fe:	89ab      	ldrh	r3, [r5, #12]
 800b200:	065b      	lsls	r3, r3, #25
 800b202:	f53f af1f 	bmi.w	800b044 <_vfiprintf_r+0x44>
 800b206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b208:	e71e      	b.n	800b048 <_vfiprintf_r+0x48>
 800b20a:	ab03      	add	r3, sp, #12
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	462a      	mov	r2, r5
 800b210:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <_vfiprintf_r+0x228>)
 800b212:	a904      	add	r1, sp, #16
 800b214:	4630      	mov	r0, r6
 800b216:	f7fc fee5 	bl	8007fe4 <_printf_i>
 800b21a:	e7e4      	b.n	800b1e6 <_vfiprintf_r+0x1e6>
 800b21c:	0800bac9 	.word	0x0800bac9
 800b220:	0800bad3 	.word	0x0800bad3
 800b224:	08007ab5 	.word	0x08007ab5
 800b228:	0800afdb 	.word	0x0800afdb
 800b22c:	0800bacf 	.word	0x0800bacf

0800b230 <__sflush_r>:
 800b230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b238:	0716      	lsls	r6, r2, #28
 800b23a:	4605      	mov	r5, r0
 800b23c:	460c      	mov	r4, r1
 800b23e:	d454      	bmi.n	800b2ea <__sflush_r+0xba>
 800b240:	684b      	ldr	r3, [r1, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dc02      	bgt.n	800b24c <__sflush_r+0x1c>
 800b246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b248:	2b00      	cmp	r3, #0
 800b24a:	dd48      	ble.n	800b2de <__sflush_r+0xae>
 800b24c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b24e:	2e00      	cmp	r6, #0
 800b250:	d045      	beq.n	800b2de <__sflush_r+0xae>
 800b252:	2300      	movs	r3, #0
 800b254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b258:	682f      	ldr	r7, [r5, #0]
 800b25a:	6a21      	ldr	r1, [r4, #32]
 800b25c:	602b      	str	r3, [r5, #0]
 800b25e:	d030      	beq.n	800b2c2 <__sflush_r+0x92>
 800b260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	0759      	lsls	r1, r3, #29
 800b266:	d505      	bpl.n	800b274 <__sflush_r+0x44>
 800b268:	6863      	ldr	r3, [r4, #4]
 800b26a:	1ad2      	subs	r2, r2, r3
 800b26c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b26e:	b10b      	cbz	r3, 800b274 <__sflush_r+0x44>
 800b270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b272:	1ad2      	subs	r2, r2, r3
 800b274:	2300      	movs	r3, #0
 800b276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b278:	6a21      	ldr	r1, [r4, #32]
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b0      	blx	r6
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	d106      	bne.n	800b292 <__sflush_r+0x62>
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	291d      	cmp	r1, #29
 800b288:	d82b      	bhi.n	800b2e2 <__sflush_r+0xb2>
 800b28a:	4a2a      	ldr	r2, [pc, #168]	@ (800b334 <__sflush_r+0x104>)
 800b28c:	410a      	asrs	r2, r1
 800b28e:	07d6      	lsls	r6, r2, #31
 800b290:	d427      	bmi.n	800b2e2 <__sflush_r+0xb2>
 800b292:	2200      	movs	r2, #0
 800b294:	6062      	str	r2, [r4, #4]
 800b296:	04d9      	lsls	r1, r3, #19
 800b298:	6922      	ldr	r2, [r4, #16]
 800b29a:	6022      	str	r2, [r4, #0]
 800b29c:	d504      	bpl.n	800b2a8 <__sflush_r+0x78>
 800b29e:	1c42      	adds	r2, r0, #1
 800b2a0:	d101      	bne.n	800b2a6 <__sflush_r+0x76>
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	b903      	cbnz	r3, 800b2a8 <__sflush_r+0x78>
 800b2a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2aa:	602f      	str	r7, [r5, #0]
 800b2ac:	b1b9      	cbz	r1, 800b2de <__sflush_r+0xae>
 800b2ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b2:	4299      	cmp	r1, r3
 800b2b4:	d002      	beq.n	800b2bc <__sflush_r+0x8c>
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f7fe fb9a 	bl	80099f0 <_free_r>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c0:	e00d      	b.n	800b2de <__sflush_r+0xae>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b0      	blx	r6
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	1c50      	adds	r0, r2, #1
 800b2cc:	d1c9      	bne.n	800b262 <__sflush_r+0x32>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0c6      	beq.n	800b262 <__sflush_r+0x32>
 800b2d4:	2b1d      	cmp	r3, #29
 800b2d6:	d001      	beq.n	800b2dc <__sflush_r+0xac>
 800b2d8:	2b16      	cmp	r3, #22
 800b2da:	d11e      	bne.n	800b31a <__sflush_r+0xea>
 800b2dc:	602f      	str	r7, [r5, #0]
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e022      	b.n	800b328 <__sflush_r+0xf8>
 800b2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2e6:	b21b      	sxth	r3, r3
 800b2e8:	e01b      	b.n	800b322 <__sflush_r+0xf2>
 800b2ea:	690f      	ldr	r7, [r1, #16]
 800b2ec:	2f00      	cmp	r7, #0
 800b2ee:	d0f6      	beq.n	800b2de <__sflush_r+0xae>
 800b2f0:	0793      	lsls	r3, r2, #30
 800b2f2:	680e      	ldr	r6, [r1, #0]
 800b2f4:	bf08      	it	eq
 800b2f6:	694b      	ldreq	r3, [r1, #20]
 800b2f8:	600f      	str	r7, [r1, #0]
 800b2fa:	bf18      	it	ne
 800b2fc:	2300      	movne	r3, #0
 800b2fe:	eba6 0807 	sub.w	r8, r6, r7
 800b302:	608b      	str	r3, [r1, #8]
 800b304:	f1b8 0f00 	cmp.w	r8, #0
 800b308:	dde9      	ble.n	800b2de <__sflush_r+0xae>
 800b30a:	6a21      	ldr	r1, [r4, #32]
 800b30c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b30e:	4643      	mov	r3, r8
 800b310:	463a      	mov	r2, r7
 800b312:	4628      	mov	r0, r5
 800b314:	47b0      	blx	r6
 800b316:	2800      	cmp	r0, #0
 800b318:	dc08      	bgt.n	800b32c <__sflush_r+0xfc>
 800b31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	4407      	add	r7, r0
 800b32e:	eba8 0800 	sub.w	r8, r8, r0
 800b332:	e7e7      	b.n	800b304 <__sflush_r+0xd4>
 800b334:	dfbffffe 	.word	0xdfbffffe

0800b338 <_fflush_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	690b      	ldr	r3, [r1, #16]
 800b33c:	4605      	mov	r5, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	b913      	cbnz	r3, 800b348 <_fflush_r+0x10>
 800b342:	2500      	movs	r5, #0
 800b344:	4628      	mov	r0, r5
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	b118      	cbz	r0, 800b352 <_fflush_r+0x1a>
 800b34a:	6a03      	ldr	r3, [r0, #32]
 800b34c:	b90b      	cbnz	r3, 800b352 <_fflush_r+0x1a>
 800b34e:	f7fd fa09 	bl	8008764 <__sinit>
 800b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f3      	beq.n	800b342 <_fflush_r+0xa>
 800b35a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b35c:	07d0      	lsls	r0, r2, #31
 800b35e:	d404      	bmi.n	800b36a <_fflush_r+0x32>
 800b360:	0599      	lsls	r1, r3, #22
 800b362:	d402      	bmi.n	800b36a <_fflush_r+0x32>
 800b364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b366:	f7fd fcd4 	bl	8008d12 <__retarget_lock_acquire_recursive>
 800b36a:	4628      	mov	r0, r5
 800b36c:	4621      	mov	r1, r4
 800b36e:	f7ff ff5f 	bl	800b230 <__sflush_r>
 800b372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b374:	07da      	lsls	r2, r3, #31
 800b376:	4605      	mov	r5, r0
 800b378:	d4e4      	bmi.n	800b344 <_fflush_r+0xc>
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	059b      	lsls	r3, r3, #22
 800b37e:	d4e1      	bmi.n	800b344 <_fflush_r+0xc>
 800b380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b382:	f7fd fcc7 	bl	8008d14 <__retarget_lock_release_recursive>
 800b386:	e7dd      	b.n	800b344 <_fflush_r+0xc>

0800b388 <__swhatbuf_r>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	2900      	cmp	r1, #0
 800b392:	b096      	sub	sp, #88	@ 0x58
 800b394:	4615      	mov	r5, r2
 800b396:	461e      	mov	r6, r3
 800b398:	da0d      	bge.n	800b3b6 <__swhatbuf_r+0x2e>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3a0:	f04f 0100 	mov.w	r1, #0
 800b3a4:	bf14      	ite	ne
 800b3a6:	2340      	movne	r3, #64	@ 0x40
 800b3a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	6031      	str	r1, [r6, #0]
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	b016      	add	sp, #88	@ 0x58
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
 800b3b6:	466a      	mov	r2, sp
 800b3b8:	f000 f862 	bl	800b480 <_fstat_r>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	dbec      	blt.n	800b39a <__swhatbuf_r+0x12>
 800b3c0:	9901      	ldr	r1, [sp, #4]
 800b3c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3ca:	4259      	negs	r1, r3
 800b3cc:	4159      	adcs	r1, r3
 800b3ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3d2:	e7eb      	b.n	800b3ac <__swhatbuf_r+0x24>

0800b3d4 <__smakebuf_r>:
 800b3d4:	898b      	ldrh	r3, [r1, #12]
 800b3d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3d8:	079d      	lsls	r5, r3, #30
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460c      	mov	r4, r1
 800b3de:	d507      	bpl.n	800b3f0 <__smakebuf_r+0x1c>
 800b3e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	6163      	str	r3, [r4, #20]
 800b3ec:	b003      	add	sp, #12
 800b3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f0:	ab01      	add	r3, sp, #4
 800b3f2:	466a      	mov	r2, sp
 800b3f4:	f7ff ffc8 	bl	800b388 <__swhatbuf_r>
 800b3f8:	9f00      	ldr	r7, [sp, #0]
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7fe fea4 	bl	800a14c <_malloc_r>
 800b404:	b948      	cbnz	r0, 800b41a <__smakebuf_r+0x46>
 800b406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40a:	059a      	lsls	r2, r3, #22
 800b40c:	d4ee      	bmi.n	800b3ec <__smakebuf_r+0x18>
 800b40e:	f023 0303 	bic.w	r3, r3, #3
 800b412:	f043 0302 	orr.w	r3, r3, #2
 800b416:	81a3      	strh	r3, [r4, #12]
 800b418:	e7e2      	b.n	800b3e0 <__smakebuf_r+0xc>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	6020      	str	r0, [r4, #0]
 800b41e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b422:	81a3      	strh	r3, [r4, #12]
 800b424:	9b01      	ldr	r3, [sp, #4]
 800b426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b42a:	b15b      	cbz	r3, 800b444 <__smakebuf_r+0x70>
 800b42c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b430:	4630      	mov	r0, r6
 800b432:	f000 f837 	bl	800b4a4 <_isatty_r>
 800b436:	b128      	cbz	r0, 800b444 <__smakebuf_r+0x70>
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	f023 0303 	bic.w	r3, r3, #3
 800b43e:	f043 0301 	orr.w	r3, r3, #1
 800b442:	81a3      	strh	r3, [r4, #12]
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	431d      	orrs	r5, r3
 800b448:	81a5      	strh	r5, [r4, #12]
 800b44a:	e7cf      	b.n	800b3ec <__smakebuf_r+0x18>

0800b44c <memmove>:
 800b44c:	4288      	cmp	r0, r1
 800b44e:	b510      	push	{r4, lr}
 800b450:	eb01 0402 	add.w	r4, r1, r2
 800b454:	d902      	bls.n	800b45c <memmove+0x10>
 800b456:	4284      	cmp	r4, r0
 800b458:	4623      	mov	r3, r4
 800b45a:	d807      	bhi.n	800b46c <memmove+0x20>
 800b45c:	1e43      	subs	r3, r0, #1
 800b45e:	42a1      	cmp	r1, r4
 800b460:	d008      	beq.n	800b474 <memmove+0x28>
 800b462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b46a:	e7f8      	b.n	800b45e <memmove+0x12>
 800b46c:	4402      	add	r2, r0
 800b46e:	4601      	mov	r1, r0
 800b470:	428a      	cmp	r2, r1
 800b472:	d100      	bne.n	800b476 <memmove+0x2a>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b47e:	e7f7      	b.n	800b470 <memmove+0x24>

0800b480 <_fstat_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4d07      	ldr	r5, [pc, #28]	@ (800b4a0 <_fstat_r+0x20>)
 800b484:	2300      	movs	r3, #0
 800b486:	4604      	mov	r4, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	4611      	mov	r1, r2
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	f7f6 fcbf 	bl	8001e10 <_fstat>
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	d102      	bne.n	800b49c <_fstat_r+0x1c>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	b103      	cbz	r3, 800b49c <_fstat_r+0x1c>
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	bd38      	pop	{r3, r4, r5, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000640 	.word	0x20000640

0800b4a4 <_isatty_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d06      	ldr	r5, [pc, #24]	@ (800b4c0 <_isatty_r+0x1c>)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f6 fcbe 	bl	8001e30 <_isatty>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_isatty_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_isatty_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000640 	.word	0x20000640

0800b4c4 <_sbrk_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4d06      	ldr	r5, [pc, #24]	@ (800b4e0 <_sbrk_r+0x1c>)
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	602b      	str	r3, [r5, #0]
 800b4d0:	f7f6 fcc6 	bl	8001e60 <_sbrk>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_sbrk_r+0x1a>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_sbrk_r+0x1a>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20000640 	.word	0x20000640

0800b4e4 <__assert_func>:
 800b4e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4e6:	4614      	mov	r4, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4b09      	ldr	r3, [pc, #36]	@ (800b510 <__assert_func+0x2c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	68d8      	ldr	r0, [r3, #12]
 800b4f2:	b954      	cbnz	r4, 800b50a <__assert_func+0x26>
 800b4f4:	4b07      	ldr	r3, [pc, #28]	@ (800b514 <__assert_func+0x30>)
 800b4f6:	461c      	mov	r4, r3
 800b4f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4fc:	9100      	str	r1, [sp, #0]
 800b4fe:	462b      	mov	r3, r5
 800b500:	4905      	ldr	r1, [pc, #20]	@ (800b518 <__assert_func+0x34>)
 800b502:	f000 f84f 	bl	800b5a4 <fiprintf>
 800b506:	f000 f85f 	bl	800b5c8 <abort>
 800b50a:	4b04      	ldr	r3, [pc, #16]	@ (800b51c <__assert_func+0x38>)
 800b50c:	e7f4      	b.n	800b4f8 <__assert_func+0x14>
 800b50e:	bf00      	nop
 800b510:	20000190 	.word	0x20000190
 800b514:	0800bb15 	.word	0x0800bb15
 800b518:	0800bae7 	.word	0x0800bae7
 800b51c:	0800bada 	.word	0x0800bada

0800b520 <_calloc_r>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	fba1 5402 	umull	r5, r4, r1, r2
 800b526:	b93c      	cbnz	r4, 800b538 <_calloc_r+0x18>
 800b528:	4629      	mov	r1, r5
 800b52a:	f7fe fe0f 	bl	800a14c <_malloc_r>
 800b52e:	4606      	mov	r6, r0
 800b530:	b928      	cbnz	r0, 800b53e <_calloc_r+0x1e>
 800b532:	2600      	movs	r6, #0
 800b534:	4630      	mov	r0, r6
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	220c      	movs	r2, #12
 800b53a:	6002      	str	r2, [r0, #0]
 800b53c:	e7f9      	b.n	800b532 <_calloc_r+0x12>
 800b53e:	462a      	mov	r2, r5
 800b540:	4621      	mov	r1, r4
 800b542:	f7fd fb57 	bl	8008bf4 <memset>
 800b546:	e7f5      	b.n	800b534 <_calloc_r+0x14>

0800b548 <_realloc_r>:
 800b548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b54c:	4680      	mov	r8, r0
 800b54e:	4615      	mov	r5, r2
 800b550:	460c      	mov	r4, r1
 800b552:	b921      	cbnz	r1, 800b55e <_realloc_r+0x16>
 800b554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b558:	4611      	mov	r1, r2
 800b55a:	f7fe bdf7 	b.w	800a14c <_malloc_r>
 800b55e:	b92a      	cbnz	r2, 800b56c <_realloc_r+0x24>
 800b560:	f7fe fa46 	bl	80099f0 <_free_r>
 800b564:	2400      	movs	r4, #0
 800b566:	4620      	mov	r0, r4
 800b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56c:	f000 f833 	bl	800b5d6 <_malloc_usable_size_r>
 800b570:	4285      	cmp	r5, r0
 800b572:	4606      	mov	r6, r0
 800b574:	d802      	bhi.n	800b57c <_realloc_r+0x34>
 800b576:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b57a:	d8f4      	bhi.n	800b566 <_realloc_r+0x1e>
 800b57c:	4629      	mov	r1, r5
 800b57e:	4640      	mov	r0, r8
 800b580:	f7fe fde4 	bl	800a14c <_malloc_r>
 800b584:	4607      	mov	r7, r0
 800b586:	2800      	cmp	r0, #0
 800b588:	d0ec      	beq.n	800b564 <_realloc_r+0x1c>
 800b58a:	42b5      	cmp	r5, r6
 800b58c:	462a      	mov	r2, r5
 800b58e:	4621      	mov	r1, r4
 800b590:	bf28      	it	cs
 800b592:	4632      	movcs	r2, r6
 800b594:	f7fd fbbf 	bl	8008d16 <memcpy>
 800b598:	4621      	mov	r1, r4
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7fe fa28 	bl	80099f0 <_free_r>
 800b5a0:	463c      	mov	r4, r7
 800b5a2:	e7e0      	b.n	800b566 <_realloc_r+0x1e>

0800b5a4 <fiprintf>:
 800b5a4:	b40e      	push	{r1, r2, r3}
 800b5a6:	b503      	push	{r0, r1, lr}
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	ab03      	add	r3, sp, #12
 800b5ac:	4805      	ldr	r0, [pc, #20]	@ (800b5c4 <fiprintf+0x20>)
 800b5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b2:	6800      	ldr	r0, [r0, #0]
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	f7ff fd23 	bl	800b000 <_vfiprintf_r>
 800b5ba:	b002      	add	sp, #8
 800b5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c0:	b003      	add	sp, #12
 800b5c2:	4770      	bx	lr
 800b5c4:	20000190 	.word	0x20000190

0800b5c8 <abort>:
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	2006      	movs	r0, #6
 800b5cc:	f000 f834 	bl	800b638 <raise>
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	f7f6 fbe9 	bl	8001da8 <_exit>

0800b5d6 <_malloc_usable_size_r>:
 800b5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5da:	1f18      	subs	r0, r3, #4
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	bfbc      	itt	lt
 800b5e0:	580b      	ldrlt	r3, [r1, r0]
 800b5e2:	18c0      	addlt	r0, r0, r3
 800b5e4:	4770      	bx	lr

0800b5e6 <_raise_r>:
 800b5e6:	291f      	cmp	r1, #31
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	d904      	bls.n	800b5fa <_raise_r+0x14>
 800b5f0:	2316      	movs	r3, #22
 800b5f2:	6003      	str	r3, [r0, #0]
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	bd38      	pop	{r3, r4, r5, pc}
 800b5fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5fc:	b112      	cbz	r2, 800b604 <_raise_r+0x1e>
 800b5fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b602:	b94b      	cbnz	r3, 800b618 <_raise_r+0x32>
 800b604:	4628      	mov	r0, r5
 800b606:	f000 f831 	bl	800b66c <_getpid_r>
 800b60a:	4622      	mov	r2, r4
 800b60c:	4601      	mov	r1, r0
 800b60e:	4628      	mov	r0, r5
 800b610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b614:	f000 b818 	b.w	800b648 <_kill_r>
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d00a      	beq.n	800b632 <_raise_r+0x4c>
 800b61c:	1c59      	adds	r1, r3, #1
 800b61e:	d103      	bne.n	800b628 <_raise_r+0x42>
 800b620:	2316      	movs	r3, #22
 800b622:	6003      	str	r3, [r0, #0]
 800b624:	2001      	movs	r0, #1
 800b626:	e7e7      	b.n	800b5f8 <_raise_r+0x12>
 800b628:	2100      	movs	r1, #0
 800b62a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b62e:	4620      	mov	r0, r4
 800b630:	4798      	blx	r3
 800b632:	2000      	movs	r0, #0
 800b634:	e7e0      	b.n	800b5f8 <_raise_r+0x12>
	...

0800b638 <raise>:
 800b638:	4b02      	ldr	r3, [pc, #8]	@ (800b644 <raise+0xc>)
 800b63a:	4601      	mov	r1, r0
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	f7ff bfd2 	b.w	800b5e6 <_raise_r>
 800b642:	bf00      	nop
 800b644:	20000190 	.word	0x20000190

0800b648 <_kill_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	@ (800b668 <_kill_r+0x20>)
 800b64c:	2300      	movs	r3, #0
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	f7f6 fb97 	bl	8001d88 <_kill>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d102      	bne.n	800b664 <_kill_r+0x1c>
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	b103      	cbz	r3, 800b664 <_kill_r+0x1c>
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	bd38      	pop	{r3, r4, r5, pc}
 800b666:	bf00      	nop
 800b668:	20000640 	.word	0x20000640

0800b66c <_getpid_r>:
 800b66c:	f7f6 bb84 	b.w	8001d78 <_getpid>

0800b670 <_init>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	bf00      	nop
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr

0800b67c <_fini>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	bf00      	nop
 800b680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b682:	bc08      	pop	{r3}
 800b684:	469e      	mov	lr, r3
 800b686:	4770      	bx	lr
