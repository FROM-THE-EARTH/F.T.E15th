
gimbalver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008394  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008578  08008578  00009578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008968  08008968  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800896c  0800896c  0000996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008970  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e0  08008b50  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008b50  0000a550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016af4  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8e  00000000  00000000  00020d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00023998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe1  00000000  00000000  00024dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020174  00000000  00000000  00025db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183fa  00000000  00000000  00045f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc58a  00000000  00000000  0005e31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a8a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000673c  00000000  00000000  0012a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00131028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800855c 	.word	0x0800855c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800855c 	.word	0x0800855c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <I2cInitialize>:
//
static bool initialized = false;



static void I2cInitialize(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(!initialized){
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <I2cInitialize+0x24>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <I2cInitialize+0x18>
		initialized = true;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <I2cInitialize+0x24>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200001fd 	.word	0x200001fd

08000fb0 <I2cWriteByte>:

static void I2cWriteByte(uint8_t add, uint8_t reg, uint8_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	2364      	movs	r3, #100	@ 0x64
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	1d7b      	adds	r3, r7, #5
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <I2cWriteByte+0x3c>)
 8000fde:	f001 fc13 	bl	8002808 <HAL_I2C_Mem_Write>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000200 	.word	0x20000200

08000ff0 <I2cReadByte>:

static uint8_t I2cReadByte(uint8_t add, uint8_t reg)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29b      	uxth	r3, r3
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b299      	uxth	r1, r3
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	b29a      	uxth	r2, r3
 800100c:	2364      	movs	r3, #100	@ 0x64
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 030f 	add.w	r3, r7, #15
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <I2cReadByte+0x3c>)
 800101e:	f001 fd07 	bl	8002a30 <HAL_I2C_Mem_Read>
	return data;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000200 	.word	0x20000200

08001030 <I2cReadBytes>:

static void I2cReadBytes(uint8_t add, uint8_t reg, uint8_t *data, uint8_t count)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af04      	add	r7, sp, #16
 8001036:	603a      	str	r2, [r7, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	4613      	mov	r3, r2
 8001044:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, data, count, 100);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	b29b      	uxth	r3, r3
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	b299      	uxth	r1, r3
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	b29a      	uxth	r2, r3
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	9002      	str	r0, [sp, #8]
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	4803      	ldr	r0, [pc, #12]	@ (8001070 <I2cReadBytes+0x40>)
 8001064:	f001 fce4 	bl	8002a30 <HAL_I2C_Mem_Read>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000200 	.word	0x20000200

08001074 <DelayMs>:

static void DelayMs(uint32_t t){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <BNO055_Initialize_Fusion>:

//------------------- Write Yourself To Here-------------

bool BNO055_Initialize_Fusion(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	I2cInitialize();
 800108e:	f7ff ff7b 	bl	8000f88 <I2cInitialize>

	BNO055_ADRESS = BNO055_ADRESS_0;
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 8001094:	2228      	movs	r2, #40	@ 0x28
 8001096:	701a      	strb	r2, [r3, #0]

	uint8_t id = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 800109c:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ffa4 	bl	8000ff0 <I2cReadByte>
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <BNO055_Initialize_Fusion+0xec>)
 80010b2:	f005 fa1d 	bl	80064f0 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff97 	bl	8000ff0 <I2cReadByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4619      	mov	r1, r3
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <BNO055_Initialize_Fusion+0xec>)
 80010cc:	f005 fa10 	bl	80064f0 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff8a 	bl	8000ff0 <I2cReadByte>
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4823      	ldr	r0, [pc, #140]	@ (8001174 <BNO055_Initialize_Fusion+0xec>)
 80010e6:	f005 fa03 	bl	80064f0 <iprintf>
//			printf("%x\r\n",id);
//			printf("false");
//			return false;
//		}
//	}
	if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff7d 	bl	8000ff0 <I2cReadByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80010fa:	d01d      	beq.n	8001138 <BNO055_Initialize_Fusion+0xb0>
		BNO055_ADRESS = BNO055_ADRESS_1;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 80010fe:	2229      	movs	r2, #41	@ 0x29
 8001100:	701a      	strb	r2, [r3, #0]
		if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff71 	bl	8000ff0 <I2cReadByte>
 800110e:	4603      	mov	r3, r0
 8001110:	2ba0      	cmp	r3, #160	@ 0xa0
 8001112:	d011      	beq.n	8001138 <BNO055_Initialize_Fusion+0xb0>
			id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff68 	bl	8000ff0 <I2cReadByte>
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
			printf("%x\r\n",id);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4619      	mov	r1, r3
 8001128:	4813      	ldr	r0, [pc, #76]	@ (8001178 <BNO055_Initialize_Fusion+0xf0>)
 800112a:	f005 f9e1 	bl	80064f0 <iprintf>
			printf("false");
 800112e:	4813      	ldr	r0, [pc, #76]	@ (800117c <BNO055_Initialize_Fusion+0xf4>)
 8001130:	f005 f9de 	bl	80064f0 <iprintf>
			return false;
 8001134:	2300      	movs	r3, #0
 8001136:	e016      	b.n	8001166 <BNO055_Initialize_Fusion+0xde>
		}
	}


	I2cWriteByte(BNO055_ADRESS,BNO055_PWR_MODE,0);
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	213e      	movs	r1, #62	@ 0x3e
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff35 	bl	8000fb0 <I2cWriteByte>
	BNO055_SetUnit();
 8001146:	f000 f81d 	bl	8001184 <BNO055_SetUnit>
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_NDOF);
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <BNO055_Initialize_Fusion+0xe8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	220c      	movs	r2, #12
 8001150:	213d      	movs	r1, #61	@ 0x3d
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff2c 	bl	8000fb0 <I2cWriteByte>
	DelayMs(20);
 8001158:	2014      	movs	r0, #20
 800115a:	f7ff ff8b 	bl	8001074 <DelayMs>
	printf("Initialize");
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <BNO055_Initialize_Fusion+0xf8>)
 8001160:	f005 f9c6 	bl	80064f0 <iprintf>
	return true;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001fc 	.word	0x200001fc
 8001174:	08008578 	.word	0x08008578
 8001178:	08008580 	.word	0x08008580
 800117c:	08008588 	.word	0x08008588
 8001180:	08008590 	.word	0x08008590

08001184 <BNO055_SetUnit>:
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_AMG);
	DelayMs(20);
	return true;
}

void BNO055_SetUnit(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	uint8_t unit =  BNO055_UNIT_SEL_ACC | BNO055_UNIT_SEL_GYR | BNO055_UNIT_SEL_ANGL | BNO055_UNIT_SEL_Tmp | BNO055_UNIT_SEL_Fus;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
	I2cWriteByte(BNO055_ADRESS,BNO055_UNIT_SEL,unit);
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <BNO055_SetUnit+0x20>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	79fa      	ldrb	r2, [r7, #7]
 8001194:	213b      	movs	r1, #59	@ 0x3b
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff0a 	bl	8000fb0 <I2cWriteByte>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001fc 	.word	0x200001fc

080011a8 <BNO055_ReadGyr>:
	*x = (float)_x / 16;
	*y = (float)_y / 16;
	*z = (float)_z / 16;
}

void BNO055_ReadGyr(float* x,float* y,float* z){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	uint8_t data[6]={};
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	2300      	movs	r3, #0
 80011ba:	833b      	strh	r3, [r7, #24]

	I2cReadBytes(BNO055_ADRESS,BNO055_GYR_DATA_X_LSB,data,6);
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <BNO055_ReadGyr+0xa4>)
 80011be:	7818      	ldrb	r0, [r3, #0]
 80011c0:	f107 0214 	add.w	r2, r7, #20
 80011c4:	2306      	movs	r3, #6
 80011c6:	2114      	movs	r1, #20
 80011c8:	f7ff ff32 	bl	8001030 <I2cReadBytes>
	//printf("%d,%d\r\n",data[0],data[1]);

	int16_t _x,_y,_z;
	_x = data[1] << 8 | data[0];
 80011cc:	7d7b      	ldrb	r3, [r7, #21]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7d3b      	ldrb	r3, [r7, #20]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	83fb      	strh	r3, [r7, #30]
	_y = data[3] << 8 | data[2];
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7dbb      	ldrb	r3, [r7, #22]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	83bb      	strh	r3, [r7, #28]
	_z = data[5] << 8 | data[4];
 80011e8:	7e7b      	ldrb	r3, [r7, #25]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	7e3b      	ldrb	r3, [r7, #24]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	837b      	strh	r3, [r7, #26]

#if BNO055_UNIT_SEL_GYR == BNO055_UNIT_SEL_GYR_Dps
	*x = (float)_x / 16;
 80011f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001202:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)_y / 16;
 8001210:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)_z / 16;
 800122a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001236:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800123a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edc3 7a00 	vstr	s15, [r3]
	*x = (float)_x / 900;
	*y = (float)_y / 900;
	*z = (float)_z / 900;
#endif
	//printf("%f , %f , %f\r\n",x,y,z);
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001fc 	.word	0x200001fc

08001250 <A4988_STEP>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void A4988_STEP(uint16_t interval){
 8001250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	80fb      	strh	r3, [r7, #6]
	if(stopState == 0){
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <A4988_STEP+0xf0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d064      	beq.n	800132e <A4988_STEP+0xde>
		return ;
	}
	if(stepState == 0){
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <A4988_STEP+0xf4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d126      	bne.n	80012ba <A4988_STEP+0x6a>
		if(stepInterval != interval - 1){
 800126c:	4b36      	ldr	r3, [pc, #216]	@ (8001348 <A4988_STEP+0xf8>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	3b01      	subs	r3, #1
 8001276:	429a      	cmp	r2, r3
 8001278:	d00e      	beq.n	8001298 <A4988_STEP+0x48>
			stepInterval = interval - 1;
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <A4988_STEP+0xf8>)
 8001282:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim7, stepInterval);
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <A4988_STEP+0xf8>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <A4988_STEP+0xfc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800128e:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <A4988_STEP+0xf8>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <A4988_STEP+0xfc>)
 8001296:	60da      	str	r2, [r3, #12]
		}
		  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800129e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a2:	f001 f9e3 	bl	800266c <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(MDSTEP_GPIO_Port, MDSTEP_Pin);
 80012a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ae:	f001 f9f5 	bl	800269c <HAL_GPIO_TogglePin>
		stepState = 1;
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <A4988_STEP+0xf4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e03a      	b.n	8001330 <A4988_STEP+0xe0>
	}else{
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f001 f9d2 	bl	800266c <HAL_GPIO_WritePin>
		stepState = 0;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <A4988_STEP+0xf4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		mangle += onepulse_motorangle*mdir/ms;
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <A4988_STEP+0x100>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f960 	bl	8000598 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <A4988_STEP+0x104>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f947 	bl	8000574 <__aeabi_i2d>
 80012e6:	a314      	add	r3, pc, #80	@ (adr r3, 8001338 <A4988_STEP+0xe8>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f9ac 	bl	8000648 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4690      	mov	r8, r2
 80012f6:	4699      	mov	r9, r3
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <A4988_STEP+0x108>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4640      	mov	r0, r8
 8001308:	4649      	mov	r1, r9
 800130a:	f7ff fac7 	bl	800089c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7fe ffe1 	bl	80002dc <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc69 	bl	8000bf8 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <A4988_STEP+0x100>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e000      	b.n	8001330 <A4988_STEP+0xe0>
		return ;
 800132e:	bf00      	nop
		//printf("onepulse");
	}

}
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001338:	cccccccd 	.word	0xcccccccd
 800133c:	3feccccc 	.word	0x3feccccc
 8001340:	200003f8 	.word	0x200003f8
 8001344:	200003e4 	.word	0x200003e4
 8001348:	200003e8 	.word	0x200003e8
 800134c:	200002ec 	.word	0x200002ec
 8001350:	200003ec 	.word	0x200003ec
 8001354:	20000004 	.word	0x20000004
 8001358:	20000008 	.word	0x20000008
 800135c:	00000000 	.word	0x00000000

08001360 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a96      	ldr	r2, [pc, #600]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d159      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0xc6>
        BNO055_ReadGyr(&Gyr_x, &Gyr_y, &Gyr_z);
 8001372:	4a96      	ldr	r2, [pc, #600]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001374:	4996      	ldr	r1, [pc, #600]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001376:	4897      	ldr	r0, [pc, #604]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001378:	f7ff ff16 	bl	80011a8 <BNO055_ReadGyr>
        //printf("%f , %f , %f\r\n",Gyr_x,Gyr_y,Gyr_z); // @suppress("Float formatting support")
        if(Gyr_z == now_z){
 800137c:	4b93      	ldr	r3, [pc, #588]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	4b95      	ldr	r3, [pc, #596]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	eeb4 7a67 	vcmp.f32	s14, s15
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d105      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x3e>
        	bnoemergency++;
 8001392:	4b92      	ldr	r3, [pc, #584]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a90      	ldr	r2, [pc, #576]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e002      	b.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x44>
        }else{
        	bnoemergency = 0;
 800139e:	4b8f      	ldr	r3, [pc, #572]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
        }
        if(bnoemergency == 10){
 80013a4:	4b8d      	ldr	r3, [pc, #564]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d104      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x56>
        	//HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
        	HAL_NVIC_SystemReset();
 80013ac:	f000 ffcb 	bl	8002346 <HAL_NVIC_SystemReset>
        	bnoemergency = 0;
 80013b0:	4b8a      	ldr	r3, [pc, #552]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
        }
        pre_z = now_z;
 80013b6:	4b88      	ldr	r3, [pc, #544]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a89      	ldr	r2, [pc, #548]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80013bc:	6013      	str	r3, [r2, #0]
        now_z = Gyr_z;
 80013be:	4b83      	ldr	r3, [pc, #524]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a85      	ldr	r2, [pc, #532]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013c4:	6013      	str	r3, [r2, #0]
        tangle += (now_z + Gyr_z) * 0.01 * 0.5;
 80013c6:	4b87      	ldr	r3, [pc, #540]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8e4 	bl	8000598 <__aeabi_f2d>
 80013d0:	4680      	mov	r8, r0
 80013d2:	4689      	mov	r9, r1
 80013d4:	4b80      	ldr	r3, [pc, #512]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4b7c      	ldr	r3, [pc, #496]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	ee17 0a90 	vmov	r0, s15
 80013e8:	f7ff f8d6 	bl	8000598 <__aeabi_f2d>
 80013ec:	a372      	add	r3, pc, #456	@ (adr r3, 80015b8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f929 	bl	8000648 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b79      	ldr	r3, [pc, #484]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001404:	f7ff f920 	bl	8000648 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4640      	mov	r0, r8
 800140e:	4649      	mov	r1, r9
 8001410:	f7fe ff64 	bl	80002dc <__adddf3>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fbec 	bl	8000bf8 <__aeabi_d2f>
 8001420:	4603      	mov	r3, r0
 8001422:	4a70      	ldr	r2, [pc, #448]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001424:	6013      	str	r3, [r2, #0]
        //printf("%f\r\n",tangle);
	}
    if(htim == &htim6){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a70      	ldr	r2, [pc, #448]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	f040 80b5 	bne.w	800159a <HAL_TIM_PeriodElapsedCallback+0x23a>
        float diffangle = tangle - mangle;
 8001430:	4b6c      	ldr	r3, [pc, #432]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b6e      	ldr	r3, [pc, #440]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001440:	edc7 7a03 	vstr	s15, [r7, #12]
        if((diffangle < (onepulse_motorangle/ms)*5) && (diffangle > -(onepulse_motorangle/ms)*5) ){
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff f8a7 	bl	8000598 <__aeabi_f2d>
 800144a:	4680      	mov	r8, r0
 800144c:	4689      	mov	r9, r1
 800144e:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f88e 	bl	8000574 <__aeabi_i2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	a158      	add	r1, pc, #352	@ (adr r1, 80015c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800145e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001462:	f7ff fa1b 	bl	800089c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b61      	ldr	r3, [pc, #388]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001474:	f7ff f8e8 	bl	8000648 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4640      	mov	r0, r8
 800147e:	4649      	mov	r1, r9
 8001480:	f7ff fb54 	bl	8000b2c <__aeabi_dcmplt>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d028      	beq.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x17c>
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff f884 	bl	8000598 <__aeabi_f2d>
 8001490:	4680      	mov	r8, r0
 8001492:	4689      	mov	r9, r1
 8001494:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f86b 	bl	8000574 <__aeabi_i2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	a147      	add	r1, pc, #284	@ (adr r1, 80015c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014a8:	f7ff f9f8 	bl	800089c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f8c2 	bl	8000648 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4640      	mov	r0, r8
 80014ca:	4649      	mov	r1, r9
 80014cc:	f7ff fb4c 	bl	8000b68 <__aeabi_dcmpgt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x17c>
        	diffangle = 0;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
        }
        int pulse = diffangle / (onepulse_motorangle / ms);
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff f85b 	bl	8000598 <__aeabi_f2d>
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4b43      	ldr	r3, [pc, #268]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f842 	bl	8000574 <__aeabi_i2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	a132      	add	r1, pc, #200	@ (adr r1, 80015c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014fa:	f7ff f9cf 	bl	800089c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	f7ff f9c9 	bl	800089c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb49 	bl	8000ba8 <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	60bb      	str	r3, [r7, #8]
        //printf("%f\r\n",diffangle);

        if (pulse < 0) {
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0c      	bge.n	800153a <HAL_TIM_PeriodElapsedCallback+0x1da>
            mdir = -1;
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	2101      	movs	r1, #1
 800152c:	4834      	ldr	r0, [pc, #208]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800152e:	f001 f89d 	bl	800266c <HAL_GPIO_WritePin>
            pulse = -pulse;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	425b      	negs	r3, r3
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e00a      	b.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x1f0>
        } else if (pulse > 0) {
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	dd07      	ble.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x1f0>
            mdir = 1;
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	482d      	ldr	r0, [pc, #180]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800154c:	f001 f88e 	bl	800266c <HAL_GPIO_WritePin>
        }

        if (pulse > 0) {
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dd0a      	ble.n	800156c <HAL_TIM_PeriodElapsedCallback+0x20c>
            mInterval = 100 / pulse;
 8001556:	2264      	movs	r2, #100	@ 0x64
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	fb92 f3f3 	sdiv	r3, r2, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001562:	801a      	strh	r2, [r3, #0]
            stopState = 1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e005      	b.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x218>
        } else {
            mInterval = 100; // ゼロ除算防止
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800156e:	2264      	movs	r2, #100	@ 0x64
 8001570:	801a      	strh	r2, [r3, #0]
            stopState = 0;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
        }
        if(mInterval < 34){
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2b21      	cmp	r3, #33	@ 0x21
 800157e:	d802      	bhi.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x226>
        	mInterval = 34;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001582:	2222      	movs	r2, #34	@ 0x22
 8001584:	801a      	strh	r2, [r3, #0]
        }


        if (tim7init == 0) {
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x23a>
            HAL_TIM_Base_Start_IT(&htim7);
 800158e:	4820      	ldr	r0, [pc, #128]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001590:	f002 feec 	bl	800436c <HAL_TIM_Base_Start_IT>
            tim7init = 1;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
        }
        //printf("%f,%f\r\n",tangle,mangle);
    }

    if(htim == &htim7){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d104      	bne.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x24c>
    	//printf("tim7\r\n");
        A4988_STEP(mInterval);
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe52 	bl	8001250 <A4988_STEP>
    }
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015b6:	bf00      	nop
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	3f847ae1 	.word	0x3f847ae1
 80015c0:	cccccccd 	.word	0xcccccccd
 80015c4:	3feccccc 	.word	0x3feccccc
 80015c8:	20000254 	.word	0x20000254
 80015cc:	200003d4 	.word	0x200003d4
 80015d0:	200003d0 	.word	0x200003d0
 80015d4:	200003cc 	.word	0x200003cc
 80015d8:	200003dc 	.word	0x200003dc
 80015dc:	200003e0 	.word	0x200003e0
 80015e0:	200003d8 	.word	0x200003d8
 80015e4:	200003f0 	.word	0x200003f0
 80015e8:	3fe00000 	.word	0x3fe00000
 80015ec:	200002a0 	.word	0x200002a0
 80015f0:	200003ec 	.word	0x200003ec
 80015f4:	20000008 	.word	0x20000008
 80015f8:	40140000 	.word	0x40140000
 80015fc:	20000004 	.word	0x20000004
 8001600:	48000400 	.word	0x48000400
 8001604:	20000000 	.word	0x20000000
 8001608:	200003f8 	.word	0x200003f8
 800160c:	200003f4 	.word	0x200003f4
 8001610:	200002ec 	.word	0x200002ec

08001614 <_write>:


int _write(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b29a      	uxth	r2, r3
 8001624:	230a      	movs	r3, #10
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <_write+0x24>)
 800162a:	f003 fbcb 	bl	8004dc4 <HAL_UART_Transmit>
  return len;
 800162e:	687b      	ldr	r3, [r7, #4]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000338 	.word	0x20000338

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <main+0xa4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f004 ff62 	bl	8006514 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f000 fccd 	bl	8001fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f858 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 f9ea 	bl	8001a30 <MX_GPIO_Init>
  MX_I2C1_Init();
 800165c:	f000 f8a0 	bl	80017a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001660:	f000 f99a 	bl	8001998 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001664:	f000 f8dc 	bl	8001820 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001668:	f000 f928 	bl	80018bc <MX_TIM6_Init>
  MX_TIM7_Init();
 800166c:	f000 f95c 	bl	8001928 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  if(BNO055_Initialize_Fusion() == false){
 8001670:	f7ff fd0a 	bl	8001088 <BNO055_Initialize_Fusion>
 8001674:	4603      	mov	r3, r0
 8001676:	f083 0301 	eor.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <main+0x4c>
	  printf("false");
 8001680:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <main+0xa8>)
 8001682:	f004 ff35 	bl	80064f0 <iprintf>
 8001686:	e002      	b.n	800168e <main+0x52>
  }else{
	  printf("Ok");
 8001688:	4817      	ldr	r0, [pc, #92]	@ (80016e8 <main+0xac>)
 800168a:	f004 ff31 	bl	80064f0 <iprintf>
  }
  HAL_TIM_Base_Start_IT(&htim6);
 800168e:	4817      	ldr	r0, [pc, #92]	@ (80016ec <main+0xb0>)
 8001690:	f002 fe6c 	bl	800436c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001694:	4816      	ldr	r0, [pc, #88]	@ (80016f0 <main+0xb4>)
 8001696:	f002 fe69 	bl	800436c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800169a:	4816      	ldr	r0, [pc, #88]	@ (80016f4 <main+0xb8>)
 800169c:	f002 fe66 	bl	800436c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2101      	movs	r1, #1
 80016a4:	4814      	ldr	r0, [pc, #80]	@ (80016f8 <main+0xbc>)
 80016a6:	f000 ffe1 	bl	800266c <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  BNO055_ReadGyr(&x,&y,&z);
//	  printf("%f , %f , %f\r\n",x,y,z); // @suppress("Float formatting support")
	  //printf("Hello\r\n");
	  //printf("a:%f\r\n",tangle);
	  printf("%f,%f\r\n",tangle,mangle);
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <main+0xc0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff72 	bl	8000598 <__aeabi_f2d>
 80016b4:	4604      	mov	r4, r0
 80016b6:	460d      	mov	r5, r1
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <main+0xc4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff6b 	bl	8000598 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	e9cd 2300 	strd	r2, r3, [sp]
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <main+0xc8>)
 80016d0:	f004 ff0e 	bl	80064f0 <iprintf>
	  HAL_Delay(500);
 80016d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016d8:	f000 fcfa 	bl	80020d0 <HAL_Delay>
	  printf("%f,%f\r\n",tangle,mangle);
 80016dc:	bf00      	nop
 80016de:	e7e4      	b.n	80016aa <main+0x6e>
 80016e0:	20000024 	.word	0x20000024
 80016e4:	0800859c 	.word	0x0800859c
 80016e8:	080085a4 	.word	0x080085a4
 80016ec:	200002a0 	.word	0x200002a0
 80016f0:	20000254 	.word	0x20000254
 80016f4:	200002ec 	.word	0x200002ec
 80016f8:	48000400 	.word	0x48000400
 80016fc:	200003f0 	.word	0x200003f0
 8001700:	200003ec 	.word	0x200003ec
 8001704:	080085a8 	.word	0x080085a8

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	@ 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2238      	movs	r2, #56	@ 0x38
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fffb 	bl	8006712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800172e:	f001 fdf3 	bl	8003318 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001736:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173c:	2340      	movs	r3, #64	@ 0x40
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001744:	2302      	movs	r3, #2
 8001746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001748:	2301      	movs	r3, #1
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800174c:	230a      	movs	r3, #10
 800174e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001754:	2302      	movs	r3, #2
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fe8d 	bl	8003480 <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800176c:	f000 f9b6 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	230f      	movs	r3, #15
 8001772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001774:	2303      	movs	r3, #3
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2102      	movs	r1, #2
 8001788:	4618      	mov	r0, r3
 800178a:	f002 f98b 	bl	8003aa4 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001794:	f000 f9a2 	bl	8001adc <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	@ 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <MX_I2C1_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017ac:	4a1b      	ldr	r2, [pc, #108]	@ (800181c <MX_I2C1_Init+0x7c>)
 80017ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017da:	480e      	ldr	r0, [pc, #56]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017dc:	f000 ff78 	bl	80026d0 <HAL_I2C_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e6:	f000 f979 	bl	8001adc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4809      	ldr	r0, [pc, #36]	@ (8001814 <MX_I2C1_Init+0x74>)
 80017ee:	f001 fcfb 	bl	80031e8 <HAL_I2CEx_ConfigAnalogFilter>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f8:	f000 f970 	bl	8001adc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_I2C1_Init+0x74>)
 8001800:	f001 fd3d 	bl	800327e <HAL_I2CEx_ConfigDigitalFilter>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800180a:	f000 f967 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000200 	.word	0x20000200
 8001818:	40005400 	.word	0x40005400
 800181c:	10d19ce4 	.word	0x10d19ce4

08001820 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <MX_TIM4_Init+0x98>)
 8001842:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001846:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800184a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_TIM4_Init+0x94>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001854:	2263      	movs	r2, #99	@ 0x63
 8001856:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_TIM4_Init+0x94>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001864:	4813      	ldr	r0, [pc, #76]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001866:	f002 fd29 	bl	80042bc <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001870:	f000 f934 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001878:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <MX_TIM4_Init+0x94>)
 8001882:	f002 ff2d 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800188c:	f000 f926 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_TIM4_Init+0x94>)
 800189e:	f003 f979 	bl	8004b94 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018a8:	f000 f918 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000254 	.word	0x20000254
 80018b8:	40000800 	.word	0x40000800

080018bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018ce:	4a15      	ldr	r2, [pc, #84]	@ (8001924 <MX_TIM6_Init+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018d4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80018d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018e2:	2209      	movs	r2, #9
 80018e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <MX_TIM6_Init+0x64>)
 80018ee:	f002 fce5 	bl	80042bc <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018f8:	f000 f8f0 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_TIM6_Init+0x64>)
 800190a:	f003 f943 	bl	8004b94 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001914:	f000 f8e2 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002a0 	.word	0x200002a0
 8001924:	40001000 	.word	0x40001000

08001928 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_TIM7_Init+0x68>)
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <MX_TIM7_Init+0x6c>)
 800193c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001940:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001944:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800194c:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_TIM7_Init+0x68>)
 800194e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <MX_TIM7_Init+0x68>)
 800195c:	f002 fcae 	bl	80042bc <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001966:	f000 f8b9 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <MX_TIM7_Init+0x68>)
 8001978:	f003 f90c 	bl	8004b94 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001982:	f000 f8ab 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002ec 	.word	0x200002ec
 8001994:	40001400 	.word	0x40001400

08001998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 800199e:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <MX_USART2_UART_Init+0x94>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e0:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019e2:	f003 f99f 	bl	8004d24 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019ec:	f000 f876 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 80019f4:	f003 ff98 	bl	8005928 <HAL_UARTEx_SetTxFifoThreshold>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019fe:	f000 f86d 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4808      	ldr	r0, [pc, #32]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 8001a06:	f003 ffcd 	bl	80059a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a10:	f000 f864 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <MX_USART2_UART_Init+0x90>)
 8001a16:	f003 ff4e 	bl	80058b6 <HAL_UARTEx_DisableFifoMode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f85c 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000338 	.word	0x20000338
 8001a2c:	40004400 	.word	0x40004400

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <MX_GPIO_Init+0xa4>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4817      	ldr	r0, [pc, #92]	@ (8001ad8 <MX_GPIO_Init+0xa8>)
 8001a7c:	f000 fdf6 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8a:	f000 fdef 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MDDIR_Pin */
  GPIO_InitStruct.Pin = MDDIR_Pin;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MDDIR_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <MX_GPIO_Init+0xa8>)
 8001aa6:	f000 fc5f 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDEN_Pin|MDSTEP_Pin;
 8001aaa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac6:	f000 fc4f 	bl	8002368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <Error_Handler+0x8>

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_MspInit+0x44>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <HAL_MspInit+0x44>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_MspInit+0x44>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b1e:	f001 fc9f 	bl	8003460 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09c      	sub	sp, #112	@ 0x70
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	2244      	movs	r2, #68	@ 0x44
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fdde 	bl	8006712 <memset>
  if(hi2c->Instance==I2C1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c10 <HAL_I2C_MspInit+0xe0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d153      	bne.n	8001c08 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b60:	2340      	movs	r3, #64	@ 0x40
 8001b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 f9b5 	bl	8003edc <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b78:	f7ff ffb0 	bl	8001adc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b88:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b98:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb2:	2312      	movs	r3, #18
 8001bb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f000 fbcc 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <HAL_I2C_MspInit+0xe8>)
 8001bec:	f000 fbbc 	bl	8002368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c08:	bf00      	nop
 8001c0a:	3770      	adds	r7, #112	@ 0x70
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005400 	.word	0x40005400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	f000 fb53 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c50:	201e      	movs	r0, #30
 8001c52:	f000 fb6a 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c56:	e032      	b.n	8001cbe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <HAL_TIM_Base_MspInit+0xb4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d114      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2036      	movs	r0, #54	@ 0x36
 8001c80:	f000 fb39 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c84:	2036      	movs	r0, #54	@ 0x36
 8001c86:	f000 fb50 	bl	800232a <HAL_NVIC_EnableIRQ>
}
 8001c8a:	e018      	b.n	8001cbe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <HAL_TIM_Base_MspInit+0xb8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d113      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_TIM_Base_MspInit+0xb0>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2037      	movs	r0, #55	@ 0x37
 8001cb4:	f000 fb1f 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cb8:	2037      	movs	r0, #55	@ 0x37
 8001cba:	f000 fb36 	bl	800232a <HAL_NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40001000 	.word	0x40001000
 8001cd4:	40001400 	.word	0x40001400

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b09a      	sub	sp, #104	@ 0x68
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2244      	movs	r2, #68	@ 0x44
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 fd0a 	bl	8006712 <memset>
  if(huart->Instance==USART2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <HAL_UART_MspInit+0xa8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d136      	bne.n	8001d76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f8e1 	bl	8003edc <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d20:	f7ff fedc 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d48:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_UART_MspInit+0xac>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d54:	230c      	movs	r3, #12
 8001d56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d64:	2307      	movs	r3, #7
 8001d66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d72:	f000 faf9 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	3768      	adds	r7, #104	@ 0x68
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40021000 	.word	0x40021000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <MemManage_Handler+0x4>

08001da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <UsageFault_Handler+0x4>

08001db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dde:	f000 f959 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <TIM4_IRQHandler+0x10>)
 8001dee:	f002 fb27 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000254 	.word	0x20000254

08001dfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <TIM6_DAC_IRQHandler+0x10>)
 8001e02:	f002 fb1d 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002a0 	.word	0x200002a0

08001e10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <TIM7_IRQHandler+0x10>)
 8001e16:	f002 fb13 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200002ec 	.word	0x200002ec

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f004 fcbb 	bl	80067b8 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <_exit+0x12>

08001e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7c:	f3af 8000 	nop.w
 8001e80:	4601      	mov	r1, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf0      	blt.n	8001e7c <_read+0x12>
  }

  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_isatty>:

int _isatty(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f004 fc3c 	bl	80067b8 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20008000 	.word	0x20008000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200003fc 	.word	0x200003fc
 8001f74:	20000550 	.word	0x20000550

08001f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f9c:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa0:	f7ff ffea 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopForever+0xe>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopForever+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f004 fbfb 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fce:	f7ff fb35 	bl	800163c <main>

08001fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   r0, =_estack
 8001fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fe0:	08008970 	.word	0x08008970
  ldr r2, =_sbss
 8001fe4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fe8:	20000550 	.word	0x20000550

08001fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_2_IRQHandler>

08001fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f971 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffe:	200f      	movs	r0, #15
 8002000:	f000 f80e 	bl	8002020 <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	e001      	b.n	8002014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002010:	f7ff fd6a 	bl	8001ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002014:	79fb      	ldrb	r3, [r7, #7]

}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_InitTick+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002034:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_InitTick+0x6c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_InitTick+0x68>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f980 	bl	800234e <HAL_SYSTICK_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d809      	bhi.n	800206e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205a:	2200      	movs	r2, #0
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
 8002062:	f000 f948 	bl	80022f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_InitTick+0x70>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e007      	b.n	800207e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e004      	b.n	800207e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000014 	.word	0x20000014
 800208c:	2000000c 	.word	0x2000000c
 8002090:	20000010 	.word	0x20000010

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_IncTick+0x1c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_IncTick+0x20>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a03      	ldr	r2, [pc, #12]	@ (80020b0 <HAL_IncTick+0x1c>)
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	20000400 	.word	0x20000400
 80020b4:	20000014 	.word	0x20000014

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000400 	.word	0x20000400

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d004      	beq.n	80020f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_Delay+0x40>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f4:	bf00      	nop
 80020f6:	f7ff ffdf 	bl	80020b8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8f7      	bhi.n	80020f6 <HAL_Delay+0x26>
  {
  }
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000014 	.word	0x20000014

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002274:	f3bf 8f4f 	dsb	sy
}
 8002278:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <__NVIC_SystemReset+0x24>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002282:	4904      	ldr	r1, [pc, #16]	@ (8002294 <__NVIC_SystemReset+0x24>)
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <__NVIC_SystemReset+0x28>)
 8002286:	4313      	orrs	r3, r2
 8002288:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800228a:	f3bf 8f4f 	dsb	sy
}
 800228e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <__NVIC_SystemReset+0x20>
 8002294:	e000ed00 	.word	0xe000ed00
 8002298:	05fa0004 	.word	0x05fa0004

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff78 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff13 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff2a 	bl	800215c <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff7a 	bl	8002208 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff49 	bl	80021b4 <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff1d 	bl	8002178 <__NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800234a:	f7ff ff91 	bl	8002270 <__NVIC_SystemReset>

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa0 	bl	800229c <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002376:	e15a      	b.n	800262e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 814c 	beq.w	8002628 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80a6 	beq.w	8002628 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <HAL_GPIO_Init+0x2e4>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e0:	4a5a      	ldr	r2, [pc, #360]	@ (800264c <HAL_GPIO_Init+0x2e4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <HAL_GPIO_Init+0x2e4>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f4:	4a56      	ldr	r2, [pc, #344]	@ (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800251e:	d01f      	beq.n	8002560 <HAL_GPIO_Init+0x1f8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a4c      	ldr	r2, [pc, #304]	@ (8002654 <HAL_GPIO_Init+0x2ec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d019      	beq.n	800255c <HAL_GPIO_Init+0x1f4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <HAL_GPIO_Init+0x2f0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_GPIO_Init+0x1f0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4a      	ldr	r2, [pc, #296]	@ (800265c <HAL_GPIO_Init+0x2f4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00d      	beq.n	8002554 <HAL_GPIO_Init+0x1ec>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a49      	ldr	r2, [pc, #292]	@ (8002660 <HAL_GPIO_Init+0x2f8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_GPIO_Init+0x1e8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_GPIO_Init+0x2fc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_GPIO_Init+0x1e4>
 8002548:	2305      	movs	r3, #5
 800254a:	e00a      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 800254c:	2306      	movs	r3, #6
 800254e:	e008      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002550:	2304      	movs	r3, #4
 8002552:	e006      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002554:	2303      	movs	r3, #3
 8002556:	e004      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002558:	2302      	movs	r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002560:	2300      	movs	r3, #0
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	f002 0203 	and.w	r2, r2, #3
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4093      	lsls	r3, r2
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002572:	4937      	ldr	r1, [pc, #220]	@ (8002650 <HAL_GPIO_Init+0x2e8>)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <HAL_GPIO_Init+0x300>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a4:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <HAL_GPIO_Init+0x300>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x300>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ce:	4a26      	ldr	r2, [pc, #152]	@ (8002668 <HAL_GPIO_Init+0x300>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025d4:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_GPIO_Init+0x300>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <HAL_GPIO_Init+0x300>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_GPIO_Init+0x300>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <HAL_GPIO_Init+0x300>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f ae9d 	bne.w	8002378 <HAL_GPIO_Init+0x10>
  }
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800
 800265c:	48000c00 	.word	0x48000c00
 8002660:	48001000 	.word	0x48001000
 8002664:	48001400 	.word	0x48001400
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002688:	e002      	b.n	8002690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43d9      	mvns	r1, r3
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	400b      	ands	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e08d      	b.n	80027fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fa1a 	bl	8001b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e006      	b.n	8002758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d108      	bne.n	8002772 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	e007      	b.n	8002782 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69d9      	ldr	r1, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	4608      	mov	r0, r1
 8002812:	4611      	mov	r1, r2
 8002814:	461a      	mov	r2, r3
 8002816:	4603      	mov	r3, r0
 8002818:	817b      	strh	r3, [r7, #10]
 800281a:	460b      	mov	r3, r1
 800281c:	813b      	strh	r3, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 80f9 	bne.w	8002a22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_I2C_Mem_Write+0x34>
 8002836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0ed      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Mem_Write+0x4e>
 8002852:	2302      	movs	r3, #2
 8002854:	e0e6      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800285e:	f7ff fc2b 	bl	80020b8 <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2319      	movs	r3, #25
 800286a:	2201      	movs	r2, #1
 800286c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fac3 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0d1      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2221      	movs	r2, #33	@ 0x21
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2240      	movs	r2, #64	@ 0x40
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a3a      	ldr	r2, [r7, #32]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a8:	88f8      	ldrh	r0, [r7, #6]
 80028aa:	893a      	ldrh	r2, [r7, #8]
 80028ac:	8979      	ldrh	r1, [r7, #10]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f9d3 	bl	8002c64 <I2C_RequestMemoryWrite>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a9      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2bff      	cmp	r3, #255	@ 0xff
 80028d8:	d90e      	bls.n	80028f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22ff      	movs	r2, #255	@ 0xff
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fc47 	bl	8003184 <I2C_TransferConfig>
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	b2da      	uxtb	r2, r3
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	2300      	movs	r3, #0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fc36 	bl	8003184 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fac6 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e07b      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d034      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x1c8>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d130      	bne.n	80029d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa3f 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e04d      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2bff      	cmp	r3, #255	@ 0xff
 8002990:	d90e      	bls.n	80029b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ff      	movs	r2, #255	@ 0xff
 8002996:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	b2da      	uxtb	r2, r3
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fbeb 	bl	8003184 <I2C_TransferConfig>
 80029ae:	e00f      	b.n	80029d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	8979      	ldrh	r1, [r7, #10]
 80029c2:	2300      	movs	r3, #0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fbda 	bl	8003184 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d19e      	bne.n	8002918 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 faac 	bl	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e01a      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2220      	movs	r2, #32
 80029f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_I2C_Mem_Write+0x224>)
 8002a02:	400b      	ands	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	460b      	mov	r3, r1
 8002a44:	813b      	strh	r3, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 80fd 	bne.w	8002c52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_I2C_Mem_Read+0x34>
 8002a5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0f1      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x4e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0ea      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a86:	f7ff fb17 	bl	80020b8 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f9af 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d5      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2222      	movs	r2, #34	@ 0x22
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2240      	movs	r2, #64	@ 0x40
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad0:	88f8      	ldrh	r0, [r7, #6]
 8002ad2:	893a      	ldrh	r2, [r7, #8]
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4603      	mov	r3, r0
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f913 	bl	8002d0c <I2C_RequestMemoryRead>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ad      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2bff      	cmp	r3, #255	@ 0xff
 8002b00:	d90e      	bls.n	8002b20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	22ff      	movs	r2, #255	@ 0xff
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <HAL_I2C_Mem_Read+0x22c>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fb33 	bl	8003184 <I2C_TransferConfig>
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	8979      	ldrh	r1, [r7, #10]
 8002b32:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <HAL_I2C_Mem_Read+0x22c>)
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fb22 	bl	8003184 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2200      	movs	r2, #0
 8002b48:	2104      	movs	r1, #4
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f956 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07c      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d034      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x1d0>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d130      	bne.n	8002c00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f927 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e04d      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2bff      	cmp	r3, #255	@ 0xff
 8002bc0:	d90e      	bls.n	8002be0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	22ff      	movs	r2, #255	@ 0xff
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fad3 	bl	8003184 <I2C_TransferConfig>
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fac2 	bl	8003184 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d19a      	bne.n	8002b40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f994 	bl	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e01a      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2220      	movs	r2, #32
 8002c24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_I2C_Mem_Read+0x230>)
 8002c32:	400b      	ands	r3, r1
 8002c34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	80002400 	.word	0x80002400
 8002c60:	fe00e800 	.word	0xfe00e800

08002c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <I2C_RequestMemoryWrite+0xa4>)
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fa79 	bl	8003184 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f909 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e02c      	b.n	8002d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cb6:	e015      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	69b9      	ldr	r1, [r7, #24]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8ef 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e012      	b.n	8002d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cda:	893b      	ldrh	r3, [r7, #8]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f884 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	80002000 	.word	0x80002000

08002d0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	817b      	strh	r3, [r7, #10]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	813b      	strh	r3, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	8979      	ldrh	r1, [r7, #10]
 8002d2c:	4b20      	ldr	r3, [pc, #128]	@ (8002db0 <I2C_RequestMemoryRead+0xa4>)
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2300      	movs	r3, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa26 	bl	8003184 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f8b6 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e02c      	b.n	8002da6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d52:	893b      	ldrh	r3, [r7, #8]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5c:	e015      	b.n	8002d8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f89c 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e012      	b.n	8002da6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2140      	movs	r1, #64	@ 0x40
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f831 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	80002000 	.word	0x80002000

08002db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d103      	bne.n	8002dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	619a      	str	r2, [r3, #24]
  }
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0c:	e03b      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8d6 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e041      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d02d      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7ff f945 	bl	80020b8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d122      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d113      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d0b4      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eba:	e033      	b.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f87f 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e031      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d025      	beq.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed8:	f7ff f8ee 	bl	80020b8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d302      	bcc.n	8002eee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11a      	bne.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d013      	beq.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e007      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d1c4      	bne.n	8002ebc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f48:	e02f      	b.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f838 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02d      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7ff f8ab 	bl	80020b8 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11a      	bne.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d013      	beq.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d1c8      	bne.n	8002f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d068      	beq.n	80030c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff8:	e049      	b.n	800308e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d045      	beq.n	800308e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f859 	bl	80020b8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_IsErrorOccurred+0x54>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d13a      	bne.n	800308e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003022:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800302a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303a:	d121      	bne.n	8003080 <I2C_IsErrorOccurred+0xbc>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003042:	d01d      	beq.n	8003080 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b20      	cmp	r3, #32
 8003048:	d01a      	beq.n	8003080 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003058:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800305a:	f7ff f82d 	bl	80020b8 <HAL_GetTick>
 800305e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	e00e      	b.n	8003080 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003062:	f7ff f829 	bl	80020b8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b19      	cmp	r3, #25
 800306e:	d907      	bls.n	8003080 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800307e:	e006      	b.n	800308e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b20      	cmp	r3, #32
 800308c:	d1e9      	bne.n	8003062 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d003      	beq.n	80030a4 <I2C_IsErrorOccurred+0xe0>
 800309c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0aa      	beq.n	8002ffa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2220      	movs	r2, #32
 80030b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003106:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01c      	beq.n	8003172 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fe3b 	bl	8002db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <I2C_IsErrorOccurred+0x1bc>)
 800314a:	400b      	ands	r3, r1
 800314c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003176:	4618      	mov	r0, r3
 8003178:	3728      	adds	r7, #40	@ 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	fe00e800 	.word	0xfe00e800

08003184 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	4613      	mov	r3, r2
 8003194:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800319c:	7a7b      	ldrb	r3, [r7, #9]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	0d5b      	lsrs	r3, r3, #21
 80031be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <I2C_TransferConfig+0x60>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	43db      	mvns	r3, r3
 80031c8:	ea02 0103 	and.w	r1, r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	03ff63ff 	.word	0x03ff63ff

080031e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d138      	bne.n	8003270 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003208:	2302      	movs	r3, #2
 800320a:	e032      	b.n	8003272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800323a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6819      	ldr	r1, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	d139      	bne.n	8003308 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800329e:	2302      	movs	r3, #2
 80032a0:	e033      	b.n	800330a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2224      	movs	r2, #36	@ 0x24
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d141      	bne.n	80033aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003326:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d131      	bne.n	8003398 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003334:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800333a:	4a46      	ldr	r2, [pc, #280]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003340:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003344:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800334c:	4a41      	ldr	r2, [pc, #260]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003352:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003354:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2232      	movs	r2, #50	@ 0x32
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	4a3f      	ldr	r2, [pc, #252]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	0c9b      	lsrs	r3, r3, #18
 8003366:	3301      	adds	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336a:	e002      	b.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3b01      	subs	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003372:	4b38      	ldr	r3, [pc, #224]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d102      	bne.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f2      	bne.n	800336c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003386:	4b33      	ldr	r3, [pc, #204]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003392:	d158      	bne.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e057      	b.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003398:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339e:	4a2d      	ldr	r2, [pc, #180]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033a8:	e04d      	b.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b0:	d141      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b2:	4b28      	ldr	r3, [pc, #160]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033be:	d131      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c0:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c6:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d0:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2232      	movs	r2, #50	@ 0x32
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	0c9b      	lsrs	r3, r3, #18
 80033f2:	3301      	adds	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f6:	e002      	b.n	80033fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fe:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340a:	d102      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f2      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003412:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d112      	bne.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e011      	b.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003434:	e007      	b.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003436:	4b07      	ldr	r3, [pc, #28]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003444:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40007000 	.word	0x40007000
 8003458:	2000000c 	.word	0x2000000c
 800345c:	431bde83 	.word	0x431bde83

08003460 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a04      	ldr	r2, [pc, #16]	@ (800347c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800346a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346e:	6093      	str	r3, [r2, #8]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e2fe      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349e:	4b97      	ldr	r3, [pc, #604]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a8:	4b94      	ldr	r3, [pc, #592]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x3e>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_OscConfig+0x44>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b8d      	ldr	r3, [pc, #564]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d157      	bne.n	8003588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e2d9      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x74>
 80034e6:	4b85      	ldr	r3, [pc, #532]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a84      	ldr	r2, [pc, #528]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x98>
 80034fe:	4b7f      	ldr	r3, [pc, #508]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b7c      	ldr	r3, [pc, #496]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7b      	ldr	r2, [pc, #492]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 8003518:	4b78      	ldr	r3, [pc, #480]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a77      	ldr	r2, [pc, #476]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b75      	ldr	r3, [pc, #468]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a74      	ldr	r2, [pc, #464]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fdbe 	bl	80020b8 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe fdba 	bl	80020b8 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e29e      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xc0>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fdaa 	bl	80020b8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe fda6 	bl	80020b8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e28a      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357a:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d075      	beq.n	8003682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003596:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a0:	4b56      	ldr	r3, [pc, #344]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0x136>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_OscConfig+0x13c>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11f      	bne.n	80035fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035bc:	4b4f      	ldr	r3, [pc, #316]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_OscConfig+0x154>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e25d      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	4946      	ldr	r1, [pc, #280]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035e8:	4b45      	ldr	r3, [pc, #276]	@ (8003700 <HAL_RCC_OscConfig+0x280>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fd17 	bl	8002020 <HAL_InitTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d043      	beq.n	8003680 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e249      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3c      	ldr	r2, [pc, #240]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe fd52 	bl	80020b8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003618:	f7fe fd4e 	bl	80020b8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e232      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362a:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	492d      	ldr	r1, [pc, #180]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
 800364a:	e01a      	b.n	8003682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2a      	ldr	r2, [pc, #168]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fd2e 	bl	80020b8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fd2a 	bl	80020b8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e20e      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003672:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1e0>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d041      	beq.n	8003712 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369c:	4a17      	ldr	r2, [pc, #92]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe fd07 	bl	80020b8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fe fd03 	bl	80020b8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1e7      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ef      	beq.n	80036ae <HAL_RCC_OscConfig+0x22e>
 80036ce:	e020      	b.n	8003712 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe fcea 	bl	80020b8 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e6:	e00d      	b.n	8003704 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fce6 	bl	80020b8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d906      	bls.n	8003704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1ca      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003704:	4b8c      	ldr	r3, [pc, #560]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ea      	bne.n	80036e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80a6 	beq.w	800386c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003724:	4b84      	ldr	r3, [pc, #528]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x2b4>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x2b6>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4b7f      	ldr	r3, [pc, #508]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	4a7e      	ldr	r2, [pc, #504]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
 8003746:	4b7c      	ldr	r3, [pc, #496]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003756:	4b79      	ldr	r3, [pc, #484]	@ (800393c <HAL_RCC_OscConfig+0x4bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003762:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCC_OscConfig+0x4bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a75      	ldr	r2, [pc, #468]	@ (800393c <HAL_RCC_OscConfig+0x4bc>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe fca3 	bl	80020b8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fc9f 	bl	80020b8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e183      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003788:	4b6c      	ldr	r3, [pc, #432]	@ (800393c <HAL_RCC_OscConfig+0x4bc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_RCC_OscConfig+0x32e>
 800379c:	4b66      	ldr	r3, [pc, #408]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	4a65      	ldr	r2, [pc, #404]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ac:	e024      	b.n	80037f8 <HAL_RCC_OscConfig+0x378>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d110      	bne.n	80037d8 <HAL_RCC_OscConfig+0x358>
 80037b6:	4b60      	ldr	r3, [pc, #384]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x378>
 80037d8:	4b57      	ldr	r3, [pc, #348]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	4a56      	ldr	r2, [pc, #344]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d016      	beq.n	800382e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe fc5a 	bl	80020b8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fc56 	bl	80020b8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e138      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381e:	4b46      	ldr	r3, [pc, #280]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ed      	beq.n	8003808 <HAL_RCC_OscConfig+0x388>
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fe fc43 	bl	80020b8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fc3f 	bl	80020b8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e121      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800384c:	4b3a      	ldr	r3, [pc, #232]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ed      	bne.n	8003836 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b35      	ldr	r3, [pc, #212]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4a34      	ldr	r2, [pc, #208]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01c      	beq.n	80038ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003886:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe fc12 	bl	80020b8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003898:	f7fe fc0e 	bl	80020b8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0f2      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038aa:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80038ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ef      	beq.n	8003898 <HAL_RCC_OscConfig+0x418>
 80038b8:	e01b      	b.n	80038f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fe fbf5 	bl	80020b8 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d2:	f7fe fbf1 	bl	80020b8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0d5      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ef      	bne.n	80038d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80c9 	beq.w	8003a8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f000 8083 	beq.w	8003a10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d15e      	bne.n	80039d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <HAL_RCC_OscConfig+0x4b8>)
 8003918:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe fbcb 	bl	80020b8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003924:	e00c      	b.n	8003940 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fbc7 	bl	80020b8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d905      	bls.n	8003940 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0ab      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ec      	bne.n	8003926 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394c:	4b52      	ldr	r3, [pc, #328]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4b52      	ldr	r3, [pc, #328]	@ (8003a9c <HAL_RCC_OscConfig+0x61c>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6a11      	ldr	r1, [r2, #32]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800395c:	3a01      	subs	r2, #1
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003966:	0212      	lsls	r2, r2, #8
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0552      	lsls	r2, r2, #21
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800397a:	0852      	lsrs	r2, r2, #1
 800397c:	3a01      	subs	r2, #1
 800397e:	0652      	lsls	r2, r2, #25
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003986:	06d2      	lsls	r2, r2, #27
 8003988:	430a      	orrs	r2, r1
 800398a:	4943      	ldr	r1, [pc, #268]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a40      	ldr	r2, [pc, #256]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fb86 	bl	80020b8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe fb82 	bl	80020b8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e066      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x530>
 80039ce:	e05e      	b.n	8003a8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a30      	ldr	r2, [pc, #192]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fb6c 	bl	80020b8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe fb68 	bl	80020b8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04c      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f6:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a02:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4924      	ldr	r1, [pc, #144]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_OscConfig+0x620>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	60cb      	str	r3, [r1, #12]
 8003a0e:	e03e      	b.n	8003a8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e039      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0203 	and.w	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d12c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d123      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d11b      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d113      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	019f800c 	.word	0x019f800c
 8003aa0:	feeefffc 	.word	0xfeeefffc

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e11e      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b91      	ldr	r3, [pc, #580]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b8e      	ldr	r3, [pc, #568]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	498c      	ldr	r1, [pc, #560]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b8a      	ldr	r3, [pc, #552]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e106      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d073      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d129      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b00:	4b81      	ldr	r3, [pc, #516]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0f4      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b10:	f000 f99e 	bl	8003e50 <RCC_GetSysClockFreqFromPLLSource>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4a7c      	ldr	r2, [pc, #496]	@ (8003d0c <HAL_RCC_ClockConfig+0x268>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d93f      	bls.n	8003b9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d033      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d12f      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b3e:	4b72      	ldr	r3, [pc, #456]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b46:	4a70      	ldr	r2, [pc, #448]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b4e:	2380      	movs	r3, #128	@ 0x80
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e024      	b.n	8003b9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0c6      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6c:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0be      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b7c:	f000 f8ce 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4a61      	ldr	r2, [pc, #388]	@ (8003d0c <HAL_RCC_ClockConfig+0x268>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d909      	bls.n	8003b9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b92:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4957      	ldr	r1, [pc, #348]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fa82 	bl	80020b8 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe fa7e 	bl	80020b8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e095      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b4e      	ldr	r3, [pc, #312]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d023      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf8:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a42      	ldr	r2, [pc, #264]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c10:	4b3d      	ldr	r3, [pc, #244]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c18:	4a3b      	ldr	r2, [pc, #236]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4936      	ldr	r1, [pc, #216]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c3a:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4a32      	ldr	r2, [pc, #200]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c46:	4b2f      	ldr	r3, [pc, #188]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d21d      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c54:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 020f 	bic.w	r2, r3, #15
 8003c5c:	4929      	ldr	r1, [pc, #164]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c64:	f7fe fa28 	bl	80020b8 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe fa24 	bl	80020b8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e03b      	b.n	8003cfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1ed      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4917      	ldr	r1, [pc, #92]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490f      	ldr	r1, [pc, #60]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cce:	f000 f825 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490c      	ldr	r1, [pc, #48]	@ (8003d10 <HAL_RCC_ClockConfig+0x26c>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_RCC_ClockConfig+0x270>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cee:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <HAL_RCC_ClockConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe f994 	bl	8002020 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	04c4b400 	.word	0x04c4b400
 8003d10:	080085b0 	.word	0x080085b0
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	20000010 	.word	0x20000010

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d22:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e047      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d34:	4b27      	ldr	r3, [pc, #156]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d40:	4b26      	ldr	r3, [pc, #152]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e03e      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d46:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d136      	bne.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3301      	adds	r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d70:	4a1a      	ldr	r2, [pc, #104]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	68d2      	ldr	r2, [r2, #12]
 8003d7c:	0a12      	lsrs	r2, r2, #8
 8003d7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	4a10      	ldr	r2, [pc, #64]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	0a12      	lsrs	r2, r2, #8
 8003d98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
      break;
 8003da2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0e5b      	lsrs	r3, r3, #25
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dc4:	693b      	ldr	r3, [r7, #16]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	080085c0 	.word	0x080085c0

08003e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e28:	f7ff ffda 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0adb      	lsrs	r3, r3, #11
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4904      	ldr	r1, [pc, #16]	@ (8003e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	080085c0 	.word	0x080085c0

08003e50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d10c      	bne.n	8003e8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68d2      	ldr	r2, [r2, #12]
 8003e80:	0a12      	lsrs	r2, r2, #8
 8003e82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	617b      	str	r3, [r7, #20]
    break;
 8003e8c:	e00c      	b.n	8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ed8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e98:	68d2      	ldr	r2, [r2, #12]
 8003e9a:	0a12      	lsrs	r2, r2, #8
 8003e9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    break;
 8003ea6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0e5b      	lsrs	r3, r3, #25
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ec2:	687b      	ldr	r3, [r7, #4]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	00f42400 	.word	0x00f42400

08003edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee8:	2300      	movs	r3, #0
 8003eea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8098 	beq.w	800402a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10d      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b40      	ldr	r3, [pc, #256]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f16:	4b3d      	ldr	r3, [pc, #244]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f26:	4b3a      	ldr	r3, [pc, #232]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a39      	ldr	r2, [pc, #228]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f32:	f7fe f8c1 	bl	80020b8 <HAL_GetTick>
 8003f36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f38:	e009      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe f8bd 	bl	80020b8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d902      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f4c:	e005      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f4e:	4b30      	ldr	r3, [pc, #192]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ef      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d159      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d019      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f7c:	4b23      	ldr	r3, [pc, #140]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f88:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fa8:	4a18      	ldr	r2, [pc, #96]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe f87d 	bl	80020b8 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc0:	e00b      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fe f879 	bl	80020b8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d902      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fda:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ec      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fee:	4b07      	ldr	r3, [pc, #28]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	4903      	ldr	r1, [pc, #12]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004004:	e008      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	74bb      	strb	r3, [r7, #18]
 800400a:	e005      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800400c:	40021000 	.word	0x40021000
 8004010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004018:	7c7b      	ldrb	r3, [r7, #17]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d105      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401e:	4ba6      	ldr	r3, [pc, #664]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004022:	4aa5      	ldr	r2, [pc, #660]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004028:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004036:	4ba0      	ldr	r3, [pc, #640]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f023 0203 	bic.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	499c      	ldr	r1, [pc, #624]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004058:	4b97      	ldr	r3, [pc, #604]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 020c 	bic.w	r2, r3, #12
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	4994      	ldr	r1, [pc, #592]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800407a:	4b8f      	ldr	r3, [pc, #572]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	498b      	ldr	r1, [pc, #556]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800409c:	4b86      	ldr	r3, [pc, #536]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	4983      	ldr	r1, [pc, #524]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040be:	4b7e      	ldr	r3, [pc, #504]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	497a      	ldr	r1, [pc, #488]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e0:	4b75      	ldr	r3, [pc, #468]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	4972      	ldr	r1, [pc, #456]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004102:	4b6d      	ldr	r3, [pc, #436]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4969      	ldr	r1, [pc, #420]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004124:	4b64      	ldr	r3, [pc, #400]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4961      	ldr	r1, [pc, #388]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004146:	4b5c      	ldr	r3, [pc, #368]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	4958      	ldr	r1, [pc, #352]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004168:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	4950      	ldr	r1, [pc, #320]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a4a      	ldr	r2, [pc, #296]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004192:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a0:	4b45      	ldr	r3, [pc, #276]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4942      	ldr	r1, [pc, #264]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b3d      	ldr	r3, [pc, #244]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041d8:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	4934      	ldr	r1, [pc, #208]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f8:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a2e      	ldr	r2, [pc, #184]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004202:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004216:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	4926      	ldr	r1, [pc, #152]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800423a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	4918      	ldr	r1, [pc, #96]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004280:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	490a      	ldr	r1, [pc, #40]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000

080042bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e049      	b.n	8004362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fc9a 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f000 fb12 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e04a      	b.n	800441a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <HAL_TIM_Base_Start_IT+0xbc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ae:	d013      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <HAL_TIM_Base_Start_IT+0xc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1c      	ldr	r2, [pc, #112]	@ (8004430 <HAL_TIM_Base_Start_IT+0xc4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <HAL_TIM_Base_Start_IT+0xc8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <HAL_TIM_Base_Start_IT+0xcc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d115      	bne.n	8004404 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	4b17      	ldr	r3, [pc, #92]	@ (800443c <HAL_TIM_Base_Start_IT+0xd0>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d015      	beq.n	8004416 <HAL_TIM_Base_Start_IT+0xaa>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f0:	d011      	beq.n	8004416 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	e008      	b.n	8004416 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e000      	b.n	8004418 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40013400 	.word	0x40013400
 8004438:	40014000 	.word	0x40014000
 800443c:	00010007 	.word	0x00010007

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d020      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0202 	mvn.w	r2, #2
 8004474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa2c 	bl	80048e8 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa1e 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fa2f 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d020      	beq.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa06 	bl	80048e8 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9f8 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa09 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0208 	mvn.w	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2204      	movs	r2, #4
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9e0 	bl	80048e8 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d2 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f9e3 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0210 	mvn.w	r2, #16
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2208      	movs	r2, #8
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9ba 	bl	80048e8 <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9ac 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9bd 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0201 	mvn.w	r2, #1
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc feda 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb69 	bl	8004cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fb61 	bl	8004cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f977 	bl	8004910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f06f 0220 	mvn.w	r2, #32
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fb29 	bl	8004c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00c      	beq.n	800466a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb35 	bl	8004cd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fb2d 	bl	8004ce8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fb25 	bl	8004cfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80046ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb1d 	bl	8004d10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_ConfigClockSource+0x1c>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e0de      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x1da>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800471a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a63      	ldr	r2, [pc, #396]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f000 80a9 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 800473c:	4a61      	ldr	r2, [pc, #388]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f200 80ae 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004744:	4a60      	ldr	r2, [pc, #384]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	f000 80a1 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 800474c:	4a5e      	ldr	r2, [pc, #376]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f200 80a6 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004754:	4a5d      	ldr	r2, [pc, #372]	@ (80048cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004756:	4293      	cmp	r3, r2
 8004758:	f000 8099 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 800475c:	4a5b      	ldr	r2, [pc, #364]	@ (80048cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800475e:	4293      	cmp	r3, r2
 8004760:	f200 809e 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004764:	4a5a      	ldr	r2, [pc, #360]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f000 8091 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 800476c:	4a58      	ldr	r2, [pc, #352]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	f200 8096 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004778:	f000 8089 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 800477c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004780:	f200 808e 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004788:	d03e      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0x128>
 800478a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478e:	f200 8087 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004796:	f000 8086 	beq.w	80048a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479e:	d87f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047a0:	2b70      	cmp	r3, #112	@ 0x70
 80047a2:	d01a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0xfa>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d87b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047a8:	2b60      	cmp	r3, #96	@ 0x60
 80047aa:	d050      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d877      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047b0:	2b50      	cmp	r3, #80	@ 0x50
 80047b2:	d03c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x14e>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d873      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047b8:	2b40      	cmp	r3, #64	@ 0x40
 80047ba:	d058      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x18e>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d86f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047c0:	2b30      	cmp	r3, #48	@ 0x30
 80047c2:	d064      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d86b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d060      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d867      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d05a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1ae>
 80047d8:	e062      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	f000 f9b3 	bl	8004b54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	609a      	str	r2, [r3, #8]
      break;
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	f000 f99c 	bl	8004b54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e03c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f90e 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2150      	movs	r1, #80	@ 0x50
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f967 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800484c:	e02c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f92d 	bl	8004aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2160      	movs	r1, #96	@ 0x60
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f957 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800486c:	e01c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f8ee 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2140      	movs	r1, #64	@ 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f947 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800488c:	e00c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 f93e 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800489e:	e003      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80048a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	00100070 	.word	0x00100070
 80048c8:	00100040 	.word	0x00100040
 80048cc:	00100030 	.word	0x00100030
 80048d0:	00100020 	.word	0x00100020

080048d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00f      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3f      	ldr	r2, [pc, #252]	@ (8004a44 <TIM_Base_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a48 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3d      	ldr	r2, [pc, #244]	@ (8004a4c <TIM_Base_SetConfig+0x128>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a33      	ldr	r2, [pc, #204]	@ (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d017      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <TIM_Base_SetConfig+0x120>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <TIM_Base_SetConfig+0x124>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00f      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <TIM_Base_SetConfig+0x128>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <TIM_Base_SetConfig+0x12c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <TIM_Base_SetConfig+0x130>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <TIM_Base_SetConfig+0x134>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <TIM_Base_SetConfig+0x11c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0xe8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <TIM_Base_SetConfig+0x128>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0xe8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <TIM_Base_SetConfig+0x12c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0xe8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <TIM_Base_SetConfig+0x130>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xe8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a14      	ldr	r2, [pc, #80]	@ (8004a58 <TIM_Base_SetConfig+0x134>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]
  }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40013400 	.word	0x40013400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 030a 	bic.w	r3, r3, #10
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0210 	bic.w	r2, r3, #16
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f043 0307 	orr.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e065      	b.n	8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2b      	ldr	r2, [pc, #172]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d108      	bne.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004be6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c22:	d013      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a12      	ldr	r2, [pc, #72]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d10c      	bne.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40014000 	.word	0x40014000

08004c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e042      	b.n	8004dbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fc ffc5 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2224      	movs	r2, #36	@ 0x24
 8004d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fb82 	bl	8005478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8b3 	bl	8004ee0 <UART_SetConfig>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e01b      	b.n	8004dbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fc01 	bl	80055bc <UART_CheckIdleState>
 8004dba:	4603      	mov	r3, r0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	@ 0x28
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d17b      	bne.n	8004ed6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_UART_Transmit+0x26>
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e074      	b.n	8004ed8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2221      	movs	r2, #33	@ 0x21
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dfe:	f7fd f95b 	bl	80020b8 <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1c:	d108      	bne.n	8004e30 <HAL_UART_Transmit+0x6c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e003      	b.n	8004e38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e38:	e030      	b.n	8004e9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2180      	movs	r1, #128	@ 0x80
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fc63 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e03d      	b.n	8004ed8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	3302      	adds	r3, #2
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	e007      	b.n	8004e8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3301      	adds	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1c8      	bne.n	8004e3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2140      	movs	r1, #64	@ 0x40
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fc2c 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e006      	b.n	8004ed8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee4:	b08c      	sub	sp, #48	@ 0x30
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4bab      	ldr	r3, [pc, #684]	@ (80051bc <UART_SetConfig+0x2dc>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4aa0      	ldr	r2, [pc, #640]	@ (80051c0 <UART_SetConfig+0x2e0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	f023 010f 	bic.w	r1, r3, #15
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a91      	ldr	r2, [pc, #580]	@ (80051c4 <UART_SetConfig+0x2e4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d125      	bne.n	8004fd0 <UART_SetConfig+0xf0>
 8004f84:	4b90      	ldr	r3, [pc, #576]	@ (80051c8 <UART_SetConfig+0x2e8>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d81a      	bhi.n	8004fc8 <UART_SetConfig+0xe8>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0xb8>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e0d6      	b.n	800515e <UART_SetConfig+0x27e>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e0d2      	b.n	800515e <UART_SetConfig+0x27e>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e0ce      	b.n	800515e <UART_SetConfig+0x27e>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e0ca      	b.n	800515e <UART_SetConfig+0x27e>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e0c6      	b.n	800515e <UART_SetConfig+0x27e>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80051cc <UART_SetConfig+0x2ec>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d138      	bne.n	800504c <UART_SetConfig+0x16c>
 8004fda:	4b7b      	ldr	r3, [pc, #492]	@ (80051c8 <UART_SetConfig+0x2e8>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	d82d      	bhi.n	8005044 <UART_SetConfig+0x164>
 8004fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff0 <UART_SetConfig+0x110>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	08005045 	.word	0x08005045
 8005000:	08005035 	.word	0x08005035
 8005004:	08005045 	.word	0x08005045
 8005008:	08005045 	.word	0x08005045
 800500c:	08005045 	.word	0x08005045
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005045 	.word	0x08005045
 8005018:	08005045 	.word	0x08005045
 800501c:	08005045 	.word	0x08005045
 8005020:	0800503d 	.word	0x0800503d
 8005024:	2300      	movs	r3, #0
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502a:	e098      	b.n	800515e <UART_SetConfig+0x27e>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005032:	e094      	b.n	800515e <UART_SetConfig+0x27e>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e090      	b.n	800515e <UART_SetConfig+0x27e>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e08c      	b.n	800515e <UART_SetConfig+0x27e>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e088      	b.n	800515e <UART_SetConfig+0x27e>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5f      	ldr	r2, [pc, #380]	@ (80051d0 <UART_SetConfig+0x2f0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d125      	bne.n	80050a2 <UART_SetConfig+0x1c2>
 8005056:	4b5c      	ldr	r3, [pc, #368]	@ (80051c8 <UART_SetConfig+0x2e8>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d016      	beq.n	8005092 <UART_SetConfig+0x1b2>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d818      	bhi.n	800509a <UART_SetConfig+0x1ba>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d00a      	beq.n	8005082 <UART_SetConfig+0x1a2>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d814      	bhi.n	800509a <UART_SetConfig+0x1ba>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <UART_SetConfig+0x19a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d008      	beq.n	800508a <UART_SetConfig+0x1aa>
 8005078:	e00f      	b.n	800509a <UART_SetConfig+0x1ba>
 800507a:	2300      	movs	r3, #0
 800507c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005080:	e06d      	b.n	800515e <UART_SetConfig+0x27e>
 8005082:	2302      	movs	r3, #2
 8005084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005088:	e069      	b.n	800515e <UART_SetConfig+0x27e>
 800508a:	2304      	movs	r3, #4
 800508c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005090:	e065      	b.n	800515e <UART_SetConfig+0x27e>
 8005092:	2308      	movs	r3, #8
 8005094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005098:	e061      	b.n	800515e <UART_SetConfig+0x27e>
 800509a:	2310      	movs	r3, #16
 800509c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a0:	e05d      	b.n	800515e <UART_SetConfig+0x27e>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4b      	ldr	r2, [pc, #300]	@ (80051d4 <UART_SetConfig+0x2f4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d125      	bne.n	80050f8 <UART_SetConfig+0x218>
 80050ac:	4b46      	ldr	r3, [pc, #280]	@ (80051c8 <UART_SetConfig+0x2e8>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b8:	d016      	beq.n	80050e8 <UART_SetConfig+0x208>
 80050ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80050bc:	d818      	bhi.n	80050f0 <UART_SetConfig+0x210>
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d00a      	beq.n	80050d8 <UART_SetConfig+0x1f8>
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d814      	bhi.n	80050f0 <UART_SetConfig+0x210>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <UART_SetConfig+0x1f0>
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d008      	beq.n	80050e0 <UART_SetConfig+0x200>
 80050ce:	e00f      	b.n	80050f0 <UART_SetConfig+0x210>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d6:	e042      	b.n	800515e <UART_SetConfig+0x27e>
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050de:	e03e      	b.n	800515e <UART_SetConfig+0x27e>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e6:	e03a      	b.n	800515e <UART_SetConfig+0x27e>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ee:	e036      	b.n	800515e <UART_SetConfig+0x27e>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f6:	e032      	b.n	800515e <UART_SetConfig+0x27e>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a30      	ldr	r2, [pc, #192]	@ (80051c0 <UART_SetConfig+0x2e0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d12a      	bne.n	8005158 <UART_SetConfig+0x278>
 8005102:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <UART_SetConfig+0x2e8>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800510c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005110:	d01a      	beq.n	8005148 <UART_SetConfig+0x268>
 8005112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005116:	d81b      	bhi.n	8005150 <UART_SetConfig+0x270>
 8005118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511c:	d00c      	beq.n	8005138 <UART_SetConfig+0x258>
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005122:	d815      	bhi.n	8005150 <UART_SetConfig+0x270>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <UART_SetConfig+0x250>
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512c:	d008      	beq.n	8005140 <UART_SetConfig+0x260>
 800512e:	e00f      	b.n	8005150 <UART_SetConfig+0x270>
 8005130:	2300      	movs	r3, #0
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005136:	e012      	b.n	800515e <UART_SetConfig+0x27e>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513e:	e00e      	b.n	800515e <UART_SetConfig+0x27e>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005146:	e00a      	b.n	800515e <UART_SetConfig+0x27e>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514e:	e006      	b.n	800515e <UART_SetConfig+0x27e>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e002      	b.n	800515e <UART_SetConfig+0x27e>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <UART_SetConfig+0x2e0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	f040 80a8 	bne.w	80052ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800516a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800516e:	2b08      	cmp	r3, #8
 8005170:	d834      	bhi.n	80051dc <UART_SetConfig+0x2fc>
 8005172:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0x298>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051dd 	.word	0x080051dd
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051ab 	.word	0x080051ab
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051dd 	.word	0x080051dd
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051b3 	.word	0x080051b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fe fe2c 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80051a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051a2:	e021      	b.n	80051e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <UART_SetConfig+0x2f8>)
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051a8:	e01e      	b.n	80051e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051aa:	f7fe fdb7 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051b0:	e01a      	b.n	80051e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051b8:	e016      	b.n	80051e8 <UART_SetConfig+0x308>
 80051ba:	bf00      	nop
 80051bc:	cfff69f3 	.word	0xcfff69f3
 80051c0:	40008000 	.word	0x40008000
 80051c4:	40013800 	.word	0x40013800
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40004400 	.word	0x40004400
 80051d0:	40004800 	.word	0x40004800
 80051d4:	40004c00 	.word	0x40004c00
 80051d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 812a 	beq.w	8005444 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005470 <UART_SetConfig+0x590>)
 80051f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051fa:	461a      	mov	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005202:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d305      	bcc.n	8005220 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	429a      	cmp	r2, r3
 800521e:	d903      	bls.n	8005228 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005226:	e10d      	b.n	8005444 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	2200      	movs	r2, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	60fa      	str	r2, [r7, #12]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	4a8e      	ldr	r2, [pc, #568]	@ (8005470 <UART_SetConfig+0x590>)
 8005236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523a:	b29b      	uxth	r3, r3
 800523c:	2200      	movs	r2, #0
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800524a:	f7fb fd25 	bl	8000c98 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	020b      	lsls	r3, r1, #8
 8005260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005264:	0202      	lsls	r2, r0, #8
 8005266:	6979      	ldr	r1, [r7, #20]
 8005268:	6849      	ldr	r1, [r1, #4]
 800526a:	0849      	lsrs	r1, r1, #1
 800526c:	2000      	movs	r0, #0
 800526e:	460c      	mov	r4, r1
 8005270:	4605      	mov	r5, r0
 8005272:	eb12 0804 	adds.w	r8, r2, r4
 8005276:	eb43 0905 	adc.w	r9, r3, r5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	469a      	mov	sl, r3
 8005282:	4693      	mov	fp, r2
 8005284:	4652      	mov	r2, sl
 8005286:	465b      	mov	r3, fp
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	f7fb fd04 	bl	8000c98 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4613      	mov	r3, r2
 8005296:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d308      	bcc.n	80052b2 <UART_SetConfig+0x3d2>
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a6:	d204      	bcs.n	80052b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	e0c8      	b.n	8005444 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052b8:	e0c4      	b.n	8005444 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c2:	d167      	bne.n	8005394 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80052c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d828      	bhi.n	800531e <UART_SetConfig+0x43e>
 80052cc:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <UART_SetConfig+0x3f4>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	0800531f 	.word	0x0800531f
 80052e4:	0800530f 	.word	0x0800530f
 80052e8:	0800531f 	.word	0x0800531f
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	08005317 	.word	0x08005317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe fd7e 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052fe:	e014      	b.n	800532a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fe fd90 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005306:	e010      	b.n	800532a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005308:	4b5a      	ldr	r3, [pc, #360]	@ (8005474 <UART_SetConfig+0x594>)
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800530c:	e00d      	b.n	800532a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530e:	f7fe fd05 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8005312:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005314:	e009      	b.n	800532a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800531c:	e005      	b.n	800532a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8089 	beq.w	8005444 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <UART_SetConfig+0x590>)
 8005338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533c:	461a      	mov	r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	fbb3 f3f2 	udiv	r3, r3, r2
 8005344:	005a      	lsls	r2, r3, #1
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	441a      	add	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	2b0f      	cmp	r3, #15
 800535c:	d916      	bls.n	800538c <UART_SetConfig+0x4ac>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005364:	d212      	bcs.n	800538c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f023 030f 	bic.w	r3, r3, #15
 800536e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	b29b      	uxth	r3, r3
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	b29a      	uxth	r2, r3
 800537c:	8bfb      	ldrh	r3, [r7, #30]
 800537e:	4313      	orrs	r3, r2
 8005380:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	8bfa      	ldrh	r2, [r7, #30]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e05b      	b.n	8005444 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005392:	e057      	b.n	8005444 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005394:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005398:	2b08      	cmp	r3, #8
 800539a:	d828      	bhi.n	80053ee <UART_SetConfig+0x50e>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <UART_SetConfig+0x4c4>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	080053ef 	.word	0x080053ef
 80053c0:	080053ef 	.word	0x080053ef
 80053c4:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fd16 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ce:	e014      	b.n	80053fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fe fd28 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d6:	e010      	b.n	80053fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b26      	ldr	r3, [pc, #152]	@ (8005474 <UART_SetConfig+0x594>)
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053dc:	e00d      	b.n	80053fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fe fc9d 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053e4:	e009      	b.n	80053fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ec:	e005      	b.n	80053fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053f8:	bf00      	nop
    }

    if (pclk != 0U)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d021      	beq.n	8005444 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	4a1a      	ldr	r2, [pc, #104]	@ (8005470 <UART_SetConfig+0x590>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	461a      	mov	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	441a      	add	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d909      	bls.n	800543e <UART_SetConfig+0x55e>
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	d205      	bcs.n	800543e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	b29a      	uxth	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	e002      	b.n	8005444 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2201      	movs	r2, #1
 8005448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2201      	movs	r2, #1
 8005450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005464:	4618      	mov	r0, r3
 8005466:	3730      	adds	r7, #48	@ 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546e:	bf00      	nop
 8005470:	080085c8 	.word	0x080085c8
 8005474:	00f42400 	.word	0x00f42400

08005478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01a      	beq.n	800558e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005576:	d10a      	bne.n	800558e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b098      	sub	sp, #96	@ 0x60
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055cc:	f7fc fd74 	bl	80020b8 <HAL_GetTick>
 80055d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d12f      	bne.n	8005640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f88e 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d022      	beq.n	8005640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005618:	647b      	str	r3, [r7, #68]	@ 0x44
 800561a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800561e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e063      	b.n	8005708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d149      	bne.n	80056e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005656:	2200      	movs	r2, #0
 8005658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f857 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d03c      	beq.n	80056e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	623b      	str	r3, [r7, #32]
   return(result);
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800567c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
 8005688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800568c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ba:	61fa      	str	r2, [r7, #28]
 80056bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	617b      	str	r3, [r7, #20]
   return(result);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e012      	b.n	8005708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3758      	adds	r7, #88	@ 0x58
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005720:	e04f      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d04b      	beq.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fc fcc5 	bl	80020b8 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <UART_WaitOnFlagUntilTimeout+0x30>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e04e      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d037      	beq.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b80      	cmp	r3, #128	@ 0x80
 8005756:	d034      	beq.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d031      	beq.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d110      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f838 	bl	80057ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2208      	movs	r2, #8
 800577e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e029      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800579c:	d111      	bne.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f81e 	bl	80057ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e00f      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d0a0      	beq.n	8005722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b095      	sub	sp, #84	@ 0x54
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
 8005812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e6      	bne.n	80057f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	61fb      	str	r3, [r7, #28]
   return(result);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800584a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e3      	bne.n	8005824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d118      	bne.n	8005896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60bb      	str	r3, [r7, #8]
   return(result);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	647b      	str	r3, [r7, #68]	@ 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6979      	ldr	r1, [r7, #20]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	613b      	str	r3, [r7, #16]
   return(result);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058aa:	bf00      	nop
 80058ac:	3754      	adds	r7, #84	@ 0x54
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_UARTEx_DisableFifoMode+0x16>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e027      	b.n	800591c <HAL_UARTEx_DisableFifoMode+0x66>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2224      	movs	r2, #36	@ 0x24
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e02d      	b.n	800599c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	@ 0x24
 800594c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f84f 	bl	8005a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e02d      	b.n	8005a18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	@ 0x24
 80059c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f811 	bl	8005a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d108      	bne.n	8005a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a40:	e031      	b.n	8005aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a42:	2308      	movs	r3, #8
 8005a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a46:	2308      	movs	r3, #8
 8005a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	0e5b      	lsrs	r3, r3, #25
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	0f5b      	lsrs	r3, r3, #29
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	7b3a      	ldrb	r2, [r7, #12]
 8005a6e:	4911      	ldr	r1, [pc, #68]	@ (8005ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8005a70:	5c8a      	ldrb	r2, [r1, r2]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a76:	7b3a      	ldrb	r2, [r7, #12]
 8005a78:	490f      	ldr	r1, [pc, #60]	@ (8005ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8005a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	7b7a      	ldrb	r2, [r7, #13]
 8005a8c:	4909      	ldr	r1, [pc, #36]	@ (8005ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8005a8e:	5c8a      	ldrb	r2, [r1, r2]
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a94:	7b7a      	ldrb	r2, [r7, #13]
 8005a96:	4908      	ldr	r1, [pc, #32]	@ (8005ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8005a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	080085e0 	.word	0x080085e0
 8005ab8:	080085e8 	.word	0x080085e8

08005abc <__cvt>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	463b      	mov	r3, r7
 8005acc:	bfbb      	ittet	lt
 8005ace:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ad2:	461f      	movlt	r7, r3
 8005ad4:	2300      	movge	r3, #0
 8005ad6:	232d      	movlt	r3, #45	@ 0x2d
 8005ad8:	700b      	strb	r3, [r1, #0]
 8005ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005adc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ae0:	4691      	mov	r9, r2
 8005ae2:	f023 0820 	bic.w	r8, r3, #32
 8005ae6:	bfbc      	itt	lt
 8005ae8:	4632      	movlt	r2, r6
 8005aea:	4616      	movlt	r6, r2
 8005aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005af0:	d005      	beq.n	8005afe <__cvt+0x42>
 8005af2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005af6:	d100      	bne.n	8005afa <__cvt+0x3e>
 8005af8:	3401      	adds	r4, #1
 8005afa:	2102      	movs	r1, #2
 8005afc:	e000      	b.n	8005b00 <__cvt+0x44>
 8005afe:	2103      	movs	r1, #3
 8005b00:	ab03      	add	r3, sp, #12
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	ab02      	add	r3, sp, #8
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	ec47 6b10 	vmov	d0, r6, r7
 8005b0c:	4653      	mov	r3, sl
 8005b0e:	4622      	mov	r2, r4
 8005b10:	f000 ff0a 	bl	8006928 <_dtoa_r>
 8005b14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b18:	4605      	mov	r5, r0
 8005b1a:	d119      	bne.n	8005b50 <__cvt+0x94>
 8005b1c:	f019 0f01 	tst.w	r9, #1
 8005b20:	d00e      	beq.n	8005b40 <__cvt+0x84>
 8005b22:	eb00 0904 	add.w	r9, r0, r4
 8005b26:	2200      	movs	r2, #0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fff3 	bl	8000b18 <__aeabi_dcmpeq>
 8005b32:	b108      	cbz	r0, 8005b38 <__cvt+0x7c>
 8005b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b38:	2230      	movs	r2, #48	@ 0x30
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	454b      	cmp	r3, r9
 8005b3e:	d31e      	bcc.n	8005b7e <__cvt+0xc2>
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b44:	1b5b      	subs	r3, r3, r5
 8005b46:	4628      	mov	r0, r5
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	b004      	add	sp, #16
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b54:	eb00 0904 	add.w	r9, r0, r4
 8005b58:	d1e5      	bne.n	8005b26 <__cvt+0x6a>
 8005b5a:	7803      	ldrb	r3, [r0, #0]
 8005b5c:	2b30      	cmp	r3, #48	@ 0x30
 8005b5e:	d10a      	bne.n	8005b76 <__cvt+0xba>
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa ffd6 	bl	8000b18 <__aeabi_dcmpeq>
 8005b6c:	b918      	cbnz	r0, 8005b76 <__cvt+0xba>
 8005b6e:	f1c4 0401 	rsb	r4, r4, #1
 8005b72:	f8ca 4000 	str.w	r4, [sl]
 8005b76:	f8da 3000 	ldr.w	r3, [sl]
 8005b7a:	4499      	add	r9, r3
 8005b7c:	e7d3      	b.n	8005b26 <__cvt+0x6a>
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	9103      	str	r1, [sp, #12]
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e7d9      	b.n	8005b3a <__cvt+0x7e>

08005b86 <__exponent>:
 8005b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	bfba      	itte	lt
 8005b8c:	4249      	neglt	r1, r1
 8005b8e:	232d      	movlt	r3, #45	@ 0x2d
 8005b90:	232b      	movge	r3, #43	@ 0x2b
 8005b92:	2909      	cmp	r1, #9
 8005b94:	7002      	strb	r2, [r0, #0]
 8005b96:	7043      	strb	r3, [r0, #1]
 8005b98:	dd29      	ble.n	8005bee <__exponent+0x68>
 8005b9a:	f10d 0307 	add.w	r3, sp, #7
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	270a      	movs	r7, #10
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ba8:	fb07 1416 	mls	r4, r7, r6, r1
 8005bac:	3430      	adds	r4, #48	@ 0x30
 8005bae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	2c63      	cmp	r4, #99	@ 0x63
 8005bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bba:	4631      	mov	r1, r6
 8005bbc:	dcf1      	bgt.n	8005ba2 <__exponent+0x1c>
 8005bbe:	3130      	adds	r1, #48	@ 0x30
 8005bc0:	1e94      	subs	r4, r2, #2
 8005bc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bc6:	1c41      	adds	r1, r0, #1
 8005bc8:	4623      	mov	r3, r4
 8005bca:	42ab      	cmp	r3, r5
 8005bcc:	d30a      	bcc.n	8005be4 <__exponent+0x5e>
 8005bce:	f10d 0309 	add.w	r3, sp, #9
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	42ac      	cmp	r4, r5
 8005bd6:	bf88      	it	hi
 8005bd8:	2300      	movhi	r3, #0
 8005bda:	3302      	adds	r3, #2
 8005bdc:	4403      	add	r3, r0
 8005bde:	1a18      	subs	r0, r3, r0
 8005be0:	b003      	add	sp, #12
 8005be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005be8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bec:	e7ed      	b.n	8005bca <__exponent+0x44>
 8005bee:	2330      	movs	r3, #48	@ 0x30
 8005bf0:	3130      	adds	r1, #48	@ 0x30
 8005bf2:	7083      	strb	r3, [r0, #2]
 8005bf4:	70c1      	strb	r1, [r0, #3]
 8005bf6:	1d03      	adds	r3, r0, #4
 8005bf8:	e7f1      	b.n	8005bde <__exponent+0x58>
	...

08005bfc <_printf_float>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	b08d      	sub	sp, #52	@ 0x34
 8005c02:	460c      	mov	r4, r1
 8005c04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c08:	4616      	mov	r6, r2
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	f000 fd89 	bl	8006724 <_localeconv_r>
 8005c12:	6803      	ldr	r3, [r0, #0]
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fb52 	bl	80002c0 <strlen>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c20:	f8d8 3000 	ldr.w	r3, [r8]
 8005c24:	9005      	str	r0, [sp, #20]
 8005c26:	3307      	adds	r3, #7
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	f103 0208 	add.w	r2, r3, #8
 8005c30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c34:	f8d4 b000 	ldr.w	fp, [r4]
 8005c38:	f8c8 2000 	str.w	r2, [r8]
 8005c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c52:	4b9c      	ldr	r3, [pc, #624]	@ (8005ec4 <_printf_float+0x2c8>)
 8005c54:	f04f 32ff 	mov.w	r2, #4294967295
 8005c58:	f7fa ff90 	bl	8000b7c <__aeabi_dcmpun>
 8005c5c:	bb70      	cbnz	r0, 8005cbc <_printf_float+0xc0>
 8005c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c62:	4b98      	ldr	r3, [pc, #608]	@ (8005ec4 <_printf_float+0x2c8>)
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	f7fa ff6a 	bl	8000b40 <__aeabi_dcmple>
 8005c6c:	bb30      	cbnz	r0, 8005cbc <_printf_float+0xc0>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	4640      	mov	r0, r8
 8005c74:	4649      	mov	r1, r9
 8005c76:	f7fa ff59 	bl	8000b2c <__aeabi_dcmplt>
 8005c7a:	b110      	cbz	r0, 8005c82 <_printf_float+0x86>
 8005c7c:	232d      	movs	r3, #45	@ 0x2d
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c82:	4a91      	ldr	r2, [pc, #580]	@ (8005ec8 <_printf_float+0x2cc>)
 8005c84:	4b91      	ldr	r3, [pc, #580]	@ (8005ecc <_printf_float+0x2d0>)
 8005c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c8a:	bf94      	ite	ls
 8005c8c:	4690      	movls	r8, r2
 8005c8e:	4698      	movhi	r8, r3
 8005c90:	2303      	movs	r3, #3
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	f02b 0304 	bic.w	r3, fp, #4
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	9700      	str	r7, [sp, #0]
 8005ca0:	4633      	mov	r3, r6
 8005ca2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f9d2 	bl	8006050 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	f040 808d 	bne.w	8005dcc <_printf_float+0x1d0>
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	b00d      	add	sp, #52	@ 0x34
 8005cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	f7fa ff5a 	bl	8000b7c <__aeabi_dcmpun>
 8005cc8:	b140      	cbz	r0, 8005cdc <_printf_float+0xe0>
 8005cca:	464b      	mov	r3, r9
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bfbc      	itt	lt
 8005cd0:	232d      	movlt	r3, #45	@ 0x2d
 8005cd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed0 <_printf_float+0x2d4>)
 8005cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ed4 <_printf_float+0x2d8>)
 8005cda:	e7d4      	b.n	8005c86 <_printf_float+0x8a>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ce2:	9206      	str	r2, [sp, #24]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	d13b      	bne.n	8005d60 <_printf_float+0x164>
 8005ce8:	2306      	movs	r3, #6
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8005cf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005cfc:	ab09      	add	r3, sp, #36	@ 0x24
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	6861      	ldr	r1, [r4, #4]
 8005d02:	ec49 8b10 	vmov	d0, r8, r9
 8005d06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7ff fed6 	bl	8005abc <__cvt>
 8005d10:	9b06      	ldr	r3, [sp, #24]
 8005d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d14:	2b47      	cmp	r3, #71	@ 0x47
 8005d16:	4680      	mov	r8, r0
 8005d18:	d129      	bne.n	8005d6e <_printf_float+0x172>
 8005d1a:	1cc8      	adds	r0, r1, #3
 8005d1c:	db02      	blt.n	8005d24 <_printf_float+0x128>
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	4299      	cmp	r1, r3
 8005d22:	dd41      	ble.n	8005da8 <_printf_float+0x1ac>
 8005d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d28:	fa5f fa8a 	uxtb.w	sl, sl
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	4652      	mov	r2, sl
 8005d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d34:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d36:	f7ff ff26 	bl	8005b86 <__exponent>
 8005d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d3c:	1813      	adds	r3, r2, r0
 8005d3e:	2a01      	cmp	r2, #1
 8005d40:	4681      	mov	r9, r0
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	dc02      	bgt.n	8005d4c <_printf_float+0x150>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	07d2      	lsls	r2, r2, #31
 8005d4a:	d501      	bpl.n	8005d50 <_printf_float+0x154>
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0a2      	beq.n	8005c9e <_printf_float+0xa2>
 8005d58:	232d      	movs	r3, #45	@ 0x2d
 8005d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d5e:	e79e      	b.n	8005c9e <_printf_float+0xa2>
 8005d60:	9a06      	ldr	r2, [sp, #24]
 8005d62:	2a47      	cmp	r2, #71	@ 0x47
 8005d64:	d1c2      	bne.n	8005cec <_printf_float+0xf0>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1c0      	bne.n	8005cec <_printf_float+0xf0>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7bd      	b.n	8005cea <_printf_float+0xee>
 8005d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d72:	d9db      	bls.n	8005d2c <_printf_float+0x130>
 8005d74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d78:	d118      	bne.n	8005dac <_printf_float+0x1b0>
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	dd0b      	ble.n	8005d98 <_printf_float+0x19c>
 8005d80:	6121      	str	r1, [r4, #16]
 8005d82:	b913      	cbnz	r3, 8005d8a <_printf_float+0x18e>
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	07d0      	lsls	r0, r2, #31
 8005d88:	d502      	bpl.n	8005d90 <_printf_float+0x194>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	e7db      	b.n	8005d50 <_printf_float+0x154>
 8005d98:	b913      	cbnz	r3, 8005da0 <_printf_float+0x1a4>
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	07d2      	lsls	r2, r2, #31
 8005d9e:	d501      	bpl.n	8005da4 <_printf_float+0x1a8>
 8005da0:	3302      	adds	r3, #2
 8005da2:	e7f4      	b.n	8005d8e <_printf_float+0x192>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x192>
 8005da8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dae:	4299      	cmp	r1, r3
 8005db0:	db05      	blt.n	8005dbe <_printf_float+0x1c2>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6121      	str	r1, [r4, #16]
 8005db6:	07d8      	lsls	r0, r3, #31
 8005db8:	d5ea      	bpl.n	8005d90 <_printf_float+0x194>
 8005dba:	1c4b      	adds	r3, r1, #1
 8005dbc:	e7e7      	b.n	8005d8e <_printf_float+0x192>
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	bfd4      	ite	le
 8005dc2:	f1c1 0202 	rsble	r2, r1, #2
 8005dc6:	2201      	movgt	r2, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	e7e0      	b.n	8005d8e <_printf_float+0x192>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	055a      	lsls	r2, r3, #21
 8005dd0:	d407      	bmi.n	8005de2 <_printf_float+0x1e6>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d12b      	bne.n	8005e38 <_printf_float+0x23c>
 8005de0:	e767      	b.n	8005cb2 <_printf_float+0xb6>
 8005de2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005de6:	f240 80dd 	bls.w	8005fa4 <_printf_float+0x3a8>
 8005dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	f7fa fe91 	bl	8000b18 <__aeabi_dcmpeq>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d033      	beq.n	8005e62 <_printf_float+0x266>
 8005dfa:	4a37      	ldr	r2, [pc, #220]	@ (8005ed8 <_printf_float+0x2dc>)
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	f43f af54 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e0e:	4543      	cmp	r3, r8
 8005e10:	db02      	blt.n	8005e18 <_printf_float+0x21c>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07d8      	lsls	r0, r3, #31
 8005e16:	d50f      	bpl.n	8005e38 <_printf_float+0x23c>
 8005e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f af45 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e28:	f04f 0900 	mov.w	r9, #0
 8005e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e30:	f104 0a1a 	add.w	sl, r4, #26
 8005e34:	45c8      	cmp	r8, r9
 8005e36:	dc09      	bgt.n	8005e4c <_printf_float+0x250>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	079b      	lsls	r3, r3, #30
 8005e3c:	f100 8103 	bmi.w	8006046 <_printf_float+0x44a>
 8005e40:	68e0      	ldr	r0, [r4, #12]
 8005e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e44:	4298      	cmp	r0, r3
 8005e46:	bfb8      	it	lt
 8005e48:	4618      	movlt	r0, r3
 8005e4a:	e734      	b.n	8005cb6 <_printf_float+0xba>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4652      	mov	r2, sl
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af2b 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e5c:	f109 0901 	add.w	r9, r9, #1
 8005e60:	e7e8      	b.n	8005e34 <_printf_float+0x238>
 8005e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dc39      	bgt.n	8005edc <_printf_float+0x2e0>
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <_printf_float+0x2dc>)
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f af1d 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e7c:	ea59 0303 	orrs.w	r3, r9, r3
 8005e80:	d102      	bne.n	8005e88 <_printf_float+0x28c>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	07d9      	lsls	r1, r3, #31
 8005e86:	d5d7      	bpl.n	8005e38 <_printf_float+0x23c>
 8005e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f43f af0d 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e98:	f04f 0a00 	mov.w	sl, #0
 8005e9c:	f104 0b1a 	add.w	fp, r4, #26
 8005ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	4553      	cmp	r3, sl
 8005ea6:	dc01      	bgt.n	8005eac <_printf_float+0x2b0>
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	e793      	b.n	8005dd4 <_printf_float+0x1d8>
 8005eac:	2301      	movs	r3, #1
 8005eae:	465a      	mov	r2, fp
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f aefb 	beq.w	8005cb2 <_printf_float+0xb6>
 8005ebc:	f10a 0a01 	add.w	sl, sl, #1
 8005ec0:	e7ee      	b.n	8005ea0 <_printf_float+0x2a4>
 8005ec2:	bf00      	nop
 8005ec4:	7fefffff 	.word	0x7fefffff
 8005ec8:	080085f0 	.word	0x080085f0
 8005ecc:	080085f4 	.word	0x080085f4
 8005ed0:	080085f8 	.word	0x080085f8
 8005ed4:	080085fc 	.word	0x080085fc
 8005ed8:	08008600 	.word	0x08008600
 8005edc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ede:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ee2:	4553      	cmp	r3, sl
 8005ee4:	bfa8      	it	ge
 8005ee6:	4653      	movge	r3, sl
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	4699      	mov	r9, r3
 8005eec:	dc36      	bgt.n	8005f5c <_printf_float+0x360>
 8005eee:	f04f 0b00 	mov.w	fp, #0
 8005ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef6:	f104 021a 	add.w	r2, r4, #26
 8005efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005efc:	9306      	str	r3, [sp, #24]
 8005efe:	eba3 0309 	sub.w	r3, r3, r9
 8005f02:	455b      	cmp	r3, fp
 8005f04:	dc31      	bgt.n	8005f6a <_printf_float+0x36e>
 8005f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f08:	459a      	cmp	sl, r3
 8005f0a:	dc3a      	bgt.n	8005f82 <_printf_float+0x386>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07da      	lsls	r2, r3, #31
 8005f10:	d437      	bmi.n	8005f82 <_printf_float+0x386>
 8005f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f14:	ebaa 0903 	sub.w	r9, sl, r3
 8005f18:	9b06      	ldr	r3, [sp, #24]
 8005f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f1e:	4599      	cmp	r9, r3
 8005f20:	bfa8      	it	ge
 8005f22:	4699      	movge	r9, r3
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	dc33      	bgt.n	8005f92 <_printf_float+0x396>
 8005f2a:	f04f 0800 	mov.w	r8, #0
 8005f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f32:	f104 0b1a 	add.w	fp, r4, #26
 8005f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f38:	ebaa 0303 	sub.w	r3, sl, r3
 8005f3c:	eba3 0309 	sub.w	r3, r3, r9
 8005f40:	4543      	cmp	r3, r8
 8005f42:	f77f af79 	ble.w	8005e38 <_printf_float+0x23c>
 8005f46:	2301      	movs	r3, #1
 8005f48:	465a      	mov	r2, fp
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f aeae 	beq.w	8005cb2 <_printf_float+0xb6>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	e7ec      	b.n	8005f36 <_printf_float+0x33a>
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1c2      	bne.n	8005eee <_printf_float+0x2f2>
 8005f68:	e6a3      	b.n	8005cb2 <_printf_float+0xb6>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	9206      	str	r2, [sp, #24]
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae9c 	beq.w	8005cb2 <_printf_float+0xb6>
 8005f7a:	9a06      	ldr	r2, [sp, #24]
 8005f7c:	f10b 0b01 	add.w	fp, fp, #1
 8005f80:	e7bb      	b.n	8005efa <_printf_float+0x2fe>
 8005f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d1c0      	bne.n	8005f12 <_printf_float+0x316>
 8005f90:	e68f      	b.n	8005cb2 <_printf_float+0xb6>
 8005f92:	9a06      	ldr	r2, [sp, #24]
 8005f94:	464b      	mov	r3, r9
 8005f96:	4442      	add	r2, r8
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d1c3      	bne.n	8005f2a <_printf_float+0x32e>
 8005fa2:	e686      	b.n	8005cb2 <_printf_float+0xb6>
 8005fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fa8:	f1ba 0f01 	cmp.w	sl, #1
 8005fac:	dc01      	bgt.n	8005fb2 <_printf_float+0x3b6>
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d536      	bpl.n	8006020 <_printf_float+0x424>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae78 	beq.w	8005cb2 <_printf_float+0xb6>
 8005fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae70 	beq.w	8005cb2 <_printf_float+0xb6>
 8005fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fde:	f7fa fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8005fe2:	b9c0      	cbnz	r0, 8006016 <_printf_float+0x41a>
 8005fe4:	4653      	mov	r3, sl
 8005fe6:	f108 0201 	add.w	r2, r8, #1
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d10c      	bne.n	800600e <_printf_float+0x412>
 8005ff4:	e65d      	b.n	8005cb2 <_printf_float+0xb6>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	465a      	mov	r2, fp
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f ae56 	beq.w	8005cb2 <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	45d0      	cmp	r8, sl
 800600c:	dbf3      	blt.n	8005ff6 <_printf_float+0x3fa>
 800600e:	464b      	mov	r3, r9
 8006010:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006014:	e6df      	b.n	8005dd6 <_printf_float+0x1da>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	f104 0b1a 	add.w	fp, r4, #26
 800601e:	e7f4      	b.n	800600a <_printf_float+0x40e>
 8006020:	2301      	movs	r3, #1
 8006022:	4642      	mov	r2, r8
 8006024:	e7e1      	b.n	8005fea <_printf_float+0x3ee>
 8006026:	2301      	movs	r3, #1
 8006028:	464a      	mov	r2, r9
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae3e 	beq.w	8005cb2 <_printf_float+0xb6>
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800603e:	1a5b      	subs	r3, r3, r1
 8006040:	4543      	cmp	r3, r8
 8006042:	dcf0      	bgt.n	8006026 <_printf_float+0x42a>
 8006044:	e6fc      	b.n	8005e40 <_printf_float+0x244>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 0919 	add.w	r9, r4, #25
 800604e:	e7f4      	b.n	800603a <_printf_float+0x43e>

08006050 <_printf_common>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	4616      	mov	r6, r2
 8006056:	4698      	mov	r8, r3
 8006058:	688a      	ldr	r2, [r1, #8]
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006060:	4293      	cmp	r3, r2
 8006062:	bfb8      	it	lt
 8006064:	4613      	movlt	r3, r2
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b10a      	cbz	r2, 8006076 <_printf_common+0x26>
 8006072:	3301      	adds	r3, #1
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	0699      	lsls	r1, r3, #26
 800607a:	bf42      	ittt	mi
 800607c:	6833      	ldrmi	r3, [r6, #0]
 800607e:	3302      	addmi	r3, #2
 8006080:	6033      	strmi	r3, [r6, #0]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d106      	bne.n	8006098 <_printf_common+0x48>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc26      	bgt.n	80060e6 <_printf_common+0x96>
 8006098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	3b00      	subs	r3, #0
 80060a0:	bf18      	it	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d42b      	bmi.n	8006100 <_printf_common+0xb0>
 80060a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d01e      	beq.n	80060f4 <_printf_common+0xa4>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	f003 0306 	and.w	r3, r3, #6
 80060be:	2b04      	cmp	r3, #4
 80060c0:	bf02      	ittt	eq
 80060c2:	68e5      	ldreq	r5, [r4, #12]
 80060c4:	6833      	ldreq	r3, [r6, #0]
 80060c6:	1aed      	subeq	r5, r5, r3
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	bf0c      	ite	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	2500      	movne	r5, #0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bfc4      	itt	gt
 80060d6:	1a9b      	subgt	r3, r3, r2
 80060d8:	18ed      	addgt	r5, r5, r3
 80060da:	2600      	movs	r6, #0
 80060dc:	341a      	adds	r4, #26
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d11a      	bne.n	8006118 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e008      	b.n	80060f8 <_printf_common+0xa8>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4652      	mov	r2, sl
 80060ea:	4641      	mov	r1, r8
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c8      	blx	r9
 80060f0:	3001      	adds	r0, #1
 80060f2:	d103      	bne.n	80060fc <_printf_common+0xac>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	3501      	adds	r5, #1
 80060fe:	e7c6      	b.n	800608e <_printf_common+0x3e>
 8006100:	18e1      	adds	r1, r4, r3
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	2030      	movs	r0, #48	@ 0x30
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800610a:	4422      	add	r2, r4
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006114:	3302      	adds	r3, #2
 8006116:	e7c7      	b.n	80060a8 <_printf_common+0x58>
 8006118:	2301      	movs	r3, #1
 800611a:	4622      	mov	r2, r4
 800611c:	4641      	mov	r1, r8
 800611e:	4638      	mov	r0, r7
 8006120:	47c8      	blx	r9
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa4>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d9      	b.n	80060de <_printf_common+0x8e>
	...

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	7e0f      	ldrb	r7, [r1, #24]
 8006132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006134:	2f78      	cmp	r7, #120	@ 0x78
 8006136:	4691      	mov	r9, r2
 8006138:	4680      	mov	r8, r0
 800613a:	460c      	mov	r4, r1
 800613c:	469a      	mov	sl, r3
 800613e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	@ 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d2 	beq.w	80062f2 <_printf_i+0x1c6>
 800614e:	2f58      	cmp	r7, #88	@ 0x58
 8006150:	f000 80b9 	beq.w	80062c6 <_printf_i+0x19a>
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a101      	add	r1, pc, #4	@ (adr r1, 800616c <_printf_i+0x40>)
 8006168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062d9 	.word	0x080062d9
 800619c:	08006203 	.word	0x08006203
 80061a0:	08006293 	.word	0x08006293
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	080062fb 	.word	0x080062fb
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	0800629b 	.word	0x0800629b
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6032      	str	r2, [r6, #0]
 80061cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e09d      	b.n	8006314 <_printf_i+0x1e8>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6031      	str	r1, [r6, #0]
 80061e0:	0606      	lsls	r6, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xbc>
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	e003      	b.n	80061f0 <_printf_i+0xc4>
 80061e8:	0645      	lsls	r5, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xb8>
 80061ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xd0>
 80061f4:	232d      	movs	r3, #45	@ 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	4859      	ldr	r0, [pc, #356]	@ (8006364 <_printf_i+0x238>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e011      	b.n	8006226 <_printf_i+0xfa>
 8006202:	6821      	ldr	r1, [r4, #0]
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	0608      	lsls	r0, r1, #24
 8006208:	f853 5b04 	ldr.w	r5, [r3], #4
 800620c:	d402      	bmi.n	8006214 <_printf_i+0xe8>
 800620e:	0649      	lsls	r1, r1, #25
 8006210:	bf48      	it	mi
 8006212:	b2ad      	uxthmi	r5, r5
 8006214:	2f6f      	cmp	r7, #111	@ 0x6f
 8006216:	4853      	ldr	r0, [pc, #332]	@ (8006364 <_printf_i+0x238>)
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	bf14      	ite	ne
 800621c:	230a      	movne	r3, #10
 800621e:	2308      	moveq	r3, #8
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006226:	6866      	ldr	r6, [r4, #4]
 8006228:	60a6      	str	r6, [r4, #8]
 800622a:	2e00      	cmp	r6, #0
 800622c:	bfa2      	ittt	ge
 800622e:	6821      	ldrge	r1, [r4, #0]
 8006230:	f021 0104 	bicge.w	r1, r1, #4
 8006234:	6021      	strge	r1, [r4, #0]
 8006236:	b90d      	cbnz	r5, 800623c <_printf_i+0x110>
 8006238:	2e00      	cmp	r6, #0
 800623a:	d04b      	beq.n	80062d4 <_printf_i+0x1a8>
 800623c:	4616      	mov	r6, r2
 800623e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006242:	fb03 5711 	mls	r7, r3, r1, r5
 8006246:	5dc7      	ldrb	r7, [r0, r7]
 8006248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800624c:	462f      	mov	r7, r5
 800624e:	42bb      	cmp	r3, r7
 8006250:	460d      	mov	r5, r1
 8006252:	d9f4      	bls.n	800623e <_printf_i+0x112>
 8006254:	2b08      	cmp	r3, #8
 8006256:	d10b      	bne.n	8006270 <_printf_i+0x144>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07df      	lsls	r7, r3, #31
 800625c:	d508      	bpl.n	8006270 <_printf_i+0x144>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	bfde      	ittt	le
 8006266:	2330      	movle	r3, #48	@ 0x30
 8006268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800626c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006270:	1b92      	subs	r2, r2, r6
 8006272:	6122      	str	r2, [r4, #16]
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	464b      	mov	r3, r9
 800627a:	aa03      	add	r2, sp, #12
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fee6 	bl	8006050 <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	d14a      	bne.n	800631e <_printf_i+0x1f2>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	4833      	ldr	r0, [pc, #204]	@ (8006368 <_printf_i+0x23c>)
 800629c:	2778      	movs	r7, #120	@ 0x78
 800629e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	6831      	ldr	r1, [r6, #0]
 80062a6:	061f      	lsls	r7, r3, #24
 80062a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80062ac:	d402      	bmi.n	80062b4 <_printf_i+0x188>
 80062ae:	065f      	lsls	r7, r3, #25
 80062b0:	bf48      	it	mi
 80062b2:	b2ad      	uxthmi	r5, r5
 80062b4:	6031      	str	r1, [r6, #0]
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f043 0320 	orrmi.w	r3, r3, #32
 80062be:	6023      	strmi	r3, [r4, #0]
 80062c0:	b11d      	cbz	r5, 80062ca <_printf_i+0x19e>
 80062c2:	2310      	movs	r3, #16
 80062c4:	e7ac      	b.n	8006220 <_printf_i+0xf4>
 80062c6:	4827      	ldr	r0, [pc, #156]	@ (8006364 <_printf_i+0x238>)
 80062c8:	e7e9      	b.n	800629e <_printf_i+0x172>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f023 0320 	bic.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	e7f6      	b.n	80062c2 <_printf_i+0x196>
 80062d4:	4616      	mov	r6, r2
 80062d6:	e7bd      	b.n	8006254 <_printf_i+0x128>
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	6961      	ldr	r1, [r4, #20]
 80062de:	1d18      	adds	r0, r3, #4
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	062e      	lsls	r6, r5, #24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0x1c0>
 80062e8:	6019      	str	r1, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <_printf_i+0x1c6>
 80062ec:	0668      	lsls	r0, r5, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0x1bc>
 80062f0:	8019      	strh	r1, [r3, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	4616      	mov	r6, r2
 80062f8:	e7bc      	b.n	8006274 <_printf_i+0x148>
 80062fa:	6833      	ldr	r3, [r6, #0]
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	6032      	str	r2, [r6, #0]
 8006300:	681e      	ldr	r6, [r3, #0]
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	2100      	movs	r1, #0
 8006306:	4630      	mov	r0, r6
 8006308:	f7f9 ff8a 	bl	8000220 <memchr>
 800630c:	b108      	cbz	r0, 8006312 <_printf_i+0x1e6>
 800630e:	1b80      	subs	r0, r0, r6
 8006310:	6060      	str	r0, [r4, #4]
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	2300      	movs	r3, #0
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	e7aa      	b.n	8006274 <_printf_i+0x148>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d0ad      	beq.n	8006288 <_printf_i+0x15c>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	d413      	bmi.n	800635a <_printf_i+0x22e>
 8006332:	68e0      	ldr	r0, [r4, #12]
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	4298      	cmp	r0, r3
 8006338:	bfb8      	it	lt
 800633a:	4618      	movlt	r0, r3
 800633c:	e7a6      	b.n	800628c <_printf_i+0x160>
 800633e:	2301      	movs	r3, #1
 8006340:	4632      	mov	r2, r6
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	47d0      	blx	sl
 8006348:	3001      	adds	r0, #1
 800634a:	d09d      	beq.n	8006288 <_printf_i+0x15c>
 800634c:	3501      	adds	r5, #1
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	9903      	ldr	r1, [sp, #12]
 8006352:	1a5b      	subs	r3, r3, r1
 8006354:	42ab      	cmp	r3, r5
 8006356:	dcf2      	bgt.n	800633e <_printf_i+0x212>
 8006358:	e7eb      	b.n	8006332 <_printf_i+0x206>
 800635a:	2500      	movs	r5, #0
 800635c:	f104 0619 	add.w	r6, r4, #25
 8006360:	e7f5      	b.n	800634e <_printf_i+0x222>
 8006362:	bf00      	nop
 8006364:	08008602 	.word	0x08008602
 8006368:	08008613 	.word	0x08008613

0800636c <std>:
 800636c:	2300      	movs	r3, #0
 800636e:	b510      	push	{r4, lr}
 8006370:	4604      	mov	r4, r0
 8006372:	e9c0 3300 	strd	r3, r3, [r0]
 8006376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800637a:	6083      	str	r3, [r0, #8]
 800637c:	8181      	strh	r1, [r0, #12]
 800637e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006380:	81c2      	strh	r2, [r0, #14]
 8006382:	6183      	str	r3, [r0, #24]
 8006384:	4619      	mov	r1, r3
 8006386:	2208      	movs	r2, #8
 8006388:	305c      	adds	r0, #92	@ 0x5c
 800638a:	f000 f9c2 	bl	8006712 <memset>
 800638e:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <std+0x58>)
 8006390:	6263      	str	r3, [r4, #36]	@ 0x24
 8006392:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <std+0x5c>)
 8006394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <std+0x60>)
 8006398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <std+0x64>)
 800639c:	6323      	str	r3, [r4, #48]	@ 0x30
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <std+0x68>)
 80063a0:	6224      	str	r4, [r4, #32]
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d006      	beq.n	80063b4 <std+0x48>
 80063a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063aa:	4294      	cmp	r4, r2
 80063ac:	d002      	beq.n	80063b4 <std+0x48>
 80063ae:	33d0      	adds	r3, #208	@ 0xd0
 80063b0:	429c      	cmp	r4, r3
 80063b2:	d105      	bne.n	80063c0 <std+0x54>
 80063b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063bc:	f000 ba26 	b.w	800680c <__retarget_lock_init_recursive>
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	bf00      	nop
 80063c4:	0800668d 	.word	0x0800668d
 80063c8:	080066af 	.word	0x080066af
 80063cc:	080066e7 	.word	0x080066e7
 80063d0:	0800670b 	.word	0x0800670b
 80063d4:	20000404 	.word	0x20000404

080063d8 <stdio_exit_handler>:
 80063d8:	4a02      	ldr	r2, [pc, #8]	@ (80063e4 <stdio_exit_handler+0xc>)
 80063da:	4903      	ldr	r1, [pc, #12]	@ (80063e8 <stdio_exit_handler+0x10>)
 80063dc:	4803      	ldr	r0, [pc, #12]	@ (80063ec <stdio_exit_handler+0x14>)
 80063de:	f000 b869 	b.w	80064b4 <_fwalk_sglue>
 80063e2:	bf00      	nop
 80063e4:	20000018 	.word	0x20000018
 80063e8:	08008141 	.word	0x08008141
 80063ec:	20000028 	.word	0x20000028

080063f0 <cleanup_stdio>:
 80063f0:	6841      	ldr	r1, [r0, #4]
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <cleanup_stdio+0x34>)
 80063f4:	4299      	cmp	r1, r3
 80063f6:	b510      	push	{r4, lr}
 80063f8:	4604      	mov	r4, r0
 80063fa:	d001      	beq.n	8006400 <cleanup_stdio+0x10>
 80063fc:	f001 fea0 	bl	8008140 <_fflush_r>
 8006400:	68a1      	ldr	r1, [r4, #8]
 8006402:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <cleanup_stdio+0x38>)
 8006404:	4299      	cmp	r1, r3
 8006406:	d002      	beq.n	800640e <cleanup_stdio+0x1e>
 8006408:	4620      	mov	r0, r4
 800640a:	f001 fe99 	bl	8008140 <_fflush_r>
 800640e:	68e1      	ldr	r1, [r4, #12]
 8006410:	4b06      	ldr	r3, [pc, #24]	@ (800642c <cleanup_stdio+0x3c>)
 8006412:	4299      	cmp	r1, r3
 8006414:	d004      	beq.n	8006420 <cleanup_stdio+0x30>
 8006416:	4620      	mov	r0, r4
 8006418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641c:	f001 be90 	b.w	8008140 <_fflush_r>
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	20000404 	.word	0x20000404
 8006428:	2000046c 	.word	0x2000046c
 800642c:	200004d4 	.word	0x200004d4

08006430 <global_stdio_init.part.0>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <global_stdio_init.part.0+0x30>)
 8006434:	4c0b      	ldr	r4, [pc, #44]	@ (8006464 <global_stdio_init.part.0+0x34>)
 8006436:	4a0c      	ldr	r2, [pc, #48]	@ (8006468 <global_stdio_init.part.0+0x38>)
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	4620      	mov	r0, r4
 800643c:	2200      	movs	r2, #0
 800643e:	2104      	movs	r1, #4
 8006440:	f7ff ff94 	bl	800636c <std>
 8006444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006448:	2201      	movs	r2, #1
 800644a:	2109      	movs	r1, #9
 800644c:	f7ff ff8e 	bl	800636c <std>
 8006450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006454:	2202      	movs	r2, #2
 8006456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645a:	2112      	movs	r1, #18
 800645c:	f7ff bf86 	b.w	800636c <std>
 8006460:	2000053c 	.word	0x2000053c
 8006464:	20000404 	.word	0x20000404
 8006468:	080063d9 	.word	0x080063d9

0800646c <__sfp_lock_acquire>:
 800646c:	4801      	ldr	r0, [pc, #4]	@ (8006474 <__sfp_lock_acquire+0x8>)
 800646e:	f000 b9ce 	b.w	800680e <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	20000545 	.word	0x20000545

08006478 <__sfp_lock_release>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__sfp_lock_release+0x8>)
 800647a:	f000 b9c9 	b.w	8006810 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	20000545 	.word	0x20000545

08006484 <__sinit>:
 8006484:	b510      	push	{r4, lr}
 8006486:	4604      	mov	r4, r0
 8006488:	f7ff fff0 	bl	800646c <__sfp_lock_acquire>
 800648c:	6a23      	ldr	r3, [r4, #32]
 800648e:	b11b      	cbz	r3, 8006498 <__sinit+0x14>
 8006490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006494:	f7ff bff0 	b.w	8006478 <__sfp_lock_release>
 8006498:	4b04      	ldr	r3, [pc, #16]	@ (80064ac <__sinit+0x28>)
 800649a:	6223      	str	r3, [r4, #32]
 800649c:	4b04      	ldr	r3, [pc, #16]	@ (80064b0 <__sinit+0x2c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f5      	bne.n	8006490 <__sinit+0xc>
 80064a4:	f7ff ffc4 	bl	8006430 <global_stdio_init.part.0>
 80064a8:	e7f2      	b.n	8006490 <__sinit+0xc>
 80064aa:	bf00      	nop
 80064ac:	080063f1 	.word	0x080063f1
 80064b0:	2000053c 	.word	0x2000053c

080064b4 <_fwalk_sglue>:
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b8:	4607      	mov	r7, r0
 80064ba:	4688      	mov	r8, r1
 80064bc:	4614      	mov	r4, r2
 80064be:	2600      	movs	r6, #0
 80064c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064c4:	f1b9 0901 	subs.w	r9, r9, #1
 80064c8:	d505      	bpl.n	80064d6 <_fwalk_sglue+0x22>
 80064ca:	6824      	ldr	r4, [r4, #0]
 80064cc:	2c00      	cmp	r4, #0
 80064ce:	d1f7      	bne.n	80064c0 <_fwalk_sglue+0xc>
 80064d0:	4630      	mov	r0, r6
 80064d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d6:	89ab      	ldrh	r3, [r5, #12]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d907      	bls.n	80064ec <_fwalk_sglue+0x38>
 80064dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064e0:	3301      	adds	r3, #1
 80064e2:	d003      	beq.n	80064ec <_fwalk_sglue+0x38>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4638      	mov	r0, r7
 80064e8:	47c0      	blx	r8
 80064ea:	4306      	orrs	r6, r0
 80064ec:	3568      	adds	r5, #104	@ 0x68
 80064ee:	e7e9      	b.n	80064c4 <_fwalk_sglue+0x10>

080064f0 <iprintf>:
 80064f0:	b40f      	push	{r0, r1, r2, r3}
 80064f2:	b507      	push	{r0, r1, r2, lr}
 80064f4:	4906      	ldr	r1, [pc, #24]	@ (8006510 <iprintf+0x20>)
 80064f6:	ab04      	add	r3, sp, #16
 80064f8:	6808      	ldr	r0, [r1, #0]
 80064fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80064fe:	6881      	ldr	r1, [r0, #8]
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	f001 fc81 	bl	8007e08 <_vfiprintf_r>
 8006506:	b003      	add	sp, #12
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	b004      	add	sp, #16
 800650e:	4770      	bx	lr
 8006510:	20000024 	.word	0x20000024

08006514 <setbuf>:
 8006514:	fab1 f281 	clz	r2, r1
 8006518:	0952      	lsrs	r2, r2, #5
 800651a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	f000 b800 	b.w	8006524 <setvbuf>

08006524 <setvbuf>:
 8006524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006528:	461d      	mov	r5, r3
 800652a:	4b57      	ldr	r3, [pc, #348]	@ (8006688 <setvbuf+0x164>)
 800652c:	681f      	ldr	r7, [r3, #0]
 800652e:	4604      	mov	r4, r0
 8006530:	460e      	mov	r6, r1
 8006532:	4690      	mov	r8, r2
 8006534:	b127      	cbz	r7, 8006540 <setvbuf+0x1c>
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	b913      	cbnz	r3, 8006540 <setvbuf+0x1c>
 800653a:	4638      	mov	r0, r7
 800653c:	f7ff ffa2 	bl	8006484 <__sinit>
 8006540:	f1b8 0f02 	cmp.w	r8, #2
 8006544:	d006      	beq.n	8006554 <setvbuf+0x30>
 8006546:	f1b8 0f01 	cmp.w	r8, #1
 800654a:	f200 809a 	bhi.w	8006682 <setvbuf+0x15e>
 800654e:	2d00      	cmp	r5, #0
 8006550:	f2c0 8097 	blt.w	8006682 <setvbuf+0x15e>
 8006554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006556:	07d9      	lsls	r1, r3, #31
 8006558:	d405      	bmi.n	8006566 <setvbuf+0x42>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059a      	lsls	r2, r3, #22
 800655e:	d402      	bmi.n	8006566 <setvbuf+0x42>
 8006560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006562:	f000 f954 	bl	800680e <__retarget_lock_acquire_recursive>
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f001 fde9 	bl	8008140 <_fflush_r>
 800656e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006570:	b141      	cbz	r1, 8006584 <setvbuf+0x60>
 8006572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006576:	4299      	cmp	r1, r3
 8006578:	d002      	beq.n	8006580 <setvbuf+0x5c>
 800657a:	4638      	mov	r0, r7
 800657c:	f000 ff98 	bl	80074b0 <_free_r>
 8006580:	2300      	movs	r3, #0
 8006582:	6363      	str	r3, [r4, #52]	@ 0x34
 8006584:	2300      	movs	r3, #0
 8006586:	61a3      	str	r3, [r4, #24]
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	d503      	bpl.n	8006598 <setvbuf+0x74>
 8006590:	6921      	ldr	r1, [r4, #16]
 8006592:	4638      	mov	r0, r7
 8006594:	f000 ff8c 	bl	80074b0 <_free_r>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	f1b8 0f02 	cmp.w	r8, #2
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	d061      	beq.n	800666e <setvbuf+0x14a>
 80065aa:	ab01      	add	r3, sp, #4
 80065ac:	466a      	mov	r2, sp
 80065ae:	4621      	mov	r1, r4
 80065b0:	4638      	mov	r0, r7
 80065b2:	f001 fded 	bl	8008190 <__swhatbuf_r>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	4318      	orrs	r0, r3
 80065ba:	81a0      	strh	r0, [r4, #12]
 80065bc:	bb2d      	cbnz	r5, 800660a <setvbuf+0xe6>
 80065be:	9d00      	ldr	r5, [sp, #0]
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 ffbf 	bl	8007544 <malloc>
 80065c6:	4606      	mov	r6, r0
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d152      	bne.n	8006672 <setvbuf+0x14e>
 80065cc:	f8dd 9000 	ldr.w	r9, [sp]
 80065d0:	45a9      	cmp	r9, r5
 80065d2:	d140      	bne.n	8006656 <setvbuf+0x132>
 80065d4:	f04f 35ff 	mov.w	r5, #4294967295
 80065d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065dc:	f043 0202 	orr.w	r2, r3, #2
 80065e0:	81a2      	strh	r2, [r4, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	60a2      	str	r2, [r4, #8]
 80065e6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	6122      	str	r2, [r4, #16]
 80065ee:	2201      	movs	r2, #1
 80065f0:	6162      	str	r2, [r4, #20]
 80065f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065f4:	07d6      	lsls	r6, r2, #31
 80065f6:	d404      	bmi.n	8006602 <setvbuf+0xde>
 80065f8:	0598      	lsls	r0, r3, #22
 80065fa:	d402      	bmi.n	8006602 <setvbuf+0xde>
 80065fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065fe:	f000 f907 	bl	8006810 <__retarget_lock_release_recursive>
 8006602:	4628      	mov	r0, r5
 8006604:	b003      	add	sp, #12
 8006606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800660a:	2e00      	cmp	r6, #0
 800660c:	d0d8      	beq.n	80065c0 <setvbuf+0x9c>
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	b913      	cbnz	r3, 8006618 <setvbuf+0xf4>
 8006612:	4638      	mov	r0, r7
 8006614:	f7ff ff36 	bl	8006484 <__sinit>
 8006618:	f1b8 0f01 	cmp.w	r8, #1
 800661c:	bf08      	it	eq
 800661e:	89a3      	ldrheq	r3, [r4, #12]
 8006620:	6026      	str	r6, [r4, #0]
 8006622:	bf04      	itt	eq
 8006624:	f043 0301 	orreq.w	r3, r3, #1
 8006628:	81a3      	strheq	r3, [r4, #12]
 800662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662e:	f013 0208 	ands.w	r2, r3, #8
 8006632:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006636:	d01e      	beq.n	8006676 <setvbuf+0x152>
 8006638:	07d9      	lsls	r1, r3, #31
 800663a:	bf41      	itttt	mi
 800663c:	2200      	movmi	r2, #0
 800663e:	426d      	negmi	r5, r5
 8006640:	60a2      	strmi	r2, [r4, #8]
 8006642:	61a5      	strmi	r5, [r4, #24]
 8006644:	bf58      	it	pl
 8006646:	60a5      	strpl	r5, [r4, #8]
 8006648:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800664a:	07d2      	lsls	r2, r2, #31
 800664c:	d401      	bmi.n	8006652 <setvbuf+0x12e>
 800664e:	059b      	lsls	r3, r3, #22
 8006650:	d513      	bpl.n	800667a <setvbuf+0x156>
 8006652:	2500      	movs	r5, #0
 8006654:	e7d5      	b.n	8006602 <setvbuf+0xde>
 8006656:	4648      	mov	r0, r9
 8006658:	f000 ff74 	bl	8007544 <malloc>
 800665c:	4606      	mov	r6, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d0b8      	beq.n	80065d4 <setvbuf+0xb0>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	464d      	mov	r5, r9
 800666c:	e7cf      	b.n	800660e <setvbuf+0xea>
 800666e:	2500      	movs	r5, #0
 8006670:	e7b2      	b.n	80065d8 <setvbuf+0xb4>
 8006672:	46a9      	mov	r9, r5
 8006674:	e7f5      	b.n	8006662 <setvbuf+0x13e>
 8006676:	60a2      	str	r2, [r4, #8]
 8006678:	e7e6      	b.n	8006648 <setvbuf+0x124>
 800667a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800667c:	f000 f8c8 	bl	8006810 <__retarget_lock_release_recursive>
 8006680:	e7e7      	b.n	8006652 <setvbuf+0x12e>
 8006682:	f04f 35ff 	mov.w	r5, #4294967295
 8006686:	e7bc      	b.n	8006602 <setvbuf+0xde>
 8006688:	20000024 	.word	0x20000024

0800668c <__sread>:
 800668c:	b510      	push	{r4, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006694:	f000 f86c 	bl	8006770 <_read_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	bfab      	itete	ge
 800669c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800669e:	89a3      	ldrhlt	r3, [r4, #12]
 80066a0:	181b      	addge	r3, r3, r0
 80066a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066a6:	bfac      	ite	ge
 80066a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066aa:	81a3      	strhlt	r3, [r4, #12]
 80066ac:	bd10      	pop	{r4, pc}

080066ae <__swrite>:
 80066ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b2:	461f      	mov	r7, r3
 80066b4:	898b      	ldrh	r3, [r1, #12]
 80066b6:	05db      	lsls	r3, r3, #23
 80066b8:	4605      	mov	r5, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4616      	mov	r6, r2
 80066be:	d505      	bpl.n	80066cc <__swrite+0x1e>
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	2302      	movs	r3, #2
 80066c6:	2200      	movs	r2, #0
 80066c8:	f000 f840 	bl	800674c <_lseek_r>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	4628      	mov	r0, r5
 80066de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e2:	f000 b857 	b.w	8006794 <_write_r>

080066e6 <__sseek>:
 80066e6:	b510      	push	{r4, lr}
 80066e8:	460c      	mov	r4, r1
 80066ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ee:	f000 f82d 	bl	800674c <_lseek_r>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	bf15      	itete	ne
 80066f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006702:	81a3      	strheq	r3, [r4, #12]
 8006704:	bf18      	it	ne
 8006706:	81a3      	strhne	r3, [r4, #12]
 8006708:	bd10      	pop	{r4, pc}

0800670a <__sclose>:
 800670a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670e:	f000 b80d 	b.w	800672c <_close_r>

08006712 <memset>:
 8006712:	4402      	add	r2, r0
 8006714:	4603      	mov	r3, r0
 8006716:	4293      	cmp	r3, r2
 8006718:	d100      	bne.n	800671c <memset+0xa>
 800671a:	4770      	bx	lr
 800671c:	f803 1b01 	strb.w	r1, [r3], #1
 8006720:	e7f9      	b.n	8006716 <memset+0x4>
	...

08006724 <_localeconv_r>:
 8006724:	4800      	ldr	r0, [pc, #0]	@ (8006728 <_localeconv_r+0x4>)
 8006726:	4770      	bx	lr
 8006728:	20000164 	.word	0x20000164

0800672c <_close_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	@ (8006748 <_close_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fb fbb4 	bl	8001ea4 <_close>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_close_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_close_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20000540 	.word	0x20000540

0800674c <_lseek_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	@ (800676c <_lseek_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fb fbc9 	bl	8001ef2 <_lseek>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_lseek_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_lseek_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	20000540 	.word	0x20000540

08006770 <_read_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	@ (8006790 <_read_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb fb73 	bl	8001e6a <_read>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_read_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_read_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000540 	.word	0x20000540

08006794 <_write_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	@ (80067b4 <_write_r+0x20>)
 8006798:	4604      	mov	r4, r0
 800679a:	4608      	mov	r0, r1
 800679c:	4611      	mov	r1, r2
 800679e:	2200      	movs	r2, #0
 80067a0:	602a      	str	r2, [r5, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f7fa ff36 	bl	8001614 <_write>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_write_r+0x1e>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_write_r+0x1e>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20000540 	.word	0x20000540

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	@ (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000024 	.word	0x20000024

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	@ (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006808 <__libc_init_array+0x44>)
 80067d8:	f001 fec0 	bl	800855c <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	08008968 	.word	0x08008968
 8006800:	08008968 	.word	0x08008968
 8006804:	08008968 	.word	0x08008968
 8006808:	0800896c 	.word	0x0800896c

0800680c <__retarget_lock_init_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_acquire_recursive>:
 800680e:	4770      	bx	lr

08006810 <__retarget_lock_release_recursive>:
 8006810:	4770      	bx	lr

08006812 <quorem>:
 8006812:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	6903      	ldr	r3, [r0, #16]
 8006818:	690c      	ldr	r4, [r1, #16]
 800681a:	42a3      	cmp	r3, r4
 800681c:	4607      	mov	r7, r0
 800681e:	db7e      	blt.n	800691e <quorem+0x10c>
 8006820:	3c01      	subs	r4, #1
 8006822:	f101 0814 	add.w	r8, r1, #20
 8006826:	00a3      	lsls	r3, r4, #2
 8006828:	f100 0514 	add.w	r5, r0, #20
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800683c:	3301      	adds	r3, #1
 800683e:	429a      	cmp	r2, r3
 8006840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006844:	fbb2 f6f3 	udiv	r6, r2, r3
 8006848:	d32e      	bcc.n	80068a8 <quorem+0x96>
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	46c4      	mov	ip, r8
 8006850:	46ae      	mov	lr, r5
 8006852:	46d3      	mov	fp, sl
 8006854:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006858:	b298      	uxth	r0, r3
 800685a:	fb06 a000 	mla	r0, r6, r0, sl
 800685e:	0c02      	lsrs	r2, r0, #16
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	fb06 2303 	mla	r3, r6, r3, r2
 8006866:	f8de 2000 	ldr.w	r2, [lr]
 800686a:	b280      	uxth	r0, r0
 800686c:	b292      	uxth	r2, r2
 800686e:	1a12      	subs	r2, r2, r0
 8006870:	445a      	add	r2, fp
 8006872:	f8de 0000 	ldr.w	r0, [lr]
 8006876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800687a:	b29b      	uxth	r3, r3
 800687c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006880:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006884:	b292      	uxth	r2, r2
 8006886:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800688a:	45e1      	cmp	r9, ip
 800688c:	f84e 2b04 	str.w	r2, [lr], #4
 8006890:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006894:	d2de      	bcs.n	8006854 <quorem+0x42>
 8006896:	9b00      	ldr	r3, [sp, #0]
 8006898:	58eb      	ldr	r3, [r5, r3]
 800689a:	b92b      	cbnz	r3, 80068a8 <quorem+0x96>
 800689c:	9b01      	ldr	r3, [sp, #4]
 800689e:	3b04      	subs	r3, #4
 80068a0:	429d      	cmp	r5, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	d32f      	bcc.n	8006906 <quorem+0xf4>
 80068a6:	613c      	str	r4, [r7, #16]
 80068a8:	4638      	mov	r0, r7
 80068aa:	f001 f97b 	bl	8007ba4 <__mcmp>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	db25      	blt.n	80068fe <quorem+0xec>
 80068b2:	4629      	mov	r1, r5
 80068b4:	2000      	movs	r0, #0
 80068b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80068ba:	f8d1 c000 	ldr.w	ip, [r1]
 80068be:	fa1f fe82 	uxth.w	lr, r2
 80068c2:	fa1f f38c 	uxth.w	r3, ip
 80068c6:	eba3 030e 	sub.w	r3, r3, lr
 80068ca:	4403      	add	r3, r0
 80068cc:	0c12      	lsrs	r2, r2, #16
 80068ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068dc:	45c1      	cmp	r9, r8
 80068de:	f841 3b04 	str.w	r3, [r1], #4
 80068e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068e6:	d2e6      	bcs.n	80068b6 <quorem+0xa4>
 80068e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f0:	b922      	cbnz	r2, 80068fc <quorem+0xea>
 80068f2:	3b04      	subs	r3, #4
 80068f4:	429d      	cmp	r5, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	d30b      	bcc.n	8006912 <quorem+0x100>
 80068fa:	613c      	str	r4, [r7, #16]
 80068fc:	3601      	adds	r6, #1
 80068fe:	4630      	mov	r0, r6
 8006900:	b003      	add	sp, #12
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	3b04      	subs	r3, #4
 800690a:	2a00      	cmp	r2, #0
 800690c:	d1cb      	bne.n	80068a6 <quorem+0x94>
 800690e:	3c01      	subs	r4, #1
 8006910:	e7c6      	b.n	80068a0 <quorem+0x8e>
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	3b04      	subs	r3, #4
 8006916:	2a00      	cmp	r2, #0
 8006918:	d1ef      	bne.n	80068fa <quorem+0xe8>
 800691a:	3c01      	subs	r4, #1
 800691c:	e7ea      	b.n	80068f4 <quorem+0xe2>
 800691e:	2000      	movs	r0, #0
 8006920:	e7ee      	b.n	8006900 <quorem+0xee>
 8006922:	0000      	movs	r0, r0
 8006924:	0000      	movs	r0, r0
	...

08006928 <_dtoa_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	69c7      	ldr	r7, [r0, #28]
 800692e:	b099      	sub	sp, #100	@ 0x64
 8006930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006934:	ec55 4b10 	vmov	r4, r5, d0
 8006938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800693a:	9109      	str	r1, [sp, #36]	@ 0x24
 800693c:	4683      	mov	fp, r0
 800693e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006942:	b97f      	cbnz	r7, 8006964 <_dtoa_r+0x3c>
 8006944:	2010      	movs	r0, #16
 8006946:	f000 fdfd 	bl	8007544 <malloc>
 800694a:	4602      	mov	r2, r0
 800694c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006950:	b920      	cbnz	r0, 800695c <_dtoa_r+0x34>
 8006952:	4ba7      	ldr	r3, [pc, #668]	@ (8006bf0 <_dtoa_r+0x2c8>)
 8006954:	21ef      	movs	r1, #239	@ 0xef
 8006956:	48a7      	ldr	r0, [pc, #668]	@ (8006bf4 <_dtoa_r+0x2cc>)
 8006958:	f001 fd50 	bl	80083fc <__assert_func>
 800695c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006960:	6007      	str	r7, [r0, #0]
 8006962:	60c7      	str	r7, [r0, #12]
 8006964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	b159      	cbz	r1, 8006984 <_dtoa_r+0x5c>
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	604a      	str	r2, [r1, #4]
 8006970:	2301      	movs	r3, #1
 8006972:	4093      	lsls	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
 8006976:	4658      	mov	r0, fp
 8006978:	f000 feda 	bl	8007730 <_Bfree>
 800697c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	1e2b      	subs	r3, r5, #0
 8006986:	bfb9      	ittee	lt
 8006988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800698c:	9303      	strlt	r3, [sp, #12]
 800698e:	2300      	movge	r3, #0
 8006990:	6033      	strge	r3, [r6, #0]
 8006992:	9f03      	ldr	r7, [sp, #12]
 8006994:	4b98      	ldr	r3, [pc, #608]	@ (8006bf8 <_dtoa_r+0x2d0>)
 8006996:	bfbc      	itt	lt
 8006998:	2201      	movlt	r2, #1
 800699a:	6032      	strlt	r2, [r6, #0]
 800699c:	43bb      	bics	r3, r7
 800699e:	d112      	bne.n	80069c6 <_dtoa_r+0x9e>
 80069a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069ac:	4323      	orrs	r3, r4
 80069ae:	f000 854d 	beq.w	800744c <_dtoa_r+0xb24>
 80069b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c0c <_dtoa_r+0x2e4>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 854f 	beq.w	800745c <_dtoa_r+0xb34>
 80069be:	f10a 0303 	add.w	r3, sl, #3
 80069c2:	f000 bd49 	b.w	8007458 <_dtoa_r+0xb30>
 80069c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	ec51 0b17 	vmov	r0, r1, d7
 80069d0:	2300      	movs	r3, #0
 80069d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069d6:	f7fa f89f 	bl	8000b18 <__aeabi_dcmpeq>
 80069da:	4680      	mov	r8, r0
 80069dc:	b158      	cbz	r0, 80069f6 <_dtoa_r+0xce>
 80069de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069e0:	2301      	movs	r3, #1
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069e6:	b113      	cbz	r3, 80069ee <_dtoa_r+0xc6>
 80069e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069ea:	4b84      	ldr	r3, [pc, #528]	@ (8006bfc <_dtoa_r+0x2d4>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c10 <_dtoa_r+0x2e8>
 80069f2:	f000 bd33 	b.w	800745c <_dtoa_r+0xb34>
 80069f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069fa:	aa16      	add	r2, sp, #88	@ 0x58
 80069fc:	a917      	add	r1, sp, #92	@ 0x5c
 80069fe:	4658      	mov	r0, fp
 8006a00:	f001 f980 	bl	8007d04 <__d2b>
 8006a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a08:	4681      	mov	r9, r0
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d077      	beq.n	8006afe <_dtoa_r+0x1d6>
 8006a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a28:	4619      	mov	r1, r3
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	4b74      	ldr	r3, [pc, #464]	@ (8006c00 <_dtoa_r+0x2d8>)
 8006a2e:	f7f9 fc53 	bl	80002d8 <__aeabi_dsub>
 8006a32:	a369      	add	r3, pc, #420	@ (adr r3, 8006bd8 <_dtoa_r+0x2b0>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fe06 	bl	8000648 <__aeabi_dmul>
 8006a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8006be0 <_dtoa_r+0x2b8>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fc4b 	bl	80002dc <__adddf3>
 8006a46:	4604      	mov	r4, r0
 8006a48:	4630      	mov	r0, r6
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	f7f9 fd92 	bl	8000574 <__aeabi_i2d>
 8006a50:	a365      	add	r3, pc, #404	@ (adr r3, 8006be8 <_dtoa_r+0x2c0>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fdf7 	bl	8000648 <__aeabi_dmul>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7f9 fc3b 	bl	80002dc <__adddf3>
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	f7fa f89d 	bl	8000ba8 <__aeabi_d2iz>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4607      	mov	r7, r0
 8006a72:	2300      	movs	r3, #0
 8006a74:	4620      	mov	r0, r4
 8006a76:	4629      	mov	r1, r5
 8006a78:	f7fa f858 	bl	8000b2c <__aeabi_dcmplt>
 8006a7c:	b140      	cbz	r0, 8006a90 <_dtoa_r+0x168>
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f7f9 fd78 	bl	8000574 <__aeabi_i2d>
 8006a84:	4622      	mov	r2, r4
 8006a86:	462b      	mov	r3, r5
 8006a88:	f7fa f846 	bl	8000b18 <__aeabi_dcmpeq>
 8006a8c:	b900      	cbnz	r0, 8006a90 <_dtoa_r+0x168>
 8006a8e:	3f01      	subs	r7, #1
 8006a90:	2f16      	cmp	r7, #22
 8006a92:	d851      	bhi.n	8006b38 <_dtoa_r+0x210>
 8006a94:	4b5b      	ldr	r3, [pc, #364]	@ (8006c04 <_dtoa_r+0x2dc>)
 8006a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aa2:	f7fa f843 	bl	8000b2c <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d048      	beq.n	8006b3c <_dtoa_r+0x214>
 8006aaa:	3f01      	subs	r7, #1
 8006aac:	2300      	movs	r3, #0
 8006aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ab2:	1b9b      	subs	r3, r3, r6
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	bf44      	itt	mi
 8006ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006abc:	2300      	movmi	r3, #0
 8006abe:	9208      	str	r2, [sp, #32]
 8006ac0:	bf54      	ite	pl
 8006ac2:	f04f 0800 	movpl.w	r8, #0
 8006ac6:	9308      	strmi	r3, [sp, #32]
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	db39      	blt.n	8006b40 <_dtoa_r+0x218>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ad0:	443b      	add	r3, r7
 8006ad2:	9308      	str	r3, [sp, #32]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d864      	bhi.n	8006ba8 <_dtoa_r+0x280>
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	bfc4      	itt	gt
 8006ae2:	3b04      	subgt	r3, #4
 8006ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8006aec:	bfcc      	ite	gt
 8006aee:	2400      	movgt	r4, #0
 8006af0:	2401      	movle	r4, #1
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d863      	bhi.n	8006bbe <_dtoa_r+0x296>
 8006af6:	e8df f003 	tbb	[pc, r3]
 8006afa:	372a      	.short	0x372a
 8006afc:	5535      	.short	0x5535
 8006afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b02:	441e      	add	r6, r3
 8006b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	bfc1      	itttt	gt
 8006b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b10:	409f      	lslgt	r7, r3
 8006b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b1a:	bfd6      	itet	le
 8006b1c:	f1c3 0320 	rsble	r3, r3, #32
 8006b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b24:	fa04 f003 	lslle.w	r0, r4, r3
 8006b28:	f7f9 fd14 	bl	8000554 <__aeabi_ui2d>
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b32:	3e01      	subs	r6, #1
 8006b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b36:	e777      	b.n	8006a28 <_dtoa_r+0x100>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e7b8      	b.n	8006aae <_dtoa_r+0x186>
 8006b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b3e:	e7b7      	b.n	8006ab0 <_dtoa_r+0x188>
 8006b40:	427b      	negs	r3, r7
 8006b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b44:	2300      	movs	r3, #0
 8006b46:	eba8 0807 	sub.w	r8, r8, r7
 8006b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b4c:	e7c4      	b.n	8006ad8 <_dtoa_r+0x1b0>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dc35      	bgt.n	8006bc4 <_dtoa_r+0x29c>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b62:	e00b      	b.n	8006b7c <_dtoa_r+0x254>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e7f3      	b.n	8006b50 <_dtoa_r+0x228>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	9307      	str	r3, [sp, #28]
 8006b78:	bfb8      	it	lt
 8006b7a:	2301      	movlt	r3, #1
 8006b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b80:	2100      	movs	r1, #0
 8006b82:	2204      	movs	r2, #4
 8006b84:	f102 0514 	add.w	r5, r2, #20
 8006b88:	429d      	cmp	r5, r3
 8006b8a:	d91f      	bls.n	8006bcc <_dtoa_r+0x2a4>
 8006b8c:	6041      	str	r1, [r0, #4]
 8006b8e:	4658      	mov	r0, fp
 8006b90:	f000 fd8e 	bl	80076b0 <_Balloc>
 8006b94:	4682      	mov	sl, r0
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d13c      	bne.n	8006c14 <_dtoa_r+0x2ec>
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c08 <_dtoa_r+0x2e0>)
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ba2:	e6d8      	b.n	8006956 <_dtoa_r+0x2e>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e7e0      	b.n	8006b6a <_dtoa_r+0x242>
 8006ba8:	2401      	movs	r4, #1
 8006baa:	2300      	movs	r3, #0
 8006bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2312      	movs	r3, #18
 8006bbc:	e7d0      	b.n	8006b60 <_dtoa_r+0x238>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bc2:	e7f5      	b.n	8006bb0 <_dtoa_r+0x288>
 8006bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	9307      	str	r3, [sp, #28]
 8006bca:	e7d7      	b.n	8006b7c <_dtoa_r+0x254>
 8006bcc:	3101      	adds	r1, #1
 8006bce:	0052      	lsls	r2, r2, #1
 8006bd0:	e7d8      	b.n	8006b84 <_dtoa_r+0x25c>
 8006bd2:	bf00      	nop
 8006bd4:	f3af 8000 	nop.w
 8006bd8:	636f4361 	.word	0x636f4361
 8006bdc:	3fd287a7 	.word	0x3fd287a7
 8006be0:	8b60c8b3 	.word	0x8b60c8b3
 8006be4:	3fc68a28 	.word	0x3fc68a28
 8006be8:	509f79fb 	.word	0x509f79fb
 8006bec:	3fd34413 	.word	0x3fd34413
 8006bf0:	08008631 	.word	0x08008631
 8006bf4:	08008648 	.word	0x08008648
 8006bf8:	7ff00000 	.word	0x7ff00000
 8006bfc:	08008601 	.word	0x08008601
 8006c00:	3ff80000 	.word	0x3ff80000
 8006c04:	08008740 	.word	0x08008740
 8006c08:	080086a0 	.word	0x080086a0
 8006c0c:	0800862d 	.word	0x0800862d
 8006c10:	08008600 	.word	0x08008600
 8006c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c18:	6018      	str	r0, [r3, #0]
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b0e      	cmp	r3, #14
 8006c1e:	f200 80a4 	bhi.w	8006d6a <_dtoa_r+0x442>
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	f000 80a1 	beq.w	8006d6a <_dtoa_r+0x442>
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	dd33      	ble.n	8006c94 <_dtoa_r+0x36c>
 8006c2c:	4bad      	ldr	r3, [pc, #692]	@ (8006ee4 <_dtoa_r+0x5bc>)
 8006c2e:	f007 020f 	and.w	r2, r7, #15
 8006c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c36:	ed93 7b00 	vldr	d7, [r3]
 8006c3a:	05f8      	lsls	r0, r7, #23
 8006c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c44:	d516      	bpl.n	8006c74 <_dtoa_r+0x34c>
 8006c46:	4ba8      	ldr	r3, [pc, #672]	@ (8006ee8 <_dtoa_r+0x5c0>)
 8006c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c50:	f7f9 fe24 	bl	800089c <__aeabi_ddiv>
 8006c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c58:	f004 040f 	and.w	r4, r4, #15
 8006c5c:	2603      	movs	r6, #3
 8006c5e:	4da2      	ldr	r5, [pc, #648]	@ (8006ee8 <_dtoa_r+0x5c0>)
 8006c60:	b954      	cbnz	r4, 8006c78 <_dtoa_r+0x350>
 8006c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6a:	f7f9 fe17 	bl	800089c <__aeabi_ddiv>
 8006c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c72:	e028      	b.n	8006cc6 <_dtoa_r+0x39e>
 8006c74:	2602      	movs	r6, #2
 8006c76:	e7f2      	b.n	8006c5e <_dtoa_r+0x336>
 8006c78:	07e1      	lsls	r1, r4, #31
 8006c7a:	d508      	bpl.n	8006c8e <_dtoa_r+0x366>
 8006c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c84:	f7f9 fce0 	bl	8000648 <__aeabi_dmul>
 8006c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	1064      	asrs	r4, r4, #1
 8006c90:	3508      	adds	r5, #8
 8006c92:	e7e5      	b.n	8006c60 <_dtoa_r+0x338>
 8006c94:	f000 80d2 	beq.w	8006e3c <_dtoa_r+0x514>
 8006c98:	427c      	negs	r4, r7
 8006c9a:	4b92      	ldr	r3, [pc, #584]	@ (8006ee4 <_dtoa_r+0x5bc>)
 8006c9c:	4d92      	ldr	r5, [pc, #584]	@ (8006ee8 <_dtoa_r+0x5c0>)
 8006c9e:	f004 020f 	and.w	r2, r4, #15
 8006ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cae:	f7f9 fccb 	bl	8000648 <__aeabi_dmul>
 8006cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb6:	1124      	asrs	r4, r4, #4
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2602      	movs	r6, #2
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	f040 80b2 	bne.w	8006e26 <_dtoa_r+0x4fe>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d3      	bne.n	8006c6e <_dtoa_r+0x346>
 8006cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80b7 	beq.w	8006e40 <_dtoa_r+0x518>
 8006cd2:	4b86      	ldr	r3, [pc, #536]	@ (8006eec <_dtoa_r+0x5c4>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 ff27 	bl	8000b2c <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f000 80ae 	beq.w	8006e40 <_dtoa_r+0x518>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80aa 	beq.w	8006e40 <_dtoa_r+0x518>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd37      	ble.n	8006d62 <_dtoa_r+0x43a>
 8006cf2:	1e7b      	subs	r3, r7, #1
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ef0 <_dtoa_r+0x5c8>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	f7f9 fca3 	bl	8000648 <__aeabi_dmul>
 8006d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d06:	9c00      	ldr	r4, [sp, #0]
 8006d08:	3601      	adds	r6, #1
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7f9 fc32 	bl	8000574 <__aeabi_i2d>
 8006d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d14:	f7f9 fc98 	bl	8000648 <__aeabi_dmul>
 8006d18:	4b76      	ldr	r3, [pc, #472]	@ (8006ef4 <_dtoa_r+0x5cc>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f7f9 fade 	bl	80002dc <__adddf3>
 8006d20:	4605      	mov	r5, r0
 8006d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d26:	2c00      	cmp	r4, #0
 8006d28:	f040 808d 	bne.w	8006e46 <_dtoa_r+0x51e>
 8006d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d30:	4b71      	ldr	r3, [pc, #452]	@ (8006ef8 <_dtoa_r+0x5d0>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	f7f9 fad0 	bl	80002d8 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d40:	462a      	mov	r2, r5
 8006d42:	4633      	mov	r3, r6
 8006d44:	f7f9 ff10 	bl	8000b68 <__aeabi_dcmpgt>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f040 828b 	bne.w	8007264 <_dtoa_r+0x93c>
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	462a      	mov	r2, r5
 8006d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d58:	f7f9 fee8 	bl	8000b2c <__aeabi_dcmplt>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f040 8128 	bne.w	8006fb2 <_dtoa_r+0x68a>
 8006d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f2c0 815a 	blt.w	8007026 <_dtoa_r+0x6fe>
 8006d72:	2f0e      	cmp	r7, #14
 8006d74:	f300 8157 	bgt.w	8007026 <_dtoa_r+0x6fe>
 8006d78:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee4 <_dtoa_r+0x5bc>)
 8006d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d7e:	ed93 7b00 	vldr	d7, [r3]
 8006d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	ed8d 7b00 	vstr	d7, [sp]
 8006d8a:	da03      	bge.n	8006d94 <_dtoa_r+0x46c>
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f340 8101 	ble.w	8006f96 <_dtoa_r+0x66e>
 8006d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d98:	4656      	mov	r6, sl
 8006d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fd7b 	bl	800089c <__aeabi_ddiv>
 8006da6:	f7f9 feff 	bl	8000ba8 <__aeabi_d2iz>
 8006daa:	4680      	mov	r8, r0
 8006dac:	f7f9 fbe2 	bl	8000574 <__aeabi_i2d>
 8006db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006db4:	f7f9 fc48 	bl	8000648 <__aeabi_dmul>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dc4:	f7f9 fa88 	bl	80002d8 <__aeabi_dsub>
 8006dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8006dcc:	9d07      	ldr	r5, [sp, #28]
 8006dce:	eba6 040a 	sub.w	r4, r6, sl
 8006dd2:	42a5      	cmp	r5, r4
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	f040 8117 	bne.w	800700a <_dtoa_r+0x6e2>
 8006ddc:	f7f9 fa7e 	bl	80002dc <__adddf3>
 8006de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	f7f9 febe 	bl	8000b68 <__aeabi_dcmpgt>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f040 80f9 	bne.w	8006fe4 <_dtoa_r+0x6bc>
 8006df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 8006dfe:	b118      	cbz	r0, 8006e08 <_dtoa_r+0x4e0>
 8006e00:	f018 0f01 	tst.w	r8, #1
 8006e04:	f040 80ee 	bne.w	8006fe4 <_dtoa_r+0x6bc>
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f000 fc90 	bl	8007730 <_Bfree>
 8006e10:	2300      	movs	r3, #0
 8006e12:	7033      	strb	r3, [r6, #0]
 8006e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e16:	3701      	adds	r7, #1
 8006e18:	601f      	str	r7, [r3, #0]
 8006e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 831d 	beq.w	800745c <_dtoa_r+0xb34>
 8006e22:	601e      	str	r6, [r3, #0]
 8006e24:	e31a      	b.n	800745c <_dtoa_r+0xb34>
 8006e26:	07e2      	lsls	r2, r4, #31
 8006e28:	d505      	bpl.n	8006e36 <_dtoa_r+0x50e>
 8006e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e2e:	f7f9 fc0b 	bl	8000648 <__aeabi_dmul>
 8006e32:	3601      	adds	r6, #1
 8006e34:	2301      	movs	r3, #1
 8006e36:	1064      	asrs	r4, r4, #1
 8006e38:	3508      	adds	r5, #8
 8006e3a:	e73f      	b.n	8006cbc <_dtoa_r+0x394>
 8006e3c:	2602      	movs	r6, #2
 8006e3e:	e742      	b.n	8006cc6 <_dtoa_r+0x39e>
 8006e40:	9c07      	ldr	r4, [sp, #28]
 8006e42:	9704      	str	r7, [sp, #16]
 8006e44:	e761      	b.n	8006d0a <_dtoa_r+0x3e2>
 8006e46:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <_dtoa_r+0x5bc>)
 8006e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e52:	4454      	add	r4, sl
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d053      	beq.n	8006f00 <_dtoa_r+0x5d8>
 8006e58:	4928      	ldr	r1, [pc, #160]	@ (8006efc <_dtoa_r+0x5d4>)
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7f9 fd1e 	bl	800089c <__aeabi_ddiv>
 8006e60:	4633      	mov	r3, r6
 8006e62:	462a      	mov	r2, r5
 8006e64:	f7f9 fa38 	bl	80002d8 <__aeabi_dsub>
 8006e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e6c:	4656      	mov	r6, sl
 8006e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e72:	f7f9 fe99 	bl	8000ba8 <__aeabi_d2iz>
 8006e76:	4605      	mov	r5, r0
 8006e78:	f7f9 fb7c 	bl	8000574 <__aeabi_i2d>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e84:	f7f9 fa28 	bl	80002d8 <__aeabi_dsub>
 8006e88:	3530      	adds	r5, #48	@ 0x30
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e92:	f806 5b01 	strb.w	r5, [r6], #1
 8006e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e9a:	f7f9 fe47 	bl	8000b2c <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d171      	bne.n	8006f86 <_dtoa_r+0x65e>
 8006ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea6:	4911      	ldr	r1, [pc, #68]	@ (8006eec <_dtoa_r+0x5c4>)
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f7f9 fa15 	bl	80002d8 <__aeabi_dsub>
 8006eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eb2:	f7f9 fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f040 8095 	bne.w	8006fe6 <_dtoa_r+0x6be>
 8006ebc:	42a6      	cmp	r6, r4
 8006ebe:	f43f af50 	beq.w	8006d62 <_dtoa_r+0x43a>
 8006ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <_dtoa_r+0x5c8>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fbbd 	bl	8000648 <__aeabi_dmul>
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <_dtoa_r+0x5c8>)
 8006ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eda:	f7f9 fbb5 	bl	8000648 <__aeabi_dmul>
 8006ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee2:	e7c4      	b.n	8006e6e <_dtoa_r+0x546>
 8006ee4:	08008740 	.word	0x08008740
 8006ee8:	08008718 	.word	0x08008718
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	40240000 	.word	0x40240000
 8006ef4:	401c0000 	.word	0x401c0000
 8006ef8:	40140000 	.word	0x40140000
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	f7f9 fba0 	bl	8000648 <__aeabi_dmul>
 8006f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f0e:	4656      	mov	r6, sl
 8006f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f14:	f7f9 fe48 	bl	8000ba8 <__aeabi_d2iz>
 8006f18:	4605      	mov	r5, r0
 8006f1a:	f7f9 fb2b 	bl	8000574 <__aeabi_i2d>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f26:	f7f9 f9d7 	bl	80002d8 <__aeabi_dsub>
 8006f2a:	3530      	adds	r5, #48	@ 0x30
 8006f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	d124      	bne.n	8006f8a <_dtoa_r+0x662>
 8006f40:	4bac      	ldr	r3, [pc, #688]	@ (80071f4 <_dtoa_r+0x8cc>)
 8006f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f46:	f7f9 f9c9 	bl	80002dc <__adddf3>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f52:	f7f9 fe09 	bl	8000b68 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d145      	bne.n	8006fe6 <_dtoa_r+0x6be>
 8006f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f5e:	49a5      	ldr	r1, [pc, #660]	@ (80071f4 <_dtoa_r+0x8cc>)
 8006f60:	2000      	movs	r0, #0
 8006f62:	f7f9 f9b9 	bl	80002d8 <__aeabi_dsub>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6e:	f7f9 fddd 	bl	8000b2c <__aeabi_dcmplt>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f aef5 	beq.w	8006d62 <_dtoa_r+0x43a>
 8006f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f7a:	1e73      	subs	r3, r6, #1
 8006f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f82:	2b30      	cmp	r3, #48	@ 0x30
 8006f84:	d0f8      	beq.n	8006f78 <_dtoa_r+0x650>
 8006f86:	9f04      	ldr	r7, [sp, #16]
 8006f88:	e73e      	b.n	8006e08 <_dtoa_r+0x4e0>
 8006f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80071f8 <_dtoa_r+0x8d0>)
 8006f8c:	f7f9 fb5c 	bl	8000648 <__aeabi_dmul>
 8006f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f94:	e7bc      	b.n	8006f10 <_dtoa_r+0x5e8>
 8006f96:	d10c      	bne.n	8006fb2 <_dtoa_r+0x68a>
 8006f98:	4b98      	ldr	r3, [pc, #608]	@ (80071fc <_dtoa_r+0x8d4>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fa0:	f7f9 fb52 	bl	8000648 <__aeabi_dmul>
 8006fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa8:	f7f9 fdd4 	bl	8000b54 <__aeabi_dcmpge>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f000 8157 	beq.w	8007260 <_dtoa_r+0x938>
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	4625      	mov	r5, r4
 8006fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	4656      	mov	r6, sl
 8006fbe:	2700      	movs	r7, #0
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	f000 fbb4 	bl	8007730 <_Bfree>
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	d0dc      	beq.n	8006f86 <_dtoa_r+0x65e>
 8006fcc:	b12f      	cbz	r7, 8006fda <_dtoa_r+0x6b2>
 8006fce:	42af      	cmp	r7, r5
 8006fd0:	d003      	beq.n	8006fda <_dtoa_r+0x6b2>
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f000 fbab 	bl	8007730 <_Bfree>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4658      	mov	r0, fp
 8006fde:	f000 fba7 	bl	8007730 <_Bfree>
 8006fe2:	e7d0      	b.n	8006f86 <_dtoa_r+0x65e>
 8006fe4:	9704      	str	r7, [sp, #16]
 8006fe6:	4633      	mov	r3, r6
 8006fe8:	461e      	mov	r6, r3
 8006fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fee:	2a39      	cmp	r2, #57	@ 0x39
 8006ff0:	d107      	bne.n	8007002 <_dtoa_r+0x6da>
 8006ff2:	459a      	cmp	sl, r3
 8006ff4:	d1f8      	bne.n	8006fe8 <_dtoa_r+0x6c0>
 8006ff6:	9a04      	ldr	r2, [sp, #16]
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	9204      	str	r2, [sp, #16]
 8006ffc:	2230      	movs	r2, #48	@ 0x30
 8006ffe:	f88a 2000 	strb.w	r2, [sl]
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	3201      	adds	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e7bd      	b.n	8006f86 <_dtoa_r+0x65e>
 800700a:	4b7b      	ldr	r3, [pc, #492]	@ (80071f8 <_dtoa_r+0x8d0>)
 800700c:	2200      	movs	r2, #0
 800700e:	f7f9 fb1b 	bl	8000648 <__aeabi_dmul>
 8007012:	2200      	movs	r2, #0
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	f7f9 fd7d 	bl	8000b18 <__aeabi_dcmpeq>
 800701e:	2800      	cmp	r0, #0
 8007020:	f43f aebb 	beq.w	8006d9a <_dtoa_r+0x472>
 8007024:	e6f0      	b.n	8006e08 <_dtoa_r+0x4e0>
 8007026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007028:	2a00      	cmp	r2, #0
 800702a:	f000 80db 	beq.w	80071e4 <_dtoa_r+0x8bc>
 800702e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007030:	2a01      	cmp	r2, #1
 8007032:	f300 80bf 	bgt.w	80071b4 <_dtoa_r+0x88c>
 8007036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007038:	2a00      	cmp	r2, #0
 800703a:	f000 80b7 	beq.w	80071ac <_dtoa_r+0x884>
 800703e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007044:	4646      	mov	r6, r8
 8007046:	9a08      	ldr	r2, [sp, #32]
 8007048:	2101      	movs	r1, #1
 800704a:	441a      	add	r2, r3
 800704c:	4658      	mov	r0, fp
 800704e:	4498      	add	r8, r3
 8007050:	9208      	str	r2, [sp, #32]
 8007052:	f000 fc21 	bl	8007898 <__i2b>
 8007056:	4605      	mov	r5, r0
 8007058:	b15e      	cbz	r6, 8007072 <_dtoa_r+0x74a>
 800705a:	9b08      	ldr	r3, [sp, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dd08      	ble.n	8007072 <_dtoa_r+0x74a>
 8007060:	42b3      	cmp	r3, r6
 8007062:	9a08      	ldr	r2, [sp, #32]
 8007064:	bfa8      	it	ge
 8007066:	4633      	movge	r3, r6
 8007068:	eba8 0803 	sub.w	r8, r8, r3
 800706c:	1af6      	subs	r6, r6, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	9308      	str	r3, [sp, #32]
 8007072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007074:	b1f3      	cbz	r3, 80070b4 <_dtoa_r+0x78c>
 8007076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80b7 	beq.w	80071ec <_dtoa_r+0x8c4>
 800707e:	b18c      	cbz	r4, 80070a4 <_dtoa_r+0x77c>
 8007080:	4629      	mov	r1, r5
 8007082:	4622      	mov	r2, r4
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fcc7 	bl	8007a18 <__pow5mult>
 800708a:	464a      	mov	r2, r9
 800708c:	4601      	mov	r1, r0
 800708e:	4605      	mov	r5, r0
 8007090:	4658      	mov	r0, fp
 8007092:	f000 fc17 	bl	80078c4 <__multiply>
 8007096:	4649      	mov	r1, r9
 8007098:	9004      	str	r0, [sp, #16]
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fb48 	bl	8007730 <_Bfree>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	4699      	mov	r9, r3
 80070a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070a6:	1b1a      	subs	r2, r3, r4
 80070a8:	d004      	beq.n	80070b4 <_dtoa_r+0x78c>
 80070aa:	4649      	mov	r1, r9
 80070ac:	4658      	mov	r0, fp
 80070ae:	f000 fcb3 	bl	8007a18 <__pow5mult>
 80070b2:	4681      	mov	r9, r0
 80070b4:	2101      	movs	r1, #1
 80070b6:	4658      	mov	r0, fp
 80070b8:	f000 fbee 	bl	8007898 <__i2b>
 80070bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070be:	4604      	mov	r4, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 81cf 	beq.w	8007464 <_dtoa_r+0xb3c>
 80070c6:	461a      	mov	r2, r3
 80070c8:	4601      	mov	r1, r0
 80070ca:	4658      	mov	r0, fp
 80070cc:	f000 fca4 	bl	8007a18 <__pow5mult>
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	4604      	mov	r4, r0
 80070d6:	f300 8095 	bgt.w	8007204 <_dtoa_r+0x8dc>
 80070da:	9b02      	ldr	r3, [sp, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8087 	bne.w	80071f0 <_dtoa_r+0x8c8>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8089 	bne.w	8007200 <_dtoa_r+0x8d8>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070f4:	0d1b      	lsrs	r3, r3, #20
 80070f6:	051b      	lsls	r3, r3, #20
 80070f8:	b12b      	cbz	r3, 8007106 <_dtoa_r+0x7de>
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	3301      	adds	r3, #1
 80070fe:	9308      	str	r3, [sp, #32]
 8007100:	f108 0801 	add.w	r8, r8, #1
 8007104:	2301      	movs	r3, #1
 8007106:	930a      	str	r3, [sp, #40]	@ 0x28
 8007108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 81b0 	beq.w	8007470 <_dtoa_r+0xb48>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007116:	6918      	ldr	r0, [r3, #16]
 8007118:	f000 fb72 	bl	8007800 <__hi0bits>
 800711c:	f1c0 0020 	rsb	r0, r0, #32
 8007120:	9b08      	ldr	r3, [sp, #32]
 8007122:	4418      	add	r0, r3
 8007124:	f010 001f 	ands.w	r0, r0, #31
 8007128:	d077      	beq.n	800721a <_dtoa_r+0x8f2>
 800712a:	f1c0 0320 	rsb	r3, r0, #32
 800712e:	2b04      	cmp	r3, #4
 8007130:	dd6b      	ble.n	800720a <_dtoa_r+0x8e2>
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	f1c0 001c 	rsb	r0, r0, #28
 8007138:	4403      	add	r3, r0
 800713a:	4480      	add	r8, r0
 800713c:	4406      	add	r6, r0
 800713e:	9308      	str	r3, [sp, #32]
 8007140:	f1b8 0f00 	cmp.w	r8, #0
 8007144:	dd05      	ble.n	8007152 <_dtoa_r+0x82a>
 8007146:	4649      	mov	r1, r9
 8007148:	4642      	mov	r2, r8
 800714a:	4658      	mov	r0, fp
 800714c:	f000 fcbe 	bl	8007acc <__lshift>
 8007150:	4681      	mov	r9, r0
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd05      	ble.n	8007164 <_dtoa_r+0x83c>
 8007158:	4621      	mov	r1, r4
 800715a:	461a      	mov	r2, r3
 800715c:	4658      	mov	r0, fp
 800715e:	f000 fcb5 	bl	8007acc <__lshift>
 8007162:	4604      	mov	r4, r0
 8007164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007166:	2b00      	cmp	r3, #0
 8007168:	d059      	beq.n	800721e <_dtoa_r+0x8f6>
 800716a:	4621      	mov	r1, r4
 800716c:	4648      	mov	r0, r9
 800716e:	f000 fd19 	bl	8007ba4 <__mcmp>
 8007172:	2800      	cmp	r0, #0
 8007174:	da53      	bge.n	800721e <_dtoa_r+0x8f6>
 8007176:	1e7b      	subs	r3, r7, #1
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	4649      	mov	r1, r9
 800717c:	2300      	movs	r3, #0
 800717e:	220a      	movs	r2, #10
 8007180:	4658      	mov	r0, fp
 8007182:	f000 faf7 	bl	8007774 <__multadd>
 8007186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007188:	4681      	mov	r9, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8172 	beq.w	8007474 <_dtoa_r+0xb4c>
 8007190:	2300      	movs	r3, #0
 8007192:	4629      	mov	r1, r5
 8007194:	220a      	movs	r2, #10
 8007196:	4658      	mov	r0, fp
 8007198:	f000 faec 	bl	8007774 <__multadd>
 800719c:	9b00      	ldr	r3, [sp, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	4605      	mov	r5, r0
 80071a2:	dc67      	bgt.n	8007274 <_dtoa_r+0x94c>
 80071a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	dc41      	bgt.n	800722e <_dtoa_r+0x906>
 80071aa:	e063      	b.n	8007274 <_dtoa_r+0x94c>
 80071ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071b2:	e746      	b.n	8007042 <_dtoa_r+0x71a>
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	1e5c      	subs	r4, r3, #1
 80071b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	bfbf      	itttt	lt
 80071be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80071c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071c4:	1ae3      	sublt	r3, r4, r3
 80071c6:	bfb4      	ite	lt
 80071c8:	18d2      	addlt	r2, r2, r3
 80071ca:	1b1c      	subge	r4, r3, r4
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	bfbc      	itt	lt
 80071d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071d2:	2400      	movlt	r4, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bfb5      	itete	lt
 80071d8:	eba8 0603 	sublt.w	r6, r8, r3
 80071dc:	9b07      	ldrge	r3, [sp, #28]
 80071de:	2300      	movlt	r3, #0
 80071e0:	4646      	movge	r6, r8
 80071e2:	e730      	b.n	8007046 <_dtoa_r+0x71e>
 80071e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071e8:	4646      	mov	r6, r8
 80071ea:	e735      	b.n	8007058 <_dtoa_r+0x730>
 80071ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071ee:	e75c      	b.n	80070aa <_dtoa_r+0x782>
 80071f0:	2300      	movs	r3, #0
 80071f2:	e788      	b.n	8007106 <_dtoa_r+0x7de>
 80071f4:	3fe00000 	.word	0x3fe00000
 80071f8:	40240000 	.word	0x40240000
 80071fc:	40140000 	.word	0x40140000
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	e780      	b.n	8007106 <_dtoa_r+0x7de>
 8007204:	2300      	movs	r3, #0
 8007206:	930a      	str	r3, [sp, #40]	@ 0x28
 8007208:	e782      	b.n	8007110 <_dtoa_r+0x7e8>
 800720a:	d099      	beq.n	8007140 <_dtoa_r+0x818>
 800720c:	9a08      	ldr	r2, [sp, #32]
 800720e:	331c      	adds	r3, #28
 8007210:	441a      	add	r2, r3
 8007212:	4498      	add	r8, r3
 8007214:	441e      	add	r6, r3
 8007216:	9208      	str	r2, [sp, #32]
 8007218:	e792      	b.n	8007140 <_dtoa_r+0x818>
 800721a:	4603      	mov	r3, r0
 800721c:	e7f6      	b.n	800720c <_dtoa_r+0x8e4>
 800721e:	9b07      	ldr	r3, [sp, #28]
 8007220:	9704      	str	r7, [sp, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dc20      	bgt.n	8007268 <_dtoa_r+0x940>
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722a:	2b02      	cmp	r3, #2
 800722c:	dd1e      	ble.n	800726c <_dtoa_r+0x944>
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f aec0 	bne.w	8006fb6 <_dtoa_r+0x68e>
 8007236:	4621      	mov	r1, r4
 8007238:	2205      	movs	r2, #5
 800723a:	4658      	mov	r0, fp
 800723c:	f000 fa9a 	bl	8007774 <__multadd>
 8007240:	4601      	mov	r1, r0
 8007242:	4604      	mov	r4, r0
 8007244:	4648      	mov	r0, r9
 8007246:	f000 fcad 	bl	8007ba4 <__mcmp>
 800724a:	2800      	cmp	r0, #0
 800724c:	f77f aeb3 	ble.w	8006fb6 <_dtoa_r+0x68e>
 8007250:	4656      	mov	r6, sl
 8007252:	2331      	movs	r3, #49	@ 0x31
 8007254:	f806 3b01 	strb.w	r3, [r6], #1
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	3301      	adds	r3, #1
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	e6ae      	b.n	8006fbe <_dtoa_r+0x696>
 8007260:	9c07      	ldr	r4, [sp, #28]
 8007262:	9704      	str	r7, [sp, #16]
 8007264:	4625      	mov	r5, r4
 8007266:	e7f3      	b.n	8007250 <_dtoa_r+0x928>
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8104 	beq.w	800747c <_dtoa_r+0xb54>
 8007274:	2e00      	cmp	r6, #0
 8007276:	dd05      	ble.n	8007284 <_dtoa_r+0x95c>
 8007278:	4629      	mov	r1, r5
 800727a:	4632      	mov	r2, r6
 800727c:	4658      	mov	r0, fp
 800727e:	f000 fc25 	bl	8007acc <__lshift>
 8007282:	4605      	mov	r5, r0
 8007284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d05a      	beq.n	8007340 <_dtoa_r+0xa18>
 800728a:	6869      	ldr	r1, [r5, #4]
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fa0f 	bl	80076b0 <_Balloc>
 8007292:	4606      	mov	r6, r0
 8007294:	b928      	cbnz	r0, 80072a2 <_dtoa_r+0x97a>
 8007296:	4b84      	ldr	r3, [pc, #528]	@ (80074a8 <_dtoa_r+0xb80>)
 8007298:	4602      	mov	r2, r0
 800729a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800729e:	f7ff bb5a 	b.w	8006956 <_dtoa_r+0x2e>
 80072a2:	692a      	ldr	r2, [r5, #16]
 80072a4:	3202      	adds	r2, #2
 80072a6:	0092      	lsls	r2, r2, #2
 80072a8:	f105 010c 	add.w	r1, r5, #12
 80072ac:	300c      	adds	r0, #12
 80072ae:	f001 f897 	bl	80083e0 <memcpy>
 80072b2:	2201      	movs	r2, #1
 80072b4:	4631      	mov	r1, r6
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 fc08 	bl	8007acc <__lshift>
 80072bc:	f10a 0301 	add.w	r3, sl, #1
 80072c0:	9307      	str	r3, [sp, #28]
 80072c2:	9b00      	ldr	r3, [sp, #0]
 80072c4:	4453      	add	r3, sl
 80072c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072c8:	9b02      	ldr	r3, [sp, #8]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	462f      	mov	r7, r5
 80072d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d2:	4605      	mov	r5, r0
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	4621      	mov	r1, r4
 80072d8:	3b01      	subs	r3, #1
 80072da:	4648      	mov	r0, r9
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	f7ff fa98 	bl	8006812 <quorem>
 80072e2:	4639      	mov	r1, r7
 80072e4:	9002      	str	r0, [sp, #8]
 80072e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ea:	4648      	mov	r0, r9
 80072ec:	f000 fc5a 	bl	8007ba4 <__mcmp>
 80072f0:	462a      	mov	r2, r5
 80072f2:	9008      	str	r0, [sp, #32]
 80072f4:	4621      	mov	r1, r4
 80072f6:	4658      	mov	r0, fp
 80072f8:	f000 fc70 	bl	8007bdc <__mdiff>
 80072fc:	68c2      	ldr	r2, [r0, #12]
 80072fe:	4606      	mov	r6, r0
 8007300:	bb02      	cbnz	r2, 8007344 <_dtoa_r+0xa1c>
 8007302:	4601      	mov	r1, r0
 8007304:	4648      	mov	r0, r9
 8007306:	f000 fc4d 	bl	8007ba4 <__mcmp>
 800730a:	4602      	mov	r2, r0
 800730c:	4631      	mov	r1, r6
 800730e:	4658      	mov	r0, fp
 8007310:	920e      	str	r2, [sp, #56]	@ 0x38
 8007312:	f000 fa0d 	bl	8007730 <_Bfree>
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800731a:	9e07      	ldr	r6, [sp, #28]
 800731c:	ea43 0102 	orr.w	r1, r3, r2
 8007320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007322:	4319      	orrs	r1, r3
 8007324:	d110      	bne.n	8007348 <_dtoa_r+0xa20>
 8007326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800732a:	d029      	beq.n	8007380 <_dtoa_r+0xa58>
 800732c:	9b08      	ldr	r3, [sp, #32]
 800732e:	2b00      	cmp	r3, #0
 8007330:	dd02      	ble.n	8007338 <_dtoa_r+0xa10>
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	f883 8000 	strb.w	r8, [r3]
 800733e:	e63f      	b.n	8006fc0 <_dtoa_r+0x698>
 8007340:	4628      	mov	r0, r5
 8007342:	e7bb      	b.n	80072bc <_dtoa_r+0x994>
 8007344:	2201      	movs	r2, #1
 8007346:	e7e1      	b.n	800730c <_dtoa_r+0x9e4>
 8007348:	9b08      	ldr	r3, [sp, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	db04      	blt.n	8007358 <_dtoa_r+0xa30>
 800734e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007350:	430b      	orrs	r3, r1
 8007352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007354:	430b      	orrs	r3, r1
 8007356:	d120      	bne.n	800739a <_dtoa_r+0xa72>
 8007358:	2a00      	cmp	r2, #0
 800735a:	dded      	ble.n	8007338 <_dtoa_r+0xa10>
 800735c:	4649      	mov	r1, r9
 800735e:	2201      	movs	r2, #1
 8007360:	4658      	mov	r0, fp
 8007362:	f000 fbb3 	bl	8007acc <__lshift>
 8007366:	4621      	mov	r1, r4
 8007368:	4681      	mov	r9, r0
 800736a:	f000 fc1b 	bl	8007ba4 <__mcmp>
 800736e:	2800      	cmp	r0, #0
 8007370:	dc03      	bgt.n	800737a <_dtoa_r+0xa52>
 8007372:	d1e1      	bne.n	8007338 <_dtoa_r+0xa10>
 8007374:	f018 0f01 	tst.w	r8, #1
 8007378:	d0de      	beq.n	8007338 <_dtoa_r+0xa10>
 800737a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800737e:	d1d8      	bne.n	8007332 <_dtoa_r+0xa0a>
 8007380:	9a00      	ldr	r2, [sp, #0]
 8007382:	2339      	movs	r3, #57	@ 0x39
 8007384:	7013      	strb	r3, [r2, #0]
 8007386:	4633      	mov	r3, r6
 8007388:	461e      	mov	r6, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007390:	2a39      	cmp	r2, #57	@ 0x39
 8007392:	d052      	beq.n	800743a <_dtoa_r+0xb12>
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e612      	b.n	8006fc0 <_dtoa_r+0x698>
 800739a:	2a00      	cmp	r2, #0
 800739c:	dd07      	ble.n	80073ae <_dtoa_r+0xa86>
 800739e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073a2:	d0ed      	beq.n	8007380 <_dtoa_r+0xa58>
 80073a4:	9a00      	ldr	r2, [sp, #0]
 80073a6:	f108 0301 	add.w	r3, r8, #1
 80073aa:	7013      	strb	r3, [r2, #0]
 80073ac:	e608      	b.n	8006fc0 <_dtoa_r+0x698>
 80073ae:	9b07      	ldr	r3, [sp, #28]
 80073b0:	9a07      	ldr	r2, [sp, #28]
 80073b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d028      	beq.n	800740e <_dtoa_r+0xae6>
 80073bc:	4649      	mov	r1, r9
 80073be:	2300      	movs	r3, #0
 80073c0:	220a      	movs	r2, #10
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 f9d6 	bl	8007774 <__multadd>
 80073c8:	42af      	cmp	r7, r5
 80073ca:	4681      	mov	r9, r0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	f04f 020a 	mov.w	r2, #10
 80073d4:	4639      	mov	r1, r7
 80073d6:	4658      	mov	r0, fp
 80073d8:	d107      	bne.n	80073ea <_dtoa_r+0xac2>
 80073da:	f000 f9cb 	bl	8007774 <__multadd>
 80073de:	4607      	mov	r7, r0
 80073e0:	4605      	mov	r5, r0
 80073e2:	9b07      	ldr	r3, [sp, #28]
 80073e4:	3301      	adds	r3, #1
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	e774      	b.n	80072d4 <_dtoa_r+0x9ac>
 80073ea:	f000 f9c3 	bl	8007774 <__multadd>
 80073ee:	4629      	mov	r1, r5
 80073f0:	4607      	mov	r7, r0
 80073f2:	2300      	movs	r3, #0
 80073f4:	220a      	movs	r2, #10
 80073f6:	4658      	mov	r0, fp
 80073f8:	f000 f9bc 	bl	8007774 <__multadd>
 80073fc:	4605      	mov	r5, r0
 80073fe:	e7f0      	b.n	80073e2 <_dtoa_r+0xaba>
 8007400:	9b00      	ldr	r3, [sp, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfcc      	ite	gt
 8007406:	461e      	movgt	r6, r3
 8007408:	2601      	movle	r6, #1
 800740a:	4456      	add	r6, sl
 800740c:	2700      	movs	r7, #0
 800740e:	4649      	mov	r1, r9
 8007410:	2201      	movs	r2, #1
 8007412:	4658      	mov	r0, fp
 8007414:	f000 fb5a 	bl	8007acc <__lshift>
 8007418:	4621      	mov	r1, r4
 800741a:	4681      	mov	r9, r0
 800741c:	f000 fbc2 	bl	8007ba4 <__mcmp>
 8007420:	2800      	cmp	r0, #0
 8007422:	dcb0      	bgt.n	8007386 <_dtoa_r+0xa5e>
 8007424:	d102      	bne.n	800742c <_dtoa_r+0xb04>
 8007426:	f018 0f01 	tst.w	r8, #1
 800742a:	d1ac      	bne.n	8007386 <_dtoa_r+0xa5e>
 800742c:	4633      	mov	r3, r6
 800742e:	461e      	mov	r6, r3
 8007430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007434:	2a30      	cmp	r2, #48	@ 0x30
 8007436:	d0fa      	beq.n	800742e <_dtoa_r+0xb06>
 8007438:	e5c2      	b.n	8006fc0 <_dtoa_r+0x698>
 800743a:	459a      	cmp	sl, r3
 800743c:	d1a4      	bne.n	8007388 <_dtoa_r+0xa60>
 800743e:	9b04      	ldr	r3, [sp, #16]
 8007440:	3301      	adds	r3, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	2331      	movs	r3, #49	@ 0x31
 8007446:	f88a 3000 	strb.w	r3, [sl]
 800744a:	e5b9      	b.n	8006fc0 <_dtoa_r+0x698>
 800744c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800744e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80074ac <_dtoa_r+0xb84>
 8007452:	b11b      	cbz	r3, 800745c <_dtoa_r+0xb34>
 8007454:	f10a 0308 	add.w	r3, sl, #8
 8007458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	4650      	mov	r0, sl
 800745e:	b019      	add	sp, #100	@ 0x64
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007466:	2b01      	cmp	r3, #1
 8007468:	f77f ae37 	ble.w	80070da <_dtoa_r+0x7b2>
 800746c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800746e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007470:	2001      	movs	r0, #1
 8007472:	e655      	b.n	8007120 <_dtoa_r+0x7f8>
 8007474:	9b00      	ldr	r3, [sp, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f77f aed6 	ble.w	8007228 <_dtoa_r+0x900>
 800747c:	4656      	mov	r6, sl
 800747e:	4621      	mov	r1, r4
 8007480:	4648      	mov	r0, r9
 8007482:	f7ff f9c6 	bl	8006812 <quorem>
 8007486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800748a:	f806 8b01 	strb.w	r8, [r6], #1
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	eba6 020a 	sub.w	r2, r6, sl
 8007494:	4293      	cmp	r3, r2
 8007496:	ddb3      	ble.n	8007400 <_dtoa_r+0xad8>
 8007498:	4649      	mov	r1, r9
 800749a:	2300      	movs	r3, #0
 800749c:	220a      	movs	r2, #10
 800749e:	4658      	mov	r0, fp
 80074a0:	f000 f968 	bl	8007774 <__multadd>
 80074a4:	4681      	mov	r9, r0
 80074a6:	e7ea      	b.n	800747e <_dtoa_r+0xb56>
 80074a8:	080086a0 	.word	0x080086a0
 80074ac:	08008624 	.word	0x08008624

080074b0 <_free_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d041      	beq.n	800753c <_free_r+0x8c>
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f0c      	subs	r4, r1, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfb8      	it	lt
 80074c2:	18e4      	addlt	r4, r4, r3
 80074c4:	f000 f8e8 	bl	8007698 <__malloc_lock>
 80074c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <_free_r+0x90>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	b933      	cbnz	r3, 80074dc <_free_r+0x2c>
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	6014      	str	r4, [r2, #0]
 80074d2:	4628      	mov	r0, r5
 80074d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074d8:	f000 b8e4 	b.w	80076a4 <__malloc_unlock>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d908      	bls.n	80074f2 <_free_r+0x42>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	1821      	adds	r1, r4, r0
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf01      	itttt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	1809      	addeq	r1, r1, r0
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	e7ed      	b.n	80074ce <_free_r+0x1e>
 80074f2:	461a      	mov	r2, r3
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b10b      	cbz	r3, 80074fc <_free_r+0x4c>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d9fa      	bls.n	80074f2 <_free_r+0x42>
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	1850      	adds	r0, r2, r1
 8007500:	42a0      	cmp	r0, r4
 8007502:	d10b      	bne.n	800751c <_free_r+0x6c>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	4401      	add	r1, r0
 8007508:	1850      	adds	r0, r2, r1
 800750a:	4283      	cmp	r3, r0
 800750c:	6011      	str	r1, [r2, #0]
 800750e:	d1e0      	bne.n	80074d2 <_free_r+0x22>
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	6053      	str	r3, [r2, #4]
 8007516:	4408      	add	r0, r1
 8007518:	6010      	str	r0, [r2, #0]
 800751a:	e7da      	b.n	80074d2 <_free_r+0x22>
 800751c:	d902      	bls.n	8007524 <_free_r+0x74>
 800751e:	230c      	movs	r3, #12
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	e7d6      	b.n	80074d2 <_free_r+0x22>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	1821      	adds	r1, r4, r0
 8007528:	428b      	cmp	r3, r1
 800752a:	bf04      	itt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	bf04      	itt	eq
 8007534:	1809      	addeq	r1, r1, r0
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	6054      	str	r4, [r2, #4]
 800753a:	e7ca      	b.n	80074d2 <_free_r+0x22>
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	2000054c 	.word	0x2000054c

08007544 <malloc>:
 8007544:	4b02      	ldr	r3, [pc, #8]	@ (8007550 <malloc+0xc>)
 8007546:	4601      	mov	r1, r0
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f000 b825 	b.w	8007598 <_malloc_r>
 800754e:	bf00      	nop
 8007550:	20000024 	.word	0x20000024

08007554 <sbrk_aligned>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4e0f      	ldr	r6, [pc, #60]	@ (8007594 <sbrk_aligned+0x40>)
 8007558:	460c      	mov	r4, r1
 800755a:	6831      	ldr	r1, [r6, #0]
 800755c:	4605      	mov	r5, r0
 800755e:	b911      	cbnz	r1, 8007566 <sbrk_aligned+0x12>
 8007560:	f000 ff2e 	bl	80083c0 <_sbrk_r>
 8007564:	6030      	str	r0, [r6, #0]
 8007566:	4621      	mov	r1, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 ff29 	bl	80083c0 <_sbrk_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	d103      	bne.n	800757a <sbrk_aligned+0x26>
 8007572:	f04f 34ff 	mov.w	r4, #4294967295
 8007576:	4620      	mov	r0, r4
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	1cc4      	adds	r4, r0, #3
 800757c:	f024 0403 	bic.w	r4, r4, #3
 8007580:	42a0      	cmp	r0, r4
 8007582:	d0f8      	beq.n	8007576 <sbrk_aligned+0x22>
 8007584:	1a21      	subs	r1, r4, r0
 8007586:	4628      	mov	r0, r5
 8007588:	f000 ff1a 	bl	80083c0 <_sbrk_r>
 800758c:	3001      	adds	r0, #1
 800758e:	d1f2      	bne.n	8007576 <sbrk_aligned+0x22>
 8007590:	e7ef      	b.n	8007572 <sbrk_aligned+0x1e>
 8007592:	bf00      	nop
 8007594:	20000548 	.word	0x20000548

08007598 <_malloc_r>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	1ccd      	adds	r5, r1, #3
 800759e:	f025 0503 	bic.w	r5, r5, #3
 80075a2:	3508      	adds	r5, #8
 80075a4:	2d0c      	cmp	r5, #12
 80075a6:	bf38      	it	cc
 80075a8:	250c      	movcc	r5, #12
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	4606      	mov	r6, r0
 80075ae:	db01      	blt.n	80075b4 <_malloc_r+0x1c>
 80075b0:	42a9      	cmp	r1, r5
 80075b2:	d904      	bls.n	80075be <_malloc_r+0x26>
 80075b4:	230c      	movs	r3, #12
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	2000      	movs	r0, #0
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007694 <_malloc_r+0xfc>
 80075c2:	f000 f869 	bl	8007698 <__malloc_lock>
 80075c6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ca:	461c      	mov	r4, r3
 80075cc:	bb44      	cbnz	r4, 8007620 <_malloc_r+0x88>
 80075ce:	4629      	mov	r1, r5
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff ffbf 	bl	8007554 <sbrk_aligned>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	4604      	mov	r4, r0
 80075da:	d158      	bne.n	800768e <_malloc_r+0xf6>
 80075dc:	f8d8 4000 	ldr.w	r4, [r8]
 80075e0:	4627      	mov	r7, r4
 80075e2:	2f00      	cmp	r7, #0
 80075e4:	d143      	bne.n	800766e <_malloc_r+0xd6>
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	d04b      	beq.n	8007682 <_malloc_r+0xea>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	4639      	mov	r1, r7
 80075ee:	4630      	mov	r0, r6
 80075f0:	eb04 0903 	add.w	r9, r4, r3
 80075f4:	f000 fee4 	bl	80083c0 <_sbrk_r>
 80075f8:	4581      	cmp	r9, r0
 80075fa:	d142      	bne.n	8007682 <_malloc_r+0xea>
 80075fc:	6821      	ldr	r1, [r4, #0]
 80075fe:	1a6d      	subs	r5, r5, r1
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ffa6 	bl	8007554 <sbrk_aligned>
 8007608:	3001      	adds	r0, #1
 800760a:	d03a      	beq.n	8007682 <_malloc_r+0xea>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	442b      	add	r3, r5
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f8d8 3000 	ldr.w	r3, [r8]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	bb62      	cbnz	r2, 8007674 <_malloc_r+0xdc>
 800761a:	f8c8 7000 	str.w	r7, [r8]
 800761e:	e00f      	b.n	8007640 <_malloc_r+0xa8>
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	1b52      	subs	r2, r2, r5
 8007624:	d420      	bmi.n	8007668 <_malloc_r+0xd0>
 8007626:	2a0b      	cmp	r2, #11
 8007628:	d917      	bls.n	800765a <_malloc_r+0xc2>
 800762a:	1961      	adds	r1, r4, r5
 800762c:	42a3      	cmp	r3, r4
 800762e:	6025      	str	r5, [r4, #0]
 8007630:	bf18      	it	ne
 8007632:	6059      	strne	r1, [r3, #4]
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	bf08      	it	eq
 8007638:	f8c8 1000 	streq.w	r1, [r8]
 800763c:	5162      	str	r2, [r4, r5]
 800763e:	604b      	str	r3, [r1, #4]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f82f 	bl	80076a4 <__malloc_unlock>
 8007646:	f104 000b 	add.w	r0, r4, #11
 800764a:	1d23      	adds	r3, r4, #4
 800764c:	f020 0007 	bic.w	r0, r0, #7
 8007650:	1ac2      	subs	r2, r0, r3
 8007652:	bf1c      	itt	ne
 8007654:	1a1b      	subne	r3, r3, r0
 8007656:	50a3      	strne	r3, [r4, r2]
 8007658:	e7af      	b.n	80075ba <_malloc_r+0x22>
 800765a:	6862      	ldr	r2, [r4, #4]
 800765c:	42a3      	cmp	r3, r4
 800765e:	bf0c      	ite	eq
 8007660:	f8c8 2000 	streq.w	r2, [r8]
 8007664:	605a      	strne	r2, [r3, #4]
 8007666:	e7eb      	b.n	8007640 <_malloc_r+0xa8>
 8007668:	4623      	mov	r3, r4
 800766a:	6864      	ldr	r4, [r4, #4]
 800766c:	e7ae      	b.n	80075cc <_malloc_r+0x34>
 800766e:	463c      	mov	r4, r7
 8007670:	687f      	ldr	r7, [r7, #4]
 8007672:	e7b6      	b.n	80075e2 <_malloc_r+0x4a>
 8007674:	461a      	mov	r2, r3
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	42a3      	cmp	r3, r4
 800767a:	d1fb      	bne.n	8007674 <_malloc_r+0xdc>
 800767c:	2300      	movs	r3, #0
 800767e:	6053      	str	r3, [r2, #4]
 8007680:	e7de      	b.n	8007640 <_malloc_r+0xa8>
 8007682:	230c      	movs	r3, #12
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	4630      	mov	r0, r6
 8007688:	f000 f80c 	bl	80076a4 <__malloc_unlock>
 800768c:	e794      	b.n	80075b8 <_malloc_r+0x20>
 800768e:	6005      	str	r5, [r0, #0]
 8007690:	e7d6      	b.n	8007640 <_malloc_r+0xa8>
 8007692:	bf00      	nop
 8007694:	2000054c 	.word	0x2000054c

08007698 <__malloc_lock>:
 8007698:	4801      	ldr	r0, [pc, #4]	@ (80076a0 <__malloc_lock+0x8>)
 800769a:	f7ff b8b8 	b.w	800680e <__retarget_lock_acquire_recursive>
 800769e:	bf00      	nop
 80076a0:	20000544 	.word	0x20000544

080076a4 <__malloc_unlock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	@ (80076ac <__malloc_unlock+0x8>)
 80076a6:	f7ff b8b3 	b.w	8006810 <__retarget_lock_release_recursive>
 80076aa:	bf00      	nop
 80076ac:	20000544 	.word	0x20000544

080076b0 <_Balloc>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	69c6      	ldr	r6, [r0, #28]
 80076b4:	4604      	mov	r4, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	b976      	cbnz	r6, 80076d8 <_Balloc+0x28>
 80076ba:	2010      	movs	r0, #16
 80076bc:	f7ff ff42 	bl	8007544 <malloc>
 80076c0:	4602      	mov	r2, r0
 80076c2:	61e0      	str	r0, [r4, #28]
 80076c4:	b920      	cbnz	r0, 80076d0 <_Balloc+0x20>
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <_Balloc+0x78>)
 80076c8:	4818      	ldr	r0, [pc, #96]	@ (800772c <_Balloc+0x7c>)
 80076ca:	216b      	movs	r1, #107	@ 0x6b
 80076cc:	f000 fe96 	bl	80083fc <__assert_func>
 80076d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d4:	6006      	str	r6, [r0, #0]
 80076d6:	60c6      	str	r6, [r0, #12]
 80076d8:	69e6      	ldr	r6, [r4, #28]
 80076da:	68f3      	ldr	r3, [r6, #12]
 80076dc:	b183      	cbz	r3, 8007700 <_Balloc+0x50>
 80076de:	69e3      	ldr	r3, [r4, #28]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076e6:	b9b8      	cbnz	r0, 8007718 <_Balloc+0x68>
 80076e8:	2101      	movs	r1, #1
 80076ea:	fa01 f605 	lsl.w	r6, r1, r5
 80076ee:	1d72      	adds	r2, r6, #5
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fea0 	bl	8008438 <_calloc_r>
 80076f8:	b160      	cbz	r0, 8007714 <_Balloc+0x64>
 80076fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076fe:	e00e      	b.n	800771e <_Balloc+0x6e>
 8007700:	2221      	movs	r2, #33	@ 0x21
 8007702:	2104      	movs	r1, #4
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fe97 	bl	8008438 <_calloc_r>
 800770a:	69e3      	ldr	r3, [r4, #28]
 800770c:	60f0      	str	r0, [r6, #12]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e4      	bne.n	80076de <_Balloc+0x2e>
 8007714:	2000      	movs	r0, #0
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	6802      	ldr	r2, [r0, #0]
 800771a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800771e:	2300      	movs	r3, #0
 8007720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007724:	e7f7      	b.n	8007716 <_Balloc+0x66>
 8007726:	bf00      	nop
 8007728:	08008631 	.word	0x08008631
 800772c:	080086b1 	.word	0x080086b1

08007730 <_Bfree>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	69c6      	ldr	r6, [r0, #28]
 8007734:	4605      	mov	r5, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b976      	cbnz	r6, 8007758 <_Bfree+0x28>
 800773a:	2010      	movs	r0, #16
 800773c:	f7ff ff02 	bl	8007544 <malloc>
 8007740:	4602      	mov	r2, r0
 8007742:	61e8      	str	r0, [r5, #28]
 8007744:	b920      	cbnz	r0, 8007750 <_Bfree+0x20>
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <_Bfree+0x3c>)
 8007748:	4809      	ldr	r0, [pc, #36]	@ (8007770 <_Bfree+0x40>)
 800774a:	218f      	movs	r1, #143	@ 0x8f
 800774c:	f000 fe56 	bl	80083fc <__assert_func>
 8007750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007754:	6006      	str	r6, [r0, #0]
 8007756:	60c6      	str	r6, [r0, #12]
 8007758:	b13c      	cbz	r4, 800776a <_Bfree+0x3a>
 800775a:	69eb      	ldr	r3, [r5, #28]
 800775c:	6862      	ldr	r2, [r4, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007764:	6021      	str	r1, [r4, #0]
 8007766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	08008631 	.word	0x08008631
 8007770:	080086b1 	.word	0x080086b1

08007774 <__multadd>:
 8007774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007778:	690d      	ldr	r5, [r1, #16]
 800777a:	4607      	mov	r7, r0
 800777c:	460c      	mov	r4, r1
 800777e:	461e      	mov	r6, r3
 8007780:	f101 0c14 	add.w	ip, r1, #20
 8007784:	2000      	movs	r0, #0
 8007786:	f8dc 3000 	ldr.w	r3, [ip]
 800778a:	b299      	uxth	r1, r3
 800778c:	fb02 6101 	mla	r1, r2, r1, r6
 8007790:	0c1e      	lsrs	r6, r3, #16
 8007792:	0c0b      	lsrs	r3, r1, #16
 8007794:	fb02 3306 	mla	r3, r2, r6, r3
 8007798:	b289      	uxth	r1, r1
 800779a:	3001      	adds	r0, #1
 800779c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077a0:	4285      	cmp	r5, r0
 80077a2:	f84c 1b04 	str.w	r1, [ip], #4
 80077a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077aa:	dcec      	bgt.n	8007786 <__multadd+0x12>
 80077ac:	b30e      	cbz	r6, 80077f2 <__multadd+0x7e>
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dc19      	bgt.n	80077e8 <__multadd+0x74>
 80077b4:	6861      	ldr	r1, [r4, #4]
 80077b6:	4638      	mov	r0, r7
 80077b8:	3101      	adds	r1, #1
 80077ba:	f7ff ff79 	bl	80076b0 <_Balloc>
 80077be:	4680      	mov	r8, r0
 80077c0:	b928      	cbnz	r0, 80077ce <__multadd+0x5a>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <__multadd+0x84>)
 80077c6:	480d      	ldr	r0, [pc, #52]	@ (80077fc <__multadd+0x88>)
 80077c8:	21ba      	movs	r1, #186	@ 0xba
 80077ca:	f000 fe17 	bl	80083fc <__assert_func>
 80077ce:	6922      	ldr	r2, [r4, #16]
 80077d0:	3202      	adds	r2, #2
 80077d2:	f104 010c 	add.w	r1, r4, #12
 80077d6:	0092      	lsls	r2, r2, #2
 80077d8:	300c      	adds	r0, #12
 80077da:	f000 fe01 	bl	80083e0 <memcpy>
 80077de:	4621      	mov	r1, r4
 80077e0:	4638      	mov	r0, r7
 80077e2:	f7ff ffa5 	bl	8007730 <_Bfree>
 80077e6:	4644      	mov	r4, r8
 80077e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077ec:	3501      	adds	r5, #1
 80077ee:	615e      	str	r6, [r3, #20]
 80077f0:	6125      	str	r5, [r4, #16]
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	080086a0 	.word	0x080086a0
 80077fc:	080086b1 	.word	0x080086b1

08007800 <__hi0bits>:
 8007800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007804:	4603      	mov	r3, r0
 8007806:	bf36      	itet	cc
 8007808:	0403      	lslcc	r3, r0, #16
 800780a:	2000      	movcs	r0, #0
 800780c:	2010      	movcc	r0, #16
 800780e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007812:	bf3c      	itt	cc
 8007814:	021b      	lslcc	r3, r3, #8
 8007816:	3008      	addcc	r0, #8
 8007818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800781c:	bf3c      	itt	cc
 800781e:	011b      	lslcc	r3, r3, #4
 8007820:	3004      	addcc	r0, #4
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007826:	bf3c      	itt	cc
 8007828:	009b      	lslcc	r3, r3, #2
 800782a:	3002      	addcc	r0, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	db05      	blt.n	800783c <__hi0bits+0x3c>
 8007830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007834:	f100 0001 	add.w	r0, r0, #1
 8007838:	bf08      	it	eq
 800783a:	2020      	moveq	r0, #32
 800783c:	4770      	bx	lr

0800783e <__lo0bits>:
 800783e:	6803      	ldr	r3, [r0, #0]
 8007840:	4602      	mov	r2, r0
 8007842:	f013 0007 	ands.w	r0, r3, #7
 8007846:	d00b      	beq.n	8007860 <__lo0bits+0x22>
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d421      	bmi.n	8007890 <__lo0bits+0x52>
 800784c:	0798      	lsls	r0, r3, #30
 800784e:	bf49      	itett	mi
 8007850:	085b      	lsrmi	r3, r3, #1
 8007852:	089b      	lsrpl	r3, r3, #2
 8007854:	2001      	movmi	r0, #1
 8007856:	6013      	strmi	r3, [r2, #0]
 8007858:	bf5c      	itt	pl
 800785a:	6013      	strpl	r3, [r2, #0]
 800785c:	2002      	movpl	r0, #2
 800785e:	4770      	bx	lr
 8007860:	b299      	uxth	r1, r3
 8007862:	b909      	cbnz	r1, 8007868 <__lo0bits+0x2a>
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	2010      	movs	r0, #16
 8007868:	b2d9      	uxtb	r1, r3
 800786a:	b909      	cbnz	r1, 8007870 <__lo0bits+0x32>
 800786c:	3008      	adds	r0, #8
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	0719      	lsls	r1, r3, #28
 8007872:	bf04      	itt	eq
 8007874:	091b      	lsreq	r3, r3, #4
 8007876:	3004      	addeq	r0, #4
 8007878:	0799      	lsls	r1, r3, #30
 800787a:	bf04      	itt	eq
 800787c:	089b      	lsreq	r3, r3, #2
 800787e:	3002      	addeq	r0, #2
 8007880:	07d9      	lsls	r1, r3, #31
 8007882:	d403      	bmi.n	800788c <__lo0bits+0x4e>
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	f100 0001 	add.w	r0, r0, #1
 800788a:	d003      	beq.n	8007894 <__lo0bits+0x56>
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4770      	bx	lr
 8007890:	2000      	movs	r0, #0
 8007892:	4770      	bx	lr
 8007894:	2020      	movs	r0, #32
 8007896:	4770      	bx	lr

08007898 <__i2b>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	2101      	movs	r1, #1
 800789e:	f7ff ff07 	bl	80076b0 <_Balloc>
 80078a2:	4602      	mov	r2, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <__i2b+0x1a>
 80078a6:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <__i2b+0x24>)
 80078a8:	4805      	ldr	r0, [pc, #20]	@ (80078c0 <__i2b+0x28>)
 80078aa:	f240 1145 	movw	r1, #325	@ 0x145
 80078ae:	f000 fda5 	bl	80083fc <__assert_func>
 80078b2:	2301      	movs	r3, #1
 80078b4:	6144      	str	r4, [r0, #20]
 80078b6:	6103      	str	r3, [r0, #16]
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	bf00      	nop
 80078bc:	080086a0 	.word	0x080086a0
 80078c0:	080086b1 	.word	0x080086b1

080078c4 <__multiply>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4614      	mov	r4, r2
 80078ca:	690a      	ldr	r2, [r1, #16]
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bfa8      	it	ge
 80078d2:	4623      	movge	r3, r4
 80078d4:	460f      	mov	r7, r1
 80078d6:	bfa4      	itt	ge
 80078d8:	460c      	movge	r4, r1
 80078da:	461f      	movge	r7, r3
 80078dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078e4:	68a3      	ldr	r3, [r4, #8]
 80078e6:	6861      	ldr	r1, [r4, #4]
 80078e8:	eb0a 0609 	add.w	r6, sl, r9
 80078ec:	42b3      	cmp	r3, r6
 80078ee:	b085      	sub	sp, #20
 80078f0:	bfb8      	it	lt
 80078f2:	3101      	addlt	r1, #1
 80078f4:	f7ff fedc 	bl	80076b0 <_Balloc>
 80078f8:	b930      	cbnz	r0, 8007908 <__multiply+0x44>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b44      	ldr	r3, [pc, #272]	@ (8007a10 <__multiply+0x14c>)
 80078fe:	4845      	ldr	r0, [pc, #276]	@ (8007a14 <__multiply+0x150>)
 8007900:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007904:	f000 fd7a 	bl	80083fc <__assert_func>
 8007908:	f100 0514 	add.w	r5, r0, #20
 800790c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007910:	462b      	mov	r3, r5
 8007912:	2200      	movs	r2, #0
 8007914:	4543      	cmp	r3, r8
 8007916:	d321      	bcc.n	800795c <__multiply+0x98>
 8007918:	f107 0114 	add.w	r1, r7, #20
 800791c:	f104 0214 	add.w	r2, r4, #20
 8007920:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007924:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	1b13      	subs	r3, r2, r4
 800792c:	3b15      	subs	r3, #21
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	3304      	adds	r3, #4
 8007934:	f104 0715 	add.w	r7, r4, #21
 8007938:	42ba      	cmp	r2, r7
 800793a:	bf38      	it	cc
 800793c:	2304      	movcc	r3, #4
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	9103      	str	r1, [sp, #12]
 8007944:	428b      	cmp	r3, r1
 8007946:	d80c      	bhi.n	8007962 <__multiply+0x9e>
 8007948:	2e00      	cmp	r6, #0
 800794a:	dd03      	ble.n	8007954 <__multiply+0x90>
 800794c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007950:	2b00      	cmp	r3, #0
 8007952:	d05b      	beq.n	8007a0c <__multiply+0x148>
 8007954:	6106      	str	r6, [r0, #16]
 8007956:	b005      	add	sp, #20
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	f843 2b04 	str.w	r2, [r3], #4
 8007960:	e7d8      	b.n	8007914 <__multiply+0x50>
 8007962:	f8b1 a000 	ldrh.w	sl, [r1]
 8007966:	f1ba 0f00 	cmp.w	sl, #0
 800796a:	d024      	beq.n	80079b6 <__multiply+0xf2>
 800796c:	f104 0e14 	add.w	lr, r4, #20
 8007970:	46a9      	mov	r9, r5
 8007972:	f04f 0c00 	mov.w	ip, #0
 8007976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800797a:	f8d9 3000 	ldr.w	r3, [r9]
 800797e:	fa1f fb87 	uxth.w	fp, r7
 8007982:	b29b      	uxth	r3, r3
 8007984:	fb0a 330b 	mla	r3, sl, fp, r3
 8007988:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800798c:	f8d9 7000 	ldr.w	r7, [r9]
 8007990:	4463      	add	r3, ip
 8007992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007996:	fb0a c70b 	mla	r7, sl, fp, ip
 800799a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800799e:	b29b      	uxth	r3, r3
 80079a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079a4:	4572      	cmp	r2, lr
 80079a6:	f849 3b04 	str.w	r3, [r9], #4
 80079aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079ae:	d8e2      	bhi.n	8007976 <__multiply+0xb2>
 80079b0:	9b01      	ldr	r3, [sp, #4]
 80079b2:	f845 c003 	str.w	ip, [r5, r3]
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079bc:	3104      	adds	r1, #4
 80079be:	f1b9 0f00 	cmp.w	r9, #0
 80079c2:	d021      	beq.n	8007a08 <__multiply+0x144>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	f104 0c14 	add.w	ip, r4, #20
 80079ca:	46ae      	mov	lr, r5
 80079cc:	f04f 0a00 	mov.w	sl, #0
 80079d0:	f8bc b000 	ldrh.w	fp, [ip]
 80079d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079d8:	fb09 770b 	mla	r7, r9, fp, r7
 80079dc:	4457      	add	r7, sl
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079e4:	f84e 3b04 	str.w	r3, [lr], #4
 80079e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079f0:	f8be 3000 	ldrh.w	r3, [lr]
 80079f4:	fb09 330a 	mla	r3, r9, sl, r3
 80079f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079fc:	4562      	cmp	r2, ip
 80079fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a02:	d8e5      	bhi.n	80079d0 <__multiply+0x10c>
 8007a04:	9f01      	ldr	r7, [sp, #4]
 8007a06:	51eb      	str	r3, [r5, r7]
 8007a08:	3504      	adds	r5, #4
 8007a0a:	e799      	b.n	8007940 <__multiply+0x7c>
 8007a0c:	3e01      	subs	r6, #1
 8007a0e:	e79b      	b.n	8007948 <__multiply+0x84>
 8007a10:	080086a0 	.word	0x080086a0
 8007a14:	080086b1 	.word	0x080086b1

08007a18 <__pow5mult>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	f012 0203 	ands.w	r2, r2, #3
 8007a22:	4607      	mov	r7, r0
 8007a24:	460e      	mov	r6, r1
 8007a26:	d007      	beq.n	8007a38 <__pow5mult+0x20>
 8007a28:	4c25      	ldr	r4, [pc, #148]	@ (8007ac0 <__pow5mult+0xa8>)
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a32:	f7ff fe9f 	bl	8007774 <__multadd>
 8007a36:	4606      	mov	r6, r0
 8007a38:	10ad      	asrs	r5, r5, #2
 8007a3a:	d03d      	beq.n	8007ab8 <__pow5mult+0xa0>
 8007a3c:	69fc      	ldr	r4, [r7, #28]
 8007a3e:	b97c      	cbnz	r4, 8007a60 <__pow5mult+0x48>
 8007a40:	2010      	movs	r0, #16
 8007a42:	f7ff fd7f 	bl	8007544 <malloc>
 8007a46:	4602      	mov	r2, r0
 8007a48:	61f8      	str	r0, [r7, #28]
 8007a4a:	b928      	cbnz	r0, 8007a58 <__pow5mult+0x40>
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <__pow5mult+0xac>)
 8007a4e:	481e      	ldr	r0, [pc, #120]	@ (8007ac8 <__pow5mult+0xb0>)
 8007a50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a54:	f000 fcd2 	bl	80083fc <__assert_func>
 8007a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a5c:	6004      	str	r4, [r0, #0]
 8007a5e:	60c4      	str	r4, [r0, #12]
 8007a60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a68:	b94c      	cbnz	r4, 8007a7e <__pow5mult+0x66>
 8007a6a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7ff ff12 	bl	8007898 <__i2b>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	f04f 0900 	mov.w	r9, #0
 8007a82:	07eb      	lsls	r3, r5, #31
 8007a84:	d50a      	bpl.n	8007a9c <__pow5mult+0x84>
 8007a86:	4631      	mov	r1, r6
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	f7ff ff1a 	bl	80078c4 <__multiply>
 8007a90:	4631      	mov	r1, r6
 8007a92:	4680      	mov	r8, r0
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fe4b 	bl	8007730 <_Bfree>
 8007a9a:	4646      	mov	r6, r8
 8007a9c:	106d      	asrs	r5, r5, #1
 8007a9e:	d00b      	beq.n	8007ab8 <__pow5mult+0xa0>
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	b938      	cbnz	r0, 8007ab4 <__pow5mult+0x9c>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff0b 	bl	80078c4 <__multiply>
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	f8c0 9000 	str.w	r9, [r0]
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	e7e4      	b.n	8007a82 <__pow5mult+0x6a>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007abe:	bf00      	nop
 8007ac0:	0800870c 	.word	0x0800870c
 8007ac4:	08008631 	.word	0x08008631
 8007ac8:	080086b1 	.word	0x080086b1

08007acc <__lshift>:
 8007acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	6849      	ldr	r1, [r1, #4]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	4607      	mov	r7, r0
 8007ade:	4691      	mov	r9, r2
 8007ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ae4:	f108 0601 	add.w	r6, r8, #1
 8007ae8:	42b3      	cmp	r3, r6
 8007aea:	db0b      	blt.n	8007b04 <__lshift+0x38>
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff fddf 	bl	80076b0 <_Balloc>
 8007af2:	4605      	mov	r5, r0
 8007af4:	b948      	cbnz	r0, 8007b0a <__lshift+0x3e>
 8007af6:	4602      	mov	r2, r0
 8007af8:	4b28      	ldr	r3, [pc, #160]	@ (8007b9c <__lshift+0xd0>)
 8007afa:	4829      	ldr	r0, [pc, #164]	@ (8007ba0 <__lshift+0xd4>)
 8007afc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b00:	f000 fc7c 	bl	80083fc <__assert_func>
 8007b04:	3101      	adds	r1, #1
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	e7ee      	b.n	8007ae8 <__lshift+0x1c>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f100 0114 	add.w	r1, r0, #20
 8007b10:	f100 0210 	add.w	r2, r0, #16
 8007b14:	4618      	mov	r0, r3
 8007b16:	4553      	cmp	r3, sl
 8007b18:	db33      	blt.n	8007b82 <__lshift+0xb6>
 8007b1a:	6920      	ldr	r0, [r4, #16]
 8007b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b20:	f104 0314 	add.w	r3, r4, #20
 8007b24:	f019 091f 	ands.w	r9, r9, #31
 8007b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b30:	d02b      	beq.n	8007b8a <__lshift+0xbe>
 8007b32:	f1c9 0e20 	rsb	lr, r9, #32
 8007b36:	468a      	mov	sl, r1
 8007b38:	2200      	movs	r2, #0
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b40:	4310      	orrs	r0, r2
 8007b42:	f84a 0b04 	str.w	r0, [sl], #4
 8007b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b4a:	459c      	cmp	ip, r3
 8007b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b50:	d8f3      	bhi.n	8007b3a <__lshift+0x6e>
 8007b52:	ebac 0304 	sub.w	r3, ip, r4
 8007b56:	3b15      	subs	r3, #21
 8007b58:	f023 0303 	bic.w	r3, r3, #3
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	f104 0015 	add.w	r0, r4, #21
 8007b62:	4584      	cmp	ip, r0
 8007b64:	bf38      	it	cc
 8007b66:	2304      	movcc	r3, #4
 8007b68:	50ca      	str	r2, [r1, r3]
 8007b6a:	b10a      	cbz	r2, 8007b70 <__lshift+0xa4>
 8007b6c:	f108 0602 	add.w	r6, r8, #2
 8007b70:	3e01      	subs	r6, #1
 8007b72:	4638      	mov	r0, r7
 8007b74:	612e      	str	r6, [r5, #16]
 8007b76:	4621      	mov	r1, r4
 8007b78:	f7ff fdda 	bl	8007730 <_Bfree>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b86:	3301      	adds	r3, #1
 8007b88:	e7c5      	b.n	8007b16 <__lshift+0x4a>
 8007b8a:	3904      	subs	r1, #4
 8007b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b94:	459c      	cmp	ip, r3
 8007b96:	d8f9      	bhi.n	8007b8c <__lshift+0xc0>
 8007b98:	e7ea      	b.n	8007b70 <__lshift+0xa4>
 8007b9a:	bf00      	nop
 8007b9c:	080086a0 	.word	0x080086a0
 8007ba0:	080086b1 	.word	0x080086b1

08007ba4 <__mcmp>:
 8007ba4:	690a      	ldr	r2, [r1, #16]
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6900      	ldr	r0, [r0, #16]
 8007baa:	1a80      	subs	r0, r0, r2
 8007bac:	b530      	push	{r4, r5, lr}
 8007bae:	d10e      	bne.n	8007bce <__mcmp+0x2a>
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	3114      	adds	r1, #20
 8007bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bc4:	4295      	cmp	r5, r2
 8007bc6:	d003      	beq.n	8007bd0 <__mcmp+0x2c>
 8007bc8:	d205      	bcs.n	8007bd6 <__mcmp+0x32>
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	bd30      	pop	{r4, r5, pc}
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d3f3      	bcc.n	8007bbc <__mcmp+0x18>
 8007bd4:	e7fb      	b.n	8007bce <__mcmp+0x2a>
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e7f9      	b.n	8007bce <__mcmp+0x2a>
	...

08007bdc <__mdiff>:
 8007bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4689      	mov	r9, r1
 8007be2:	4606      	mov	r6, r0
 8007be4:	4611      	mov	r1, r2
 8007be6:	4648      	mov	r0, r9
 8007be8:	4614      	mov	r4, r2
 8007bea:	f7ff ffdb 	bl	8007ba4 <__mcmp>
 8007bee:	1e05      	subs	r5, r0, #0
 8007bf0:	d112      	bne.n	8007c18 <__mdiff+0x3c>
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff fd5b 	bl	80076b0 <_Balloc>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	b928      	cbnz	r0, 8007c0a <__mdiff+0x2e>
 8007bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8007cfc <__mdiff+0x120>)
 8007c00:	f240 2137 	movw	r1, #567	@ 0x237
 8007c04:	483e      	ldr	r0, [pc, #248]	@ (8007d00 <__mdiff+0x124>)
 8007c06:	f000 fbf9 	bl	80083fc <__assert_func>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c10:	4610      	mov	r0, r2
 8007c12:	b003      	add	sp, #12
 8007c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c18:	bfbc      	itt	lt
 8007c1a:	464b      	movlt	r3, r9
 8007c1c:	46a1      	movlt	r9, r4
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c24:	bfba      	itte	lt
 8007c26:	461c      	movlt	r4, r3
 8007c28:	2501      	movlt	r5, #1
 8007c2a:	2500      	movge	r5, #0
 8007c2c:	f7ff fd40 	bl	80076b0 <_Balloc>
 8007c30:	4602      	mov	r2, r0
 8007c32:	b918      	cbnz	r0, 8007c3c <__mdiff+0x60>
 8007c34:	4b31      	ldr	r3, [pc, #196]	@ (8007cfc <__mdiff+0x120>)
 8007c36:	f240 2145 	movw	r1, #581	@ 0x245
 8007c3a:	e7e3      	b.n	8007c04 <__mdiff+0x28>
 8007c3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c40:	6926      	ldr	r6, [r4, #16]
 8007c42:	60c5      	str	r5, [r0, #12]
 8007c44:	f109 0310 	add.w	r3, r9, #16
 8007c48:	f109 0514 	add.w	r5, r9, #20
 8007c4c:	f104 0e14 	add.w	lr, r4, #20
 8007c50:	f100 0b14 	add.w	fp, r0, #20
 8007c54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	46d9      	mov	r9, fp
 8007c60:	f04f 0c00 	mov.w	ip, #0
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	fa1f f38a 	uxth.w	r3, sl
 8007c74:	4619      	mov	r1, r3
 8007c76:	b283      	uxth	r3, r0
 8007c78:	1acb      	subs	r3, r1, r3
 8007c7a:	0c00      	lsrs	r0, r0, #16
 8007c7c:	4463      	add	r3, ip
 8007c7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c8c:	4576      	cmp	r6, lr
 8007c8e:	f849 3b04 	str.w	r3, [r9], #4
 8007c92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c96:	d8e5      	bhi.n	8007c64 <__mdiff+0x88>
 8007c98:	1b33      	subs	r3, r6, r4
 8007c9a:	3b15      	subs	r3, #21
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	3415      	adds	r4, #21
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	bf38      	it	cc
 8007ca8:	2304      	movcc	r3, #4
 8007caa:	441d      	add	r5, r3
 8007cac:	445b      	add	r3, fp
 8007cae:	461e      	mov	r6, r3
 8007cb0:	462c      	mov	r4, r5
 8007cb2:	4544      	cmp	r4, r8
 8007cb4:	d30e      	bcc.n	8007cd4 <__mdiff+0xf8>
 8007cb6:	f108 0103 	add.w	r1, r8, #3
 8007cba:	1b49      	subs	r1, r1, r5
 8007cbc:	f021 0103 	bic.w	r1, r1, #3
 8007cc0:	3d03      	subs	r5, #3
 8007cc2:	45a8      	cmp	r8, r5
 8007cc4:	bf38      	it	cc
 8007cc6:	2100      	movcc	r1, #0
 8007cc8:	440b      	add	r3, r1
 8007cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cce:	b191      	cbz	r1, 8007cf6 <__mdiff+0x11a>
 8007cd0:	6117      	str	r7, [r2, #16]
 8007cd2:	e79d      	b.n	8007c10 <__mdiff+0x34>
 8007cd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cd8:	46e6      	mov	lr, ip
 8007cda:	0c08      	lsrs	r0, r1, #16
 8007cdc:	fa1c fc81 	uxtah	ip, ip, r1
 8007ce0:	4471      	add	r1, lr
 8007ce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ce6:	b289      	uxth	r1, r1
 8007ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cec:	f846 1b04 	str.w	r1, [r6], #4
 8007cf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cf4:	e7dd      	b.n	8007cb2 <__mdiff+0xd6>
 8007cf6:	3f01      	subs	r7, #1
 8007cf8:	e7e7      	b.n	8007cca <__mdiff+0xee>
 8007cfa:	bf00      	nop
 8007cfc:	080086a0 	.word	0x080086a0
 8007d00:	080086b1 	.word	0x080086b1

08007d04 <__d2b>:
 8007d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	460f      	mov	r7, r1
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	ec59 8b10 	vmov	r8, r9, d0
 8007d10:	4616      	mov	r6, r2
 8007d12:	f7ff fccd 	bl	80076b0 <_Balloc>
 8007d16:	4604      	mov	r4, r0
 8007d18:	b930      	cbnz	r0, 8007d28 <__d2b+0x24>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	4b23      	ldr	r3, [pc, #140]	@ (8007dac <__d2b+0xa8>)
 8007d1e:	4824      	ldr	r0, [pc, #144]	@ (8007db0 <__d2b+0xac>)
 8007d20:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d24:	f000 fb6a 	bl	80083fc <__assert_func>
 8007d28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d30:	b10d      	cbz	r5, 8007d36 <__d2b+0x32>
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	f1b8 0300 	subs.w	r3, r8, #0
 8007d3c:	d023      	beq.n	8007d86 <__d2b+0x82>
 8007d3e:	4668      	mov	r0, sp
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	f7ff fd7c 	bl	800783e <__lo0bits>
 8007d46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d4a:	b1d0      	cbz	r0, 8007d82 <__d2b+0x7e>
 8007d4c:	f1c0 0320 	rsb	r3, r0, #32
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	430b      	orrs	r3, r1
 8007d56:	40c2      	lsrs	r2, r0
 8007d58:	6163      	str	r3, [r4, #20]
 8007d5a:	9201      	str	r2, [sp, #4]
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	61a3      	str	r3, [r4, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf0c      	ite	eq
 8007d64:	2201      	moveq	r2, #1
 8007d66:	2202      	movne	r2, #2
 8007d68:	6122      	str	r2, [r4, #16]
 8007d6a:	b1a5      	cbz	r5, 8007d96 <__d2b+0x92>
 8007d6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d70:	4405      	add	r5, r0
 8007d72:	603d      	str	r5, [r7, #0]
 8007d74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d78:	6030      	str	r0, [r6, #0]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	b003      	add	sp, #12
 8007d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d82:	6161      	str	r1, [r4, #20]
 8007d84:	e7ea      	b.n	8007d5c <__d2b+0x58>
 8007d86:	a801      	add	r0, sp, #4
 8007d88:	f7ff fd59 	bl	800783e <__lo0bits>
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	6163      	str	r3, [r4, #20]
 8007d90:	3020      	adds	r0, #32
 8007d92:	2201      	movs	r2, #1
 8007d94:	e7e8      	b.n	8007d68 <__d2b+0x64>
 8007d96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d9e:	6038      	str	r0, [r7, #0]
 8007da0:	6918      	ldr	r0, [r3, #16]
 8007da2:	f7ff fd2d 	bl	8007800 <__hi0bits>
 8007da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007daa:	e7e5      	b.n	8007d78 <__d2b+0x74>
 8007dac:	080086a0 	.word	0x080086a0
 8007db0:	080086b1 	.word	0x080086b1

08007db4 <__sfputc_r>:
 8007db4:	6893      	ldr	r3, [r2, #8]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	b410      	push	{r4}
 8007dbc:	6093      	str	r3, [r2, #8]
 8007dbe:	da08      	bge.n	8007dd2 <__sfputc_r+0x1e>
 8007dc0:	6994      	ldr	r4, [r2, #24]
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	db01      	blt.n	8007dca <__sfputc_r+0x16>
 8007dc6:	290a      	cmp	r1, #10
 8007dc8:	d103      	bne.n	8007dd2 <__sfputc_r+0x1e>
 8007dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dce:	f000 ba41 	b.w	8008254 <__swbuf_r>
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	1c58      	adds	r0, r3, #1
 8007dd6:	6010      	str	r0, [r2, #0]
 8007dd8:	7019      	strb	r1, [r3, #0]
 8007dda:	4608      	mov	r0, r1
 8007ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <__sfputs_r>:
 8007de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	4614      	mov	r4, r2
 8007dea:	18d5      	adds	r5, r2, r3
 8007dec:	42ac      	cmp	r4, r5
 8007dee:	d101      	bne.n	8007df4 <__sfputs_r+0x12>
 8007df0:	2000      	movs	r0, #0
 8007df2:	e007      	b.n	8007e04 <__sfputs_r+0x22>
 8007df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df8:	463a      	mov	r2, r7
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ffda 	bl	8007db4 <__sfputc_r>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d1f3      	bne.n	8007dec <__sfputs_r+0xa>
 8007e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e08 <_vfiprintf_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	460d      	mov	r5, r1
 8007e0e:	b09d      	sub	sp, #116	@ 0x74
 8007e10:	4614      	mov	r4, r2
 8007e12:	4698      	mov	r8, r3
 8007e14:	4606      	mov	r6, r0
 8007e16:	b118      	cbz	r0, 8007e20 <_vfiprintf_r+0x18>
 8007e18:	6a03      	ldr	r3, [r0, #32]
 8007e1a:	b90b      	cbnz	r3, 8007e20 <_vfiprintf_r+0x18>
 8007e1c:	f7fe fb32 	bl	8006484 <__sinit>
 8007e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d405      	bmi.n	8007e32 <_vfiprintf_r+0x2a>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	059a      	lsls	r2, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_vfiprintf_r+0x2a>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e2e:	f7fe fcee 	bl	800680e <__retarget_lock_acquire_recursive>
 8007e32:	89ab      	ldrh	r3, [r5, #12]
 8007e34:	071b      	lsls	r3, r3, #28
 8007e36:	d501      	bpl.n	8007e3c <_vfiprintf_r+0x34>
 8007e38:	692b      	ldr	r3, [r5, #16]
 8007e3a:	b99b      	cbnz	r3, 8007e64 <_vfiprintf_r+0x5c>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 fa46 	bl	80082d0 <__swsetup_r>
 8007e44:	b170      	cbz	r0, 8007e64 <_vfiprintf_r+0x5c>
 8007e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e48:	07dc      	lsls	r4, r3, #31
 8007e4a:	d504      	bpl.n	8007e56 <_vfiprintf_r+0x4e>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	b01d      	add	sp, #116	@ 0x74
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	0598      	lsls	r0, r3, #22
 8007e5a:	d4f7      	bmi.n	8007e4c <_vfiprintf_r+0x44>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e5e:	f7fe fcd7 	bl	8006810 <__retarget_lock_release_recursive>
 8007e62:	e7f3      	b.n	8007e4c <_vfiprintf_r+0x44>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e72:	2330      	movs	r3, #48	@ 0x30
 8007e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008024 <_vfiprintf_r+0x21c>
 8007e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e7c:	f04f 0901 	mov.w	r9, #1
 8007e80:	4623      	mov	r3, r4
 8007e82:	469a      	mov	sl, r3
 8007e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e88:	b10a      	cbz	r2, 8007e8e <_vfiprintf_r+0x86>
 8007e8a:	2a25      	cmp	r2, #37	@ 0x25
 8007e8c:	d1f9      	bne.n	8007e82 <_vfiprintf_r+0x7a>
 8007e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e92:	d00b      	beq.n	8007eac <_vfiprintf_r+0xa4>
 8007e94:	465b      	mov	r3, fp
 8007e96:	4622      	mov	r2, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ffa1 	bl	8007de2 <__sfputs_r>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f000 80a7 	beq.w	8007ff4 <_vfiprintf_r+0x1ec>
 8007ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ea8:	445a      	add	r2, fp
 8007eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eac:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 809f 	beq.w	8007ff4 <_vfiprintf_r+0x1ec>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec0:	f10a 0a01 	add.w	sl, sl, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4853      	ldr	r0, [pc, #332]	@ (8008024 <_vfiprintf_r+0x21c>)
 8007ed8:	f7f8 f9a2 	bl	8000220 <memchr>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	b9d8      	cbnz	r0, 8007f18 <_vfiprintf_r+0x110>
 8007ee0:	06d1      	lsls	r1, r2, #27
 8007ee2:	bf44      	itt	mi
 8007ee4:	2320      	movmi	r3, #32
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eea:	0713      	lsls	r3, r2, #28
 8007eec:	bf44      	itt	mi
 8007eee:	232b      	movmi	r3, #43	@ 0x2b
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007efa:	d015      	beq.n	8007f28 <_vfiprintf_r+0x120>
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	4654      	mov	r4, sl
 8007f00:	2000      	movs	r0, #0
 8007f02:	f04f 0c0a 	mov.w	ip, #10
 8007f06:	4621      	mov	r1, r4
 8007f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0c:	3b30      	subs	r3, #48	@ 0x30
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d94b      	bls.n	8007faa <_vfiprintf_r+0x1a2>
 8007f12:	b1b0      	cbz	r0, 8007f42 <_vfiprintf_r+0x13a>
 8007f14:	9207      	str	r2, [sp, #28]
 8007f16:	e014      	b.n	8007f42 <_vfiprintf_r+0x13a>
 8007f18:	eba0 0308 	sub.w	r3, r0, r8
 8007f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	46a2      	mov	sl, r4
 8007f26:	e7d2      	b.n	8007ece <_vfiprintf_r+0xc6>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfbb      	ittet	lt
 8007f34:	425b      	neglt	r3, r3
 8007f36:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3a:	9307      	strge	r3, [sp, #28]
 8007f3c:	9307      	strlt	r3, [sp, #28]
 8007f3e:	bfb8      	it	lt
 8007f40:	9204      	strlt	r2, [sp, #16]
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f46:	d10a      	bne.n	8007f5e <_vfiprintf_r+0x156>
 8007f48:	7863      	ldrb	r3, [r4, #1]
 8007f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f4c:	d132      	bne.n	8007fb4 <_vfiprintf_r+0x1ac>
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9203      	str	r2, [sp, #12]
 8007f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f5a:	3402      	adds	r4, #2
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008034 <_vfiprintf_r+0x22c>
 8007f62:	7821      	ldrb	r1, [r4, #0]
 8007f64:	2203      	movs	r2, #3
 8007f66:	4650      	mov	r0, sl
 8007f68:	f7f8 f95a 	bl	8000220 <memchr>
 8007f6c:	b138      	cbz	r0, 8007f7e <_vfiprintf_r+0x176>
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	eba0 000a 	sub.w	r0, r0, sl
 8007f74:	2240      	movs	r2, #64	@ 0x40
 8007f76:	4082      	lsls	r2, r0
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	3401      	adds	r4, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f82:	4829      	ldr	r0, [pc, #164]	@ (8008028 <_vfiprintf_r+0x220>)
 8007f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f88:	2206      	movs	r2, #6
 8007f8a:	f7f8 f949 	bl	8000220 <memchr>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d03f      	beq.n	8008012 <_vfiprintf_r+0x20a>
 8007f92:	4b26      	ldr	r3, [pc, #152]	@ (800802c <_vfiprintf_r+0x224>)
 8007f94:	bb1b      	cbnz	r3, 8007fde <_vfiprintf_r+0x1d6>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	3307      	adds	r3, #7
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	443b      	add	r3, r7
 8007fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa8:	e76a      	b.n	8007e80 <_vfiprintf_r+0x78>
 8007faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fae:	460c      	mov	r4, r1
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	e7a8      	b.n	8007f06 <_vfiprintf_r+0xfe>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	3401      	adds	r4, #1
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f04f 0c0a 	mov.w	ip, #10
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc6:	3a30      	subs	r2, #48	@ 0x30
 8007fc8:	2a09      	cmp	r2, #9
 8007fca:	d903      	bls.n	8007fd4 <_vfiprintf_r+0x1cc>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0c6      	beq.n	8007f5e <_vfiprintf_r+0x156>
 8007fd0:	9105      	str	r1, [sp, #20]
 8007fd2:	e7c4      	b.n	8007f5e <_vfiprintf_r+0x156>
 8007fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd8:	4604      	mov	r4, r0
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e7f0      	b.n	8007fc0 <_vfiprintf_r+0x1b8>
 8007fde:	ab03      	add	r3, sp, #12
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4b12      	ldr	r3, [pc, #72]	@ (8008030 <_vfiprintf_r+0x228>)
 8007fe6:	a904      	add	r1, sp, #16
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7fd fe07 	bl	8005bfc <_printf_float>
 8007fee:	4607      	mov	r7, r0
 8007ff0:	1c78      	adds	r0, r7, #1
 8007ff2:	d1d6      	bne.n	8007fa2 <_vfiprintf_r+0x19a>
 8007ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	d405      	bmi.n	8008006 <_vfiprintf_r+0x1fe>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	059a      	lsls	r2, r3, #22
 8007ffe:	d402      	bmi.n	8008006 <_vfiprintf_r+0x1fe>
 8008000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008002:	f7fe fc05 	bl	8006810 <__retarget_lock_release_recursive>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	065b      	lsls	r3, r3, #25
 800800a:	f53f af1f 	bmi.w	8007e4c <_vfiprintf_r+0x44>
 800800e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008010:	e71e      	b.n	8007e50 <_vfiprintf_r+0x48>
 8008012:	ab03      	add	r3, sp, #12
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	462a      	mov	r2, r5
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <_vfiprintf_r+0x228>)
 800801a:	a904      	add	r1, sp, #16
 800801c:	4630      	mov	r0, r6
 800801e:	f7fe f885 	bl	800612c <_printf_i>
 8008022:	e7e4      	b.n	8007fee <_vfiprintf_r+0x1e6>
 8008024:	08008808 	.word	0x08008808
 8008028:	08008812 	.word	0x08008812
 800802c:	08005bfd 	.word	0x08005bfd
 8008030:	08007de3 	.word	0x08007de3
 8008034:	0800880e 	.word	0x0800880e

08008038 <__sflush_r>:
 8008038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	0716      	lsls	r6, r2, #28
 8008042:	4605      	mov	r5, r0
 8008044:	460c      	mov	r4, r1
 8008046:	d454      	bmi.n	80080f2 <__sflush_r+0xba>
 8008048:	684b      	ldr	r3, [r1, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	dc02      	bgt.n	8008054 <__sflush_r+0x1c>
 800804e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	dd48      	ble.n	80080e6 <__sflush_r+0xae>
 8008054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008056:	2e00      	cmp	r6, #0
 8008058:	d045      	beq.n	80080e6 <__sflush_r+0xae>
 800805a:	2300      	movs	r3, #0
 800805c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008060:	682f      	ldr	r7, [r5, #0]
 8008062:	6a21      	ldr	r1, [r4, #32]
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	d030      	beq.n	80080ca <__sflush_r+0x92>
 8008068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	0759      	lsls	r1, r3, #29
 800806e:	d505      	bpl.n	800807c <__sflush_r+0x44>
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	1ad2      	subs	r2, r2, r3
 8008074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008076:	b10b      	cbz	r3, 800807c <__sflush_r+0x44>
 8008078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	2300      	movs	r3, #0
 800807e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008080:	6a21      	ldr	r1, [r4, #32]
 8008082:	4628      	mov	r0, r5
 8008084:	47b0      	blx	r6
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	d106      	bne.n	800809a <__sflush_r+0x62>
 800808c:	6829      	ldr	r1, [r5, #0]
 800808e:	291d      	cmp	r1, #29
 8008090:	d82b      	bhi.n	80080ea <__sflush_r+0xb2>
 8008092:	4a2a      	ldr	r2, [pc, #168]	@ (800813c <__sflush_r+0x104>)
 8008094:	410a      	asrs	r2, r1
 8008096:	07d6      	lsls	r6, r2, #31
 8008098:	d427      	bmi.n	80080ea <__sflush_r+0xb2>
 800809a:	2200      	movs	r2, #0
 800809c:	6062      	str	r2, [r4, #4]
 800809e:	04d9      	lsls	r1, r3, #19
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	d504      	bpl.n	80080b0 <__sflush_r+0x78>
 80080a6:	1c42      	adds	r2, r0, #1
 80080a8:	d101      	bne.n	80080ae <__sflush_r+0x76>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	b903      	cbnz	r3, 80080b0 <__sflush_r+0x78>
 80080ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80080b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080b2:	602f      	str	r7, [r5, #0]
 80080b4:	b1b9      	cbz	r1, 80080e6 <__sflush_r+0xae>
 80080b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ba:	4299      	cmp	r1, r3
 80080bc:	d002      	beq.n	80080c4 <__sflush_r+0x8c>
 80080be:	4628      	mov	r0, r5
 80080c0:	f7ff f9f6 	bl	80074b0 <_free_r>
 80080c4:	2300      	movs	r3, #0
 80080c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80080c8:	e00d      	b.n	80080e6 <__sflush_r+0xae>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b0      	blx	r6
 80080d0:	4602      	mov	r2, r0
 80080d2:	1c50      	adds	r0, r2, #1
 80080d4:	d1c9      	bne.n	800806a <__sflush_r+0x32>
 80080d6:	682b      	ldr	r3, [r5, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0c6      	beq.n	800806a <__sflush_r+0x32>
 80080dc:	2b1d      	cmp	r3, #29
 80080de:	d001      	beq.n	80080e4 <__sflush_r+0xac>
 80080e0:	2b16      	cmp	r3, #22
 80080e2:	d11e      	bne.n	8008122 <__sflush_r+0xea>
 80080e4:	602f      	str	r7, [r5, #0]
 80080e6:	2000      	movs	r0, #0
 80080e8:	e022      	b.n	8008130 <__sflush_r+0xf8>
 80080ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ee:	b21b      	sxth	r3, r3
 80080f0:	e01b      	b.n	800812a <__sflush_r+0xf2>
 80080f2:	690f      	ldr	r7, [r1, #16]
 80080f4:	2f00      	cmp	r7, #0
 80080f6:	d0f6      	beq.n	80080e6 <__sflush_r+0xae>
 80080f8:	0793      	lsls	r3, r2, #30
 80080fa:	680e      	ldr	r6, [r1, #0]
 80080fc:	bf08      	it	eq
 80080fe:	694b      	ldreq	r3, [r1, #20]
 8008100:	600f      	str	r7, [r1, #0]
 8008102:	bf18      	it	ne
 8008104:	2300      	movne	r3, #0
 8008106:	eba6 0807 	sub.w	r8, r6, r7
 800810a:	608b      	str	r3, [r1, #8]
 800810c:	f1b8 0f00 	cmp.w	r8, #0
 8008110:	dde9      	ble.n	80080e6 <__sflush_r+0xae>
 8008112:	6a21      	ldr	r1, [r4, #32]
 8008114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008116:	4643      	mov	r3, r8
 8008118:	463a      	mov	r2, r7
 800811a:	4628      	mov	r0, r5
 800811c:	47b0      	blx	r6
 800811e:	2800      	cmp	r0, #0
 8008120:	dc08      	bgt.n	8008134 <__sflush_r+0xfc>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008134:	4407      	add	r7, r0
 8008136:	eba8 0800 	sub.w	r8, r8, r0
 800813a:	e7e7      	b.n	800810c <__sflush_r+0xd4>
 800813c:	dfbffffe 	.word	0xdfbffffe

08008140 <_fflush_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	4605      	mov	r5, r0
 8008146:	460c      	mov	r4, r1
 8008148:	b913      	cbnz	r3, 8008150 <_fflush_r+0x10>
 800814a:	2500      	movs	r5, #0
 800814c:	4628      	mov	r0, r5
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	b118      	cbz	r0, 800815a <_fflush_r+0x1a>
 8008152:	6a03      	ldr	r3, [r0, #32]
 8008154:	b90b      	cbnz	r3, 800815a <_fflush_r+0x1a>
 8008156:	f7fe f995 	bl	8006484 <__sinit>
 800815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f3      	beq.n	800814a <_fflush_r+0xa>
 8008162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008164:	07d0      	lsls	r0, r2, #31
 8008166:	d404      	bmi.n	8008172 <_fflush_r+0x32>
 8008168:	0599      	lsls	r1, r3, #22
 800816a:	d402      	bmi.n	8008172 <_fflush_r+0x32>
 800816c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800816e:	f7fe fb4e 	bl	800680e <__retarget_lock_acquire_recursive>
 8008172:	4628      	mov	r0, r5
 8008174:	4621      	mov	r1, r4
 8008176:	f7ff ff5f 	bl	8008038 <__sflush_r>
 800817a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800817c:	07da      	lsls	r2, r3, #31
 800817e:	4605      	mov	r5, r0
 8008180:	d4e4      	bmi.n	800814c <_fflush_r+0xc>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	059b      	lsls	r3, r3, #22
 8008186:	d4e1      	bmi.n	800814c <_fflush_r+0xc>
 8008188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800818a:	f7fe fb41 	bl	8006810 <__retarget_lock_release_recursive>
 800818e:	e7dd      	b.n	800814c <_fflush_r+0xc>

08008190 <__swhatbuf_r>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	2900      	cmp	r1, #0
 800819a:	b096      	sub	sp, #88	@ 0x58
 800819c:	4615      	mov	r5, r2
 800819e:	461e      	mov	r6, r3
 80081a0:	da0d      	bge.n	80081be <__swhatbuf_r+0x2e>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081a8:	f04f 0100 	mov.w	r1, #0
 80081ac:	bf14      	ite	ne
 80081ae:	2340      	movne	r3, #64	@ 0x40
 80081b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081b4:	2000      	movs	r0, #0
 80081b6:	6031      	str	r1, [r6, #0]
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	b016      	add	sp, #88	@ 0x58
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	466a      	mov	r2, sp
 80081c0:	f000 f8dc 	bl	800837c <_fstat_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	dbec      	blt.n	80081a2 <__swhatbuf_r+0x12>
 80081c8:	9901      	ldr	r1, [sp, #4]
 80081ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081d2:	4259      	negs	r1, r3
 80081d4:	4159      	adcs	r1, r3
 80081d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081da:	e7eb      	b.n	80081b4 <__swhatbuf_r+0x24>

080081dc <__smakebuf_r>:
 80081dc:	898b      	ldrh	r3, [r1, #12]
 80081de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e0:	079d      	lsls	r5, r3, #30
 80081e2:	4606      	mov	r6, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	d507      	bpl.n	80081f8 <__smakebuf_r+0x1c>
 80081e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	6123      	str	r3, [r4, #16]
 80081f0:	2301      	movs	r3, #1
 80081f2:	6163      	str	r3, [r4, #20]
 80081f4:	b003      	add	sp, #12
 80081f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f8:	ab01      	add	r3, sp, #4
 80081fa:	466a      	mov	r2, sp
 80081fc:	f7ff ffc8 	bl	8008190 <__swhatbuf_r>
 8008200:	9f00      	ldr	r7, [sp, #0]
 8008202:	4605      	mov	r5, r0
 8008204:	4639      	mov	r1, r7
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff f9c6 	bl	8007598 <_malloc_r>
 800820c:	b948      	cbnz	r0, 8008222 <__smakebuf_r+0x46>
 800820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008212:	059a      	lsls	r2, r3, #22
 8008214:	d4ee      	bmi.n	80081f4 <__smakebuf_r+0x18>
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	f043 0302 	orr.w	r3, r3, #2
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	e7e2      	b.n	80081e8 <__smakebuf_r+0xc>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	6020      	str	r0, [r4, #0]
 8008226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008232:	b15b      	cbz	r3, 800824c <__smakebuf_r+0x70>
 8008234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008238:	4630      	mov	r0, r6
 800823a:	f000 f8b1 	bl	80083a0 <_isatty_r>
 800823e:	b128      	cbz	r0, 800824c <__smakebuf_r+0x70>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	f023 0303 	bic.w	r3, r3, #3
 8008246:	f043 0301 	orr.w	r3, r3, #1
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	431d      	orrs	r5, r3
 8008250:	81a5      	strh	r5, [r4, #12]
 8008252:	e7cf      	b.n	80081f4 <__smakebuf_r+0x18>

08008254 <__swbuf_r>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	460e      	mov	r6, r1
 8008258:	4614      	mov	r4, r2
 800825a:	4605      	mov	r5, r0
 800825c:	b118      	cbz	r0, 8008266 <__swbuf_r+0x12>
 800825e:	6a03      	ldr	r3, [r0, #32]
 8008260:	b90b      	cbnz	r3, 8008266 <__swbuf_r+0x12>
 8008262:	f7fe f90f 	bl	8006484 <__sinit>
 8008266:	69a3      	ldr	r3, [r4, #24]
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	071a      	lsls	r2, r3, #28
 800826e:	d501      	bpl.n	8008274 <__swbuf_r+0x20>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	b943      	cbnz	r3, 8008286 <__swbuf_r+0x32>
 8008274:	4621      	mov	r1, r4
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f82a 	bl	80082d0 <__swsetup_r>
 800827c:	b118      	cbz	r0, 8008286 <__swbuf_r+0x32>
 800827e:	f04f 37ff 	mov.w	r7, #4294967295
 8008282:	4638      	mov	r0, r7
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	1a98      	subs	r0, r3, r2
 800828c:	6963      	ldr	r3, [r4, #20]
 800828e:	b2f6      	uxtb	r6, r6
 8008290:	4283      	cmp	r3, r0
 8008292:	4637      	mov	r7, r6
 8008294:	dc05      	bgt.n	80082a2 <__swbuf_r+0x4e>
 8008296:	4621      	mov	r1, r4
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff ff51 	bl	8008140 <_fflush_r>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d1ed      	bne.n	800827e <__swbuf_r+0x2a>
 80082a2:	68a3      	ldr	r3, [r4, #8]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	60a3      	str	r3, [r4, #8]
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	6022      	str	r2, [r4, #0]
 80082ae:	701e      	strb	r6, [r3, #0]
 80082b0:	6962      	ldr	r2, [r4, #20]
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d004      	beq.n	80082c2 <__swbuf_r+0x6e>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	07db      	lsls	r3, r3, #31
 80082bc:	d5e1      	bpl.n	8008282 <__swbuf_r+0x2e>
 80082be:	2e0a      	cmp	r6, #10
 80082c0:	d1df      	bne.n	8008282 <__swbuf_r+0x2e>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7ff ff3b 	bl	8008140 <_fflush_r>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d0d9      	beq.n	8008282 <__swbuf_r+0x2e>
 80082ce:	e7d6      	b.n	800827e <__swbuf_r+0x2a>

080082d0 <__swsetup_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4b29      	ldr	r3, [pc, #164]	@ (8008378 <__swsetup_r+0xa8>)
 80082d4:	4605      	mov	r5, r0
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	460c      	mov	r4, r1
 80082da:	b118      	cbz	r0, 80082e4 <__swsetup_r+0x14>
 80082dc:	6a03      	ldr	r3, [r0, #32]
 80082de:	b90b      	cbnz	r3, 80082e4 <__swsetup_r+0x14>
 80082e0:	f7fe f8d0 	bl	8006484 <__sinit>
 80082e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e8:	0719      	lsls	r1, r3, #28
 80082ea:	d422      	bmi.n	8008332 <__swsetup_r+0x62>
 80082ec:	06da      	lsls	r2, r3, #27
 80082ee:	d407      	bmi.n	8008300 <__swsetup_r+0x30>
 80082f0:	2209      	movs	r2, #9
 80082f2:	602a      	str	r2, [r5, #0]
 80082f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	e033      	b.n	8008368 <__swsetup_r+0x98>
 8008300:	0758      	lsls	r0, r3, #29
 8008302:	d512      	bpl.n	800832a <__swsetup_r+0x5a>
 8008304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008306:	b141      	cbz	r1, 800831a <__swsetup_r+0x4a>
 8008308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830c:	4299      	cmp	r1, r3
 800830e:	d002      	beq.n	8008316 <__swsetup_r+0x46>
 8008310:	4628      	mov	r0, r5
 8008312:	f7ff f8cd 	bl	80074b0 <_free_r>
 8008316:	2300      	movs	r3, #0
 8008318:	6363      	str	r3, [r4, #52]	@ 0x34
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	2300      	movs	r3, #0
 8008324:	6063      	str	r3, [r4, #4]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f043 0308 	orr.w	r3, r3, #8
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	b94b      	cbnz	r3, 800834a <__swsetup_r+0x7a>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800833c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008340:	d003      	beq.n	800834a <__swsetup_r+0x7a>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff ff49 	bl	80081dc <__smakebuf_r>
 800834a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834e:	f013 0201 	ands.w	r2, r3, #1
 8008352:	d00a      	beq.n	800836a <__swsetup_r+0x9a>
 8008354:	2200      	movs	r2, #0
 8008356:	60a2      	str	r2, [r4, #8]
 8008358:	6962      	ldr	r2, [r4, #20]
 800835a:	4252      	negs	r2, r2
 800835c:	61a2      	str	r2, [r4, #24]
 800835e:	6922      	ldr	r2, [r4, #16]
 8008360:	b942      	cbnz	r2, 8008374 <__swsetup_r+0xa4>
 8008362:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008366:	d1c5      	bne.n	80082f4 <__swsetup_r+0x24>
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	0799      	lsls	r1, r3, #30
 800836c:	bf58      	it	pl
 800836e:	6962      	ldrpl	r2, [r4, #20]
 8008370:	60a2      	str	r2, [r4, #8]
 8008372:	e7f4      	b.n	800835e <__swsetup_r+0x8e>
 8008374:	2000      	movs	r0, #0
 8008376:	e7f7      	b.n	8008368 <__swsetup_r+0x98>
 8008378:	20000024 	.word	0x20000024

0800837c <_fstat_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_fstat_r+0x20>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	4611      	mov	r1, r2
 8008388:	602b      	str	r3, [r5, #0]
 800838a:	f7f9 fd97 	bl	8001ebc <_fstat>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d102      	bne.n	8008398 <_fstat_r+0x1c>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	b103      	cbz	r3, 8008398 <_fstat_r+0x1c>
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	bd38      	pop	{r3, r4, r5, pc}
 800839a:	bf00      	nop
 800839c:	20000540 	.word	0x20000540

080083a0 <_isatty_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d06      	ldr	r5, [pc, #24]	@ (80083bc <_isatty_r+0x1c>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	602b      	str	r3, [r5, #0]
 80083ac:	f7f9 fd96 	bl	8001edc <_isatty>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_isatty_r+0x1a>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_isatty_r+0x1a>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20000540 	.word	0x20000540

080083c0 <_sbrk_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d06      	ldr	r5, [pc, #24]	@ (80083dc <_sbrk_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f9 fd9e 	bl	8001f0c <_sbrk>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_sbrk_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_sbrk_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000540 	.word	0x20000540

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <__assert_func+0x2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b954      	cbnz	r4, 8008422 <__assert_func+0x26>
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <__assert_func+0x30>)
 800840e:	461c      	mov	r4, r3
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	9100      	str	r1, [sp, #0]
 8008416:	462b      	mov	r3, r5
 8008418:	4905      	ldr	r1, [pc, #20]	@ (8008430 <__assert_func+0x34>)
 800841a:	f000 f841 	bl	80084a0 <fiprintf>
 800841e:	f000 f851 	bl	80084c4 <abort>
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__assert_func+0x38>)
 8008424:	e7f4      	b.n	8008410 <__assert_func+0x14>
 8008426:	bf00      	nop
 8008428:	20000024 	.word	0x20000024
 800842c:	0800885e 	.word	0x0800885e
 8008430:	08008830 	.word	0x08008830
 8008434:	08008823 	.word	0x08008823

08008438 <_calloc_r>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	fba1 5402 	umull	r5, r4, r1, r2
 800843e:	b93c      	cbnz	r4, 8008450 <_calloc_r+0x18>
 8008440:	4629      	mov	r1, r5
 8008442:	f7ff f8a9 	bl	8007598 <_malloc_r>
 8008446:	4606      	mov	r6, r0
 8008448:	b928      	cbnz	r0, 8008456 <_calloc_r+0x1e>
 800844a:	2600      	movs	r6, #0
 800844c:	4630      	mov	r0, r6
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	220c      	movs	r2, #12
 8008452:	6002      	str	r2, [r0, #0]
 8008454:	e7f9      	b.n	800844a <_calloc_r+0x12>
 8008456:	462a      	mov	r2, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7fe f95a 	bl	8006712 <memset>
 800845e:	e7f5      	b.n	800844c <_calloc_r+0x14>

08008460 <__ascii_mbtowc>:
 8008460:	b082      	sub	sp, #8
 8008462:	b901      	cbnz	r1, 8008466 <__ascii_mbtowc+0x6>
 8008464:	a901      	add	r1, sp, #4
 8008466:	b142      	cbz	r2, 800847a <__ascii_mbtowc+0x1a>
 8008468:	b14b      	cbz	r3, 800847e <__ascii_mbtowc+0x1e>
 800846a:	7813      	ldrb	r3, [r2, #0]
 800846c:	600b      	str	r3, [r1, #0]
 800846e:	7812      	ldrb	r2, [r2, #0]
 8008470:	1e10      	subs	r0, r2, #0
 8008472:	bf18      	it	ne
 8008474:	2001      	movne	r0, #1
 8008476:	b002      	add	sp, #8
 8008478:	4770      	bx	lr
 800847a:	4610      	mov	r0, r2
 800847c:	e7fb      	b.n	8008476 <__ascii_mbtowc+0x16>
 800847e:	f06f 0001 	mvn.w	r0, #1
 8008482:	e7f8      	b.n	8008476 <__ascii_mbtowc+0x16>

08008484 <__ascii_wctomb>:
 8008484:	4603      	mov	r3, r0
 8008486:	4608      	mov	r0, r1
 8008488:	b141      	cbz	r1, 800849c <__ascii_wctomb+0x18>
 800848a:	2aff      	cmp	r2, #255	@ 0xff
 800848c:	d904      	bls.n	8008498 <__ascii_wctomb+0x14>
 800848e:	228a      	movs	r2, #138	@ 0x8a
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f04f 30ff 	mov.w	r0, #4294967295
 8008496:	4770      	bx	lr
 8008498:	700a      	strb	r2, [r1, #0]
 800849a:	2001      	movs	r0, #1
 800849c:	4770      	bx	lr
	...

080084a0 <fiprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b503      	push	{r0, r1, lr}
 80084a4:	4601      	mov	r1, r0
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	4805      	ldr	r0, [pc, #20]	@ (80084c0 <fiprintf+0x20>)
 80084aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f7ff fca9 	bl	8007e08 <_vfiprintf_r>
 80084b6:	b002      	add	sp, #8
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr
 80084c0:	20000024 	.word	0x20000024

080084c4 <abort>:
 80084c4:	b508      	push	{r3, lr}
 80084c6:	2006      	movs	r0, #6
 80084c8:	f000 f82c 	bl	8008524 <raise>
 80084cc:	2001      	movs	r0, #1
 80084ce:	f7f9 fcc1 	bl	8001e54 <_exit>

080084d2 <_raise_r>:
 80084d2:	291f      	cmp	r1, #31
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4605      	mov	r5, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d904      	bls.n	80084e6 <_raise_r+0x14>
 80084dc:	2316      	movs	r3, #22
 80084de:	6003      	str	r3, [r0, #0]
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
 80084e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084e8:	b112      	cbz	r2, 80084f0 <_raise_r+0x1e>
 80084ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ee:	b94b      	cbnz	r3, 8008504 <_raise_r+0x32>
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f831 	bl	8008558 <_getpid_r>
 80084f6:	4622      	mov	r2, r4
 80084f8:	4601      	mov	r1, r0
 80084fa:	4628      	mov	r0, r5
 80084fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008500:	f000 b818 	b.w	8008534 <_kill_r>
 8008504:	2b01      	cmp	r3, #1
 8008506:	d00a      	beq.n	800851e <_raise_r+0x4c>
 8008508:	1c59      	adds	r1, r3, #1
 800850a:	d103      	bne.n	8008514 <_raise_r+0x42>
 800850c:	2316      	movs	r3, #22
 800850e:	6003      	str	r3, [r0, #0]
 8008510:	2001      	movs	r0, #1
 8008512:	e7e7      	b.n	80084e4 <_raise_r+0x12>
 8008514:	2100      	movs	r1, #0
 8008516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800851a:	4620      	mov	r0, r4
 800851c:	4798      	blx	r3
 800851e:	2000      	movs	r0, #0
 8008520:	e7e0      	b.n	80084e4 <_raise_r+0x12>
	...

08008524 <raise>:
 8008524:	4b02      	ldr	r3, [pc, #8]	@ (8008530 <raise+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f7ff bfd2 	b.w	80084d2 <_raise_r>
 800852e:	bf00      	nop
 8008530:	20000024 	.word	0x20000024

08008534 <_kill_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	@ (8008554 <_kill_r+0x20>)
 8008538:	2300      	movs	r3, #0
 800853a:	4604      	mov	r4, r0
 800853c:	4608      	mov	r0, r1
 800853e:	4611      	mov	r1, r2
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	f7f9 fc77 	bl	8001e34 <_kill>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	d102      	bne.n	8008550 <_kill_r+0x1c>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	b103      	cbz	r3, 8008550 <_kill_r+0x1c>
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	bd38      	pop	{r3, r4, r5, pc}
 8008552:	bf00      	nop
 8008554:	20000540 	.word	0x20000540

08008558 <_getpid_r>:
 8008558:	f7f9 bc64 	b.w	8001e24 <_getpid>

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
