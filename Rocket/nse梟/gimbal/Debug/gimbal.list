
gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080053ac  080053ac  000063ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f8  080053f8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053fc  080053fc  000063fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005400  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000068  08005468  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08005468  00007438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001685b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  0001d8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00020488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe1  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fad4  00000000  00000000  000228a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001847f  00000000  00000000  00042375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf3a  00000000  00000000  0005a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012572e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d3c  00000000  00000000  00125774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005394 	.word	0x08005394

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08005394 	.word	0x08005394

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b29a      	uxth	r2, r3
 8000518:	230a      	movs	r3, #10
 800051a:	68b9      	ldr	r1, [r7, #8]
 800051c:	4803      	ldr	r0, [pc, #12]	@ (800052c <_write+0x24>)
 800051e:	f002 ff8f 	bl	8003440 <HAL_UART_Transmit>
  return len;
 8000522:	687b      	ldr	r3, [r7, #4]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000250 	.word	0x20000250

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <main+0x8c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f004 fad9 	bl	8004af4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fd40 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f83d 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 fa1b 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054e:	f000 f885 	bl	800065c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f9cb 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000556:	f000 f945 	bl	80007e4 <MX_TIM7_Init>
  MX_TIM6_Init();
 800055a:	f000 f90d 	bl	8000778 <MX_TIM6_Init>
  MX_TIM4_Init();
 800055e:	f000 f8bd 	bl	80006dc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f977 	bl	8000854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(MDEN_GPIO_Port,MDEN_Pin,GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f001 f90e 	bl	8001790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f001 f907 	bl	8001790 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058c:	f001 f900 	bl	8001790 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(MDSTEP_GPIO_Port, MDSTEP_Pin);
 8000590:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f001 f912 	bl	80017c0 <HAL_GPIO_TogglePin>
	  printf("o\r\n");
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x90>)
 800059e:	f004 faa1 	bl	8004ae4 <puts>
	  HAL_Delay(100);
 80005a2:	2064      	movs	r0, #100	@ 0x64
 80005a4:	f000 fd80 	bl	80010a8 <HAL_Delay>
	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f001 f8ed 	bl	8001790 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 80005b6:	bf00      	nop
 80005b8:	e7e3      	b.n	8000582 <main+0x52>
 80005ba:	bf00      	nop
 80005bc:	20000018 	.word	0x20000018
 80005c0:	080053ac 	.word	0x080053ac

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	2238      	movs	r2, #56	@ 0x38
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fc22 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f001 fa35 	bl	8001a58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	@ 0x40
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000604:	2301      	movs	r3, #1
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000608:	230a      	movs	r3, #10
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f001 facf 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000628:	f000 fa02 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fdcd 	bl	80021e4 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000650:	f000 f9ee 	bl	8000a30 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_I2C1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x7c>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000698:	f001 f8ac 	bl	80017f4 <HAL_I2C_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f000 f9c5 	bl	8000a30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006aa:	f001 f93e 	bl	800192a <HAL_I2CEx_ConfigAnalogFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f000 f9bc 	bl	8000a30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006bc:	f001 f980 	bl	80019c0 <HAL_I2CEx_ConfigDigitalFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f9b3 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000084 	.word	0x20000084
 80006d4:	40005400 	.word	0x40005400
 80006d8:	10d19ce4 	.word	0x10d19ce4

080006dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_TIM4_Init+0x94>)
 80006fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <MX_TIM4_Init+0x98>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_TIM4_Init+0x94>)
 8000702:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000706:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_TIM4_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_TIM4_Init+0x94>)
 8000710:	2263      	movs	r2, #99	@ 0x63
 8000712:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_TIM4_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_TIM4_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000720:	4813      	ldr	r0, [pc, #76]	@ (8000770 <MX_TIM4_Init+0x94>)
 8000722:	f002 f96b 	bl	80029fc <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800072c:	f000 f980 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	@ (8000770 <MX_TIM4_Init+0x94>)
 800073e:	f002 fb03 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 f972 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_TIM4_Init+0x94>)
 800075a:	f002 fd59 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f964 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000d8 	.word	0x200000d8
 8000774:	40000800 	.word	0x40000800

08000778 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_TIM6_Init+0x64>)
 800078a:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <MX_TIM6_Init+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_TIM6_Init+0x64>)
 8000790:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000794:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_TIM6_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_TIM6_Init+0x64>)
 800079e:	2209      	movs	r2, #9
 80007a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_TIM6_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_TIM6_Init+0x64>)
 80007aa:	f002 f927 	bl	80029fc <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007b4:	f000 f93c 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_TIM6_Init+0x64>)
 80007c6:	f002 fd23 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f92e 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000124 	.word	0x20000124
 80007e0:	40001000 	.word	0x40001000

080007e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_TIM7_Init+0x68>)
 80007f6:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <MX_TIM7_Init+0x6c>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_TIM7_Init+0x68>)
 80007fc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000800:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_TIM7_Init+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_TIM7_Init+0x68>)
 800080a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_TIM7_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_TIM7_Init+0x68>)
 8000818:	f002 f8f0 	bl	80029fc <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000822:	f000 f905 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <MX_TIM7_Init+0x68>)
 8000834:	f002 fcec 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800083e:	f000 f8f7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000170 	.word	0x20000170
 8000850:	40001400 	.word	0x40001400

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <MX_USART1_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000860:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 800089e:	f002 fd7f 	bl	80033a0 <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f8c2 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008b0:	f003 ff35 	bl	800471e <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f8b9 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008c2:	f003 ff6a 	bl	800479a <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f8b0 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USART1_UART_Init+0x90>)
 80008d2:	f003 feeb 	bl	80046ac <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f8a8 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200001bc 	.word	0x200001bc
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <MX_USART2_UART_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <MX_USART2_UART_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <MX_USART2_UART_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_USART2_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_USART2_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_USART2_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000936:	f002 fd33 	bl	80033a0 <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000940:	f000 f876 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_USART2_UART_Init+0x90>)
 8000948:	f003 fee9 	bl	800471e <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f86d 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <MX_USART2_UART_Init+0x90>)
 800095a:	f003 ff1e 	bl	800479a <HAL_UARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f864 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_USART2_UART_Init+0x90>)
 800096a:	f003 fe9f 	bl	80046ac <HAL_UARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f85c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000250 	.word	0x20000250
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_GPIO_Init+0xa4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 51cc 	mov.w	r1, #6528	@ 0x1980
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f000 fedc 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDMS3_Pin|MDMS2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2141      	movs	r1, #65	@ 0x41
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_GPIO_Init+0xa8>)
 80009de:	f000 fed7 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDDIR_Pin MDMS1_Pin MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin;
 80009e2:	f44f 53cc 	mov.w	r3, #6528	@ 0x1980
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fe:	f000 fd45 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : MDMS3_Pin MDMS2_Pin */
  GPIO_InitStruct.Pin = MDMS3_Pin|MDMS2_Pin;
 8000a02:	2341      	movs	r3, #65	@ 0x41
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_GPIO_Init+0xa8>)
 8000a1a:	f000 fd37 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	4a0e      	ldr	r2, [pc, #56]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a72:	f001 f895 	bl	8001ba0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	@ 0x70
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2244      	movs	r2, #68	@ 0x44
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 f9b9 	bl	8004e1c <memset>
  if(hi2c->Instance==I2C1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a2d      	ldr	r2, [pc, #180]	@ (8000b64 <HAL_I2C_MspInit+0xe0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d153      	bne.n	8000b5c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fdab 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f7ff ffb0 	bl	8000a30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b25      	ldr	r3, [pc, #148]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b12:	2304      	movs	r3, #4
 8000b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b20:	f000 fcb4 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b24:	2380      	movs	r3, #128	@ 0x80
 8000b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <HAL_I2C_MspInit+0xe8>)
 8000b40:	f000 fca4 	bl	800148c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_I2C_MspInit+0xe4>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3770      	adds	r7, #112	@ 0x70
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000400 	.word	0x48000400

08000b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a27      	ldr	r2, [pc, #156]	@ (8000c1c <HAL_TIM_Base_MspInit+0xac>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d114      	bne.n	8000bac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	4a26      	ldr	r2, [pc, #152]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201e      	movs	r0, #30
 8000ba0:	f000 fb7f 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ba4:	201e      	movs	r0, #30
 8000ba6:	f000 fb96 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000baa:	e032      	b.n	8000c12 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <HAL_TIM_Base_MspInit+0xb4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d114      	bne.n	8000be0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	2036      	movs	r0, #54	@ 0x36
 8000bd4:	f000 fb65 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd8:	2036      	movs	r0, #54	@ 0x36
 8000bda:	f000 fb7c 	bl	80012d6 <HAL_NVIC_EnableIRQ>
}
 8000bde:	e018      	b.n	8000c12 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_TIM_Base_MspInit+0xb8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d113      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_TIM_Base_MspInit+0xb0>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	2037      	movs	r0, #55	@ 0x37
 8000c08:	f000 fb4b 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c0c:	2037      	movs	r0, #55	@ 0x37
 8000c0e:	f000 fb62 	bl	80012d6 <HAL_NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40000800 	.word	0x40000800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40001000 	.word	0x40001000
 8000c28:	40001400 	.word	0x40001400

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	@ 0x70
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	2244      	movs	r2, #68	@ 0x44
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 f8e5 	bl	8004e1c <memset>
  if(huart->Instance==USART1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a46      	ldr	r2, [pc, #280]	@ (8000d70 <HAL_UART_MspInit+0x144>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d140      	bne.n	8000cde <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	f107 0318 	add.w	r3, r7, #24
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fcd7 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c74:	f7ff fedc 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c78:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c94:	4a37      	ldr	r2, [pc, #220]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9c:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f000 fbe0 	bl	800148c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2025      	movs	r0, #37	@ 0x25
 8000cd2:	f000 fae6 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd6:	2025      	movs	r0, #37	@ 0x25
 8000cd8:	f000 fafd 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cdc:	e043      	b.n	8000d66 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <HAL_UART_MspInit+0x14c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d13e      	bne.n	8000d66 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fc91 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000d00:	f7ff fe96 	bl	8000a30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d08:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_UART_MspInit+0x148>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d34:	230c      	movs	r3, #12
 8000d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d44:	2307      	movs	r3, #7
 8000d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d52:	f000 fb9b 	bl	800148c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2026      	movs	r0, #38	@ 0x26
 8000d5c:	f000 faa1 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d60:	2026      	movs	r0, #38	@ 0x26
 8000d62:	f000 fab8 	bl	80012d6 <HAL_NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3770      	adds	r7, #112	@ 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40004400 	.word	0x40004400

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f94b 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <TIM4_IRQHandler+0x10>)
 8000de2:	f001 fe62 	bl	8002aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d8 	.word	0x200000d8

08000df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USART1_IRQHandler+0x10>)
 8000df6:	f002 fbb1 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001bc 	.word	0x200001bc

08000e04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <USART2_IRQHandler+0x10>)
 8000e0a:	f002 fba7 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000250 	.word	0x20000250

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f001 fe44 	bl	8002aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000124 	.word	0x20000124

08000e2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <TIM7_IRQHandler+0x10>)
 8000e32:	f001 fe3a 	bl	8002aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000170 	.word	0x20000170

08000e40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
  }

  return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_isatty>:

int _isatty(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f003 ffd0 	bl	8004eb8 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20008000 	.word	0x20008000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	200002e4 	.word	0x200002e4
 8000f4c:	20000438 	.word	0x20000438

08000f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 ff8f 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff fac3 	bl	8000530 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   r0, =_estack
 8000fac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fb8:	08005400 	.word	0x08005400
  ldr r2, =_sbss
 8000fbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fc0:	20000438 	.word	0x20000438

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f95b 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f80e 	bl	8000ff8 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff fd28 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]

}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_InitTick+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d022      	beq.n	8001052 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_InitTick+0x6c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_InitTick+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001018:	fbb1 f3f3 	udiv	r3, r1, r3
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f966 	bl	80012f2 <HAL_SYSTICK_Config>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10f      	bne.n	800104c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d809      	bhi.n	8001046 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001032:	2200      	movs	r2, #0
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	f000 f932 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <HAL_InitTick+0x70>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e007      	b.n	8001056 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e004      	b.n	8001056 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e001      	b.n	8001056 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000008 	.word	0x20000008
 8001064:	20000000 	.word	0x20000000
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x1c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x20>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x1c>)
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200002e8 	.word	0x200002e8
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200002e8 	.word	0x200002e8

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d004      	beq.n	80010cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_Delay+0x40>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010cc:	bf00      	nop
 80010ce:	f7ff ffdf 	bl	8001090 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d8f7      	bhi.n	80010ce <HAL_Delay+0x26>
  {
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff40 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff33 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa4 	bl	8001248 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d005      	beq.n	800132e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e037      	b.n	800139e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 020e 	bic.w	r2, r2, #14
 800133c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800134c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f003 021f 	and.w	r2, r3, #31
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800137a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001392:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800139c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d00d      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2204      	movs	r2, #4
 80013d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e047      	b.n	8001480 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800141e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800143c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00c      	beq.n	8001460 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001454:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800145e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
    }
  }
  return status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149a:	e15a      	b.n	8001752 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 814c 	beq.w	800174c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b03      	cmp	r3, #3
 8001538:	d017      	beq.n	800156a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d123      	bne.n	80015be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80a6 	beq.w	800174c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	4b5b      	ldr	r3, [pc, #364]	@ (8001770 <HAL_GPIO_Init+0x2e4>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001604:	4a5a      	ldr	r2, [pc, #360]	@ (8001770 <HAL_GPIO_Init+0x2e4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6613      	str	r3, [r2, #96]	@ 0x60
 800160c:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <HAL_GPIO_Init+0x2e4>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001618:	4a56      	ldr	r2, [pc, #344]	@ (8001774 <HAL_GPIO_Init+0x2e8>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001642:	d01f      	beq.n	8001684 <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4c      	ldr	r2, [pc, #304]	@ (8001778 <HAL_GPIO_Init+0x2ec>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d019      	beq.n	8001680 <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4b      	ldr	r2, [pc, #300]	@ (800177c <HAL_GPIO_Init+0x2f0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d013      	beq.n	800167c <HAL_GPIO_Init+0x1f0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4a      	ldr	r2, [pc, #296]	@ (8001780 <HAL_GPIO_Init+0x2f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00d      	beq.n	8001678 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a49      	ldr	r2, [pc, #292]	@ (8001784 <HAL_GPIO_Init+0x2f8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d007      	beq.n	8001674 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a48      	ldr	r2, [pc, #288]	@ (8001788 <HAL_GPIO_Init+0x2fc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_GPIO_Init+0x1e4>
 800166c:	2305      	movs	r3, #5
 800166e:	e00a      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001670:	2306      	movs	r3, #6
 8001672:	e008      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001674:	2304      	movs	r3, #4
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001678:	2303      	movs	r3, #3
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001684:	2300      	movs	r3, #0
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001696:	4937      	ldr	r1, [pc, #220]	@ (8001774 <HAL_GPIO_Init+0x2e8>)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a4:	4b39      	ldr	r3, [pc, #228]	@ (800178c <HAL_GPIO_Init+0x300>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c8:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_GPIO_Init+0x300>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_GPIO_Init+0x300>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f2:	4a26      	ldr	r2, [pc, #152]	@ (800178c <HAL_GPIO_Init+0x300>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_GPIO_Init+0x300>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_GPIO_Init+0x300>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <HAL_GPIO_Init+0x300>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_GPIO_Init+0x300>)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	f47f ae9d 	bne.w	800149c <HAL_GPIO_Init+0x10>
  }
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43d9      	mvns	r1, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	400b      	ands	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e08d      	b.n	8001922 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff f932 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e006      	b.n	800187c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800187a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d108      	bne.n	8001896 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	e007      	b.n	80018a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b20      	cmp	r3, #32
 800193e:	d138      	bne.n	80019b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800194a:	2302      	movs	r3, #2
 800194c:	e032      	b.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2224      	movs	r2, #36	@ 0x24
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800197c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d139      	bne.n	8001a4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e033      	b.n	8001a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2224      	movs	r2, #36	@ 0x24
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
  }
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d141      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a66:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a72:	d131      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a74:	4b47      	ldr	r3, [pc, #284]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a7a:	4a46      	ldr	r2, [pc, #280]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	4b43      	ldr	r3, [pc, #268]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a8c:	4a41      	ldr	r2, [pc, #260]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a94:	4b40      	ldr	r3, [pc, #256]	@ (8001b98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2232      	movs	r2, #50	@ 0x32
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aaa:	e002      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001abe:	d102      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f2      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac6:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d158      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e057      	b.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ade:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ae8:	e04d      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af0:	d141      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af2:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afe:	d131      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b06:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b18:	4a1e      	ldr	r2, [pc, #120]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2232      	movs	r2, #50	@ 0x32
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	0c9b      	lsrs	r3, r3, #18
 8001b32:	3301      	adds	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b36:	e002      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4a:	d102      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f2      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5e:	d112      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e011      	b.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b74:	e007      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40007000 	.word	0x40007000
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	431bde83 	.word	0x431bde83

08001ba0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e2fe      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4b97      	ldr	r3, [pc, #604]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4b94      	ldr	r3, [pc, #592]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3e>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b8d      	ldr	r3, [pc, #564]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e2d9      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b85      	ldr	r3, [pc, #532]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a84      	ldr	r2, [pc, #528]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7e      	ldr	r2, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b78      	ldr	r3, [pc, #480]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a77      	ldr	r2, [pc, #476]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a74      	ldr	r2, [pc, #464]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa0a 	bl	8001090 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fa06 	bl	8001090 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e29e      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f9f6 	bl	8001090 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f9f2 	bl	8001090 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e28a      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	4b60      	ldr	r3, [pc, #384]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x136>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x13c>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11f      	bne.n	8001d3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x154>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e25d      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	4946      	ldr	r1, [pc, #280]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d28:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f963 	bl	8000ff8 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d043      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e249      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f99e 	bl	8001090 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f99a 	bl	8001090 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e232      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	492d      	ldr	r1, [pc, #180]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
 8001d8a:	e01a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f97a 	bl	8001090 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff f976 	bl	8001090 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e20e      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e0>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d041      	beq.n	8001e52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff f953 	bl	8001090 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff f94f 	bl	8001090 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1e7      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCC_OscConfig+0x22e>
 8001e0e:	e020      	b.n	8001e52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f936 	bl	8001090 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e26:	e00d      	b.n	8001e44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff f932 	bl	8001090 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d906      	bls.n	8001e44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1ca      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e44:	4b8c      	ldr	r3, [pc, #560]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ea      	bne.n	8001e28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80a6 	beq.w	8001fac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e64:	4b84      	ldr	r3, [pc, #528]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2b4>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e86:	4b7c      	ldr	r3, [pc, #496]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e96:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_OscConfig+0x4bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x4bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4bc>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f8ef 	bl	8001090 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff f8eb 	bl	8001090 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e183      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x4bc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_RCC_OscConfig+0x32e>
 8001edc:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	4a65      	ldr	r2, [pc, #404]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eec:	e024      	b.n	8001f38 <HAL_RCC_OscConfig+0x378>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d110      	bne.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001ef6:	4b60      	ldr	r3, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efc:	4a5e      	ldr	r2, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f06:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_OscConfig+0x378>
 8001f18:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f28:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff f8a6 	bl	8001090 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff f8a2 	bl	8001090 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e138      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b46      	ldr	r3, [pc, #280]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ed      	beq.n	8001f48 <HAL_RCC_OscConfig+0x388>
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff f88f 	bl	8001090 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff f88b 	bl	8001090 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e121      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ed      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	4a34      	ldr	r2, [pc, #208]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03c      	beq.n	8002032 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f85e 	bl	8001090 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd8:	f7ff f85a 	bl	8001090 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0f2      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x418>
 8001ff8:	e01b      	b.n	8002032 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff f841 	bl	8001090 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002012:	f7ff f83d 	bl	8001090 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0d5      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80c9 	beq.w	80021ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b0c      	cmp	r3, #12
 8002046:	f000 8083 	beq.w	8002150 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d15e      	bne.n	8002110 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f817 	bl	8001090 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	e00c      	b.n	8002080 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f813 	bl	8001090 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d905      	bls.n	8002080 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ab      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002080:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ec      	bne.n	8002066 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b52      	ldr	r3, [pc, #328]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4b52      	ldr	r3, [pc, #328]	@ (80021dc <HAL_RCC_OscConfig+0x61c>)
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6a11      	ldr	r1, [r2, #32]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800209c:	3a01      	subs	r2, #1
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020a6:	0212      	lsls	r2, r2, #8
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020ae:	0852      	lsrs	r2, r2, #1
 80020b0:	3a01      	subs	r2, #1
 80020b2:	0552      	lsls	r2, r2, #21
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ba:	0852      	lsrs	r2, r2, #1
 80020bc:	3a01      	subs	r2, #1
 80020be:	0652      	lsls	r2, r2, #25
 80020c0:	4311      	orrs	r1, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020c6:	06d2      	lsls	r2, r2, #27
 80020c8:	430a      	orrs	r2, r1
 80020ca:	4943      	ldr	r1, [pc, #268]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a40      	ldr	r2, [pc, #256]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020dc:	4b3e      	ldr	r3, [pc, #248]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a3d      	ldr	r2, [pc, #244]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe ffd2 	bl	8001090 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe ffce 	bl	8001090 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e066      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x530>
 800210e:	e05e      	b.n	80021ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe ffb8 	bl	8001090 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe ffb4 	bl	8001090 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04c      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002136:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002142:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4924      	ldr	r1, [pc, #144]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_RCC_OscConfig+0x620>)
 800214a:	4013      	ands	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
 800214e:	e03e      	b.n	80021ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e039      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800215c:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_RCC_OscConfig+0x618>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d12c      	bne.n	80021ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	3b01      	subs	r3, #1
 800217c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d123      	bne.n	80021ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d11b      	bne.n	80021ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d113      	bne.n	80021ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	019f800c 	.word	0x019f800c
 80021e0:	feeefffc 	.word	0xfeeefffc

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e11e      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b91      	ldr	r3, [pc, #580]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	498c      	ldr	r1, [pc, #560]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b8a      	ldr	r3, [pc, #552]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e106      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d073      	beq.n	8002320 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d129      	bne.n	8002294 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	4b81      	ldr	r3, [pc, #516]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f4      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002250:	f000 f99e 	bl	8002590 <RCC_GetSysClockFreqFromPLLSource>
 8002254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4a7c      	ldr	r2, [pc, #496]	@ (800244c <HAL_RCC_ClockConfig+0x268>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d93f      	bls.n	80022de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800225e:	4b7a      	ldr	r3, [pc, #488]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d033      	beq.n	80022de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12f      	bne.n	80022de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227e:	4b72      	ldr	r3, [pc, #456]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002286:	4a70      	ldr	r2, [pc, #448]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e024      	b.n	80022de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d107      	bne.n	80022ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229c:	4b6a      	ldr	r3, [pc, #424]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0c6      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ac:	4b66      	ldr	r3, [pc, #408]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0be      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022bc:	f000 f8ce 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4a61      	ldr	r2, [pc, #388]	@ (800244c <HAL_RCC_ClockConfig+0x268>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d909      	bls.n	80022de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022d2:	4a5d      	ldr	r2, [pc, #372]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4957      	ldr	r1, [pc, #348]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7fe fece 	bl	8001090 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7fe feca 	bl	8001090 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e095      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b4e      	ldr	r3, [pc, #312]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002338:	4b43      	ldr	r3, [pc, #268]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a42      	ldr	r2, [pc, #264]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800233e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002342:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002350:	4b3d      	ldr	r3, [pc, #244]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002358:	4a3b      	ldr	r2, [pc, #236]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800235a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800235e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4936      	ldr	r1, [pc, #216]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
 8002372:	e008      	b.n	8002386 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b80      	cmp	r3, #128	@ 0x80
 8002378:	d105      	bne.n	8002386 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800237a:	4b33      	ldr	r3, [pc, #204]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4a32      	ldr	r2, [pc, #200]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002380:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002384:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21d      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b2b      	ldr	r3, [pc, #172]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	4929      	ldr	r1, [pc, #164]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fe74 	bl	8001090 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fe70 	bl	8001090 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e03b      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1ed      	bne.n	80023ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4917      	ldr	r1, [pc, #92]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490f      	ldr	r1, [pc, #60]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240e:	f000 f825 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490c      	ldr	r1, [pc, #48]	@ (8002450 <HAL_RCC_ClockConfig+0x26c>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x270>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_RCC_ClockConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fde0 	bl	8000ff8 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000
 8002448:	40021000 	.word	0x40021000
 800244c:	04c4b400 	.word	0x04c4b400
 8002450:	080053b0 	.word	0x080053b0
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002462:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d102      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800246e:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e047      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002474:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d102      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e03e      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002486:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d136      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3301      	adds	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b0:	4a1a      	ldr	r2, [pc, #104]	@ (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	68d2      	ldr	r2, [r2, #12]
 80024bc:	0a12      	lsrs	r2, r2, #8
 80024be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
      break;
 80024c8:	e00c      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	0a12      	lsrs	r2, r2, #8
 80024d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0e5b      	lsrs	r3, r3, #25
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e001      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002504:	693b      	ldr	r3, [r7, #16]
}
 8002506:	4618      	mov	r0, r3
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	080053c0 	.word	0x080053c0

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002568:	f7ff ffda 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	080053c0 	.word	0x080053c0

08002590 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
    break;
 80025cc:	e00c      	b.n	80025e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    break;
 80025e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	00f42400 	.word	0x00f42400

0800261c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002624:	2300      	movs	r3, #0
 8002626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002628:	2300      	movs	r3, #0
 800262a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8098 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	4a3f      	ldr	r2, [pc, #252]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002666:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a39      	ldr	r2, [pc, #228]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002672:	f7fe fd0d 	bl	8001090 <HAL_GetTick>
 8002676:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002678:	e009      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe fd09 	bl	8001090 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d902      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	74fb      	strb	r3, [r7, #19]
        break;
 800268c:	e005      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800268e:	4b30      	ldr	r3, [pc, #192]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ef      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d159      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01e      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d019      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c8:	4b20      	ldr	r3, [pc, #128]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d8:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e8:	4a18      	ldr	r2, [pc, #96]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fcc9 	bl	8001090 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	e00b      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fcc5 	bl	8001090 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d902      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	74fb      	strb	r3, [r7, #19]
            break;
 8002718:	e006      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ec      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	4903      	ldr	r1, [pc, #12]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	74bb      	strb	r3, [r7, #18]
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4ba6      	ldr	r3, [pc, #664]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	4aa5      	ldr	r2, [pc, #660]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4ba0      	ldr	r3, [pc, #640]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	499c      	ldr	r1, [pc, #624]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b97      	ldr	r3, [pc, #604]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4994      	ldr	r1, [pc, #592]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b8f      	ldr	r3, [pc, #572]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	498b      	ldr	r1, [pc, #556]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b86      	ldr	r3, [pc, #536]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	4983      	ldr	r1, [pc, #524]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027fe:	4b7e      	ldr	r3, [pc, #504]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002804:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	497a      	ldr	r1, [pc, #488]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002820:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4972      	ldr	r1, [pc, #456]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002842:	4b6d      	ldr	r3, [pc, #436]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002848:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4969      	ldr	r1, [pc, #420]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002864:	4b64      	ldr	r3, [pc, #400]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4961      	ldr	r1, [pc, #388]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002886:	4b5c      	ldr	r3, [pc, #368]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	4958      	ldr	r1, [pc, #352]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	4950      	ldr	r1, [pc, #320]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b4b      	ldr	r3, [pc, #300]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a4a      	ldr	r2, [pc, #296]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e0:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	4942      	ldr	r1, [pc, #264]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002900:	4b3d      	ldr	r3, [pc, #244]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a3c      	ldr	r2, [pc, #240]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002918:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4934      	ldr	r1, [pc, #208]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2e      	ldr	r2, [pc, #184]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002950:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	4926      	ldr	r1, [pc, #152]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	4918      	ldr	r1, [pc, #96]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	490a      	ldr	r1, [pc, #40]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e049      	b.n	8002aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f8a4 	bl	8000b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 fab0 	bl	8002fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0202 	mvn.w	r2, #2
 8002ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa35 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002afa:	e005      	b.n	8002b08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fa27 	bl	8002f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa38 	bl	8002f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0204 	mvn.w	r2, #4
 8002b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa0f 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002b46:	e005      	b.n	8002b54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa01 	bl	8002f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa12 	bl	8002f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01b      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0208 	mvn.w	r2, #8
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9e9 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9db 	bl	8002f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9ec 	bl	8002f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01b      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0210 	mvn.w	r2, #16
 8002bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f9c3 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002bde:	e005      	b.n	8002bec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9b5 	bl	8002f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9c6 	bl	8002f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0201 	mvn.w	r2, #1
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f993 	bl	8002f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fb72 	bl	8003328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fb6a 	bl	800333c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f980 	bl	8002f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0220 	mvn.w	r2, #32
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fb32 	bl	8003314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fb3e 	bl	8003350 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fb36 	bl	8003364 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fb2e 	bl	8003378 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fb26 	bl	800338c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIM_ConfigClockSource+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0de      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x1da>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a63      	ldr	r2, [pc, #396]	@ (8002f2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	f000 80a9 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002da4:	4a61      	ldr	r2, [pc, #388]	@ (8002f2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	f200 80ae 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002dac:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f000 80a1 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002db4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f200 80a6 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	f000 8099 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8002f34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f200 809e 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8002f38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f000 8091 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002dd4:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f200 8096 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002de0:	f000 8089 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002de8:	f200 808e 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0x128>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_TIM_ConfigClockSource+0x1c6>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e08:	2b70      	cmp	r3, #112	@ 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xfa>
 8002e0c:	2b70      	cmp	r3, #112	@ 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e10:	2b60      	cmp	r3, #96	@ 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x16e>
 8002e14:	2b60      	cmp	r3, #96	@ 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e18:	2b50      	cmp	r3, #80	@ 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x14e>
 8002e1c:	2b50      	cmp	r3, #80	@ 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e20:	2b40      	cmp	r3, #64	@ 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x18e>
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e28:	2b30      	cmp	r3, #48	@ 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e2c:	2b30      	cmp	r3, #48	@ 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	f000 f9bd 	bl	80031d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04f      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	f000 f9a6 	bl	80031d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 f918 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	@ 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f971 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 f937 	bl	8003136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	@ 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f961 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 f8f8 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f951 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 f948 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f06:	e003      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	00100070 	.word	0x00100070
 8002f30:	00100040 	.word	0x00100040
 8002f34:	00100030 	.word	0x00100030
 8002f38:	00100020 	.word	0x00100020

08002f3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a42      	ldr	r2, [pc, #264]	@ (80030bc <TIM_Base_SetConfig+0x11c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00f      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80030c0 <TIM_Base_SetConfig+0x120>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3e      	ldr	r2, [pc, #248]	@ (80030c4 <TIM_Base_SetConfig+0x124>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80030c8 <TIM_Base_SetConfig+0x128>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <TIM_Base_SetConfig+0x11c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01b      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff8:	d017      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	@ (80030c0 <TIM_Base_SetConfig+0x120>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2f      	ldr	r2, [pc, #188]	@ (80030c4 <TIM_Base_SetConfig+0x124>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00f      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2e      	ldr	r2, [pc, #184]	@ (80030c8 <TIM_Base_SetConfig+0x128>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00b      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2d      	ldr	r2, [pc, #180]	@ (80030cc <TIM_Base_SetConfig+0x12c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2c      	ldr	r2, [pc, #176]	@ (80030d0 <TIM_Base_SetConfig+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2b      	ldr	r2, [pc, #172]	@ (80030d4 <TIM_Base_SetConfig+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d108      	bne.n	800303c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <TIM_Base_SetConfig+0x11c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a17      	ldr	r2, [pc, #92]	@ (80030c8 <TIM_Base_SetConfig+0x128>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <TIM_Base_SetConfig+0x12c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a15      	ldr	r2, [pc, #84]	@ (80030d0 <TIM_Base_SetConfig+0x130>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0xe8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <TIM_Base_SetConfig+0x134>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 030a 	bic.w	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003172:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80031ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0307 	orr.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	021a      	lsls	r2, r3, #8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e065      	b.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2b      	ldr	r2, [pc, #172]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329e:	d013      	beq.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a17      	ldr	r2, [pc, #92]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10c      	bne.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40014000 	.word	0x40014000

08003314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e042      	b.n	8003438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fd fc31 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fee4 	bl	80041b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fc15 	bl	8003c20 <UART_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01b      	b.n	8003438 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800341e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 ff63 	bl	80042fc <UART_CheckIdleState>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	2b20      	cmp	r3, #32
 8003458:	d17b      	bne.n	8003552 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Transmit+0x26>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e074      	b.n	8003554 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	@ 0x21
 8003476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347a:	f7fd fe09 	bl	8001090 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003498:	d108      	bne.n	80034ac <HAL_UART_Transmit+0x6c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e003      	b.n	80034b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034b4:	e030      	b.n	8003518 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2180      	movs	r1, #128	@ 0x80
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 ffc5 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e03d      	b.n	8003554 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3302      	adds	r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e007      	b.n	8003506 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3301      	adds	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1c8      	bne.n	80034b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	2140      	movs	r1, #64	@ 0x40
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 ff8e 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e006      	b.n	8003554 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0ba      	sub	sp, #232	@ 0xe8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003586:	f640 030f 	movw	r3, #2063	@ 0x80f
 800358a:	4013      	ands	r3, r2
 800358c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11b      	bne.n	80035d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8300 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
      }
      return;
 80035ce:	e2fa      	b.n	8003bc6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8123 	beq.w	8003820 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80035de:	4b8d      	ldr	r3, [pc, #564]	@ (8003814 <HAL_UART_IRQHandler+0x2b8>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80035e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_UART_IRQHandler+0x2bc>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8116 	beq.w	8003820 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_UART_IRQHandler+0xc8>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_UART_IRQHandler+0xf8>
 8003630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2202      	movs	r2, #2
 8003642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f043 0204 	orr.w	r2, r3, #4
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <HAL_UART_IRQHandler+0x128>
 8003660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2204      	movs	r2, #4
 8003672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800369c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003814 <HAL_UART_IRQHandler+0x2b8>)
 80036a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	f043 0208 	orr.w	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_UART_IRQHandler+0x196>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8266 	beq.w	8003bca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800374a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003752:	2b00      	cmp	r3, #0
 8003754:	d054      	beq.n	8003800 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fee7 	bl	800452a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b40      	cmp	r3, #64	@ 0x40
 8003768:	d146      	bne.n	80037f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003796:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800379a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1d9      	bne.n	800376a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c6:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_UART_IRQHandler+0x2c0>)
 80037c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fdf3 	bl	80013bc <HAL_DMA_Abort_IT>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d019      	beq.n	8003810 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80037ea:	4610      	mov	r0, r2
 80037ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	e00f      	b.n	8003810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9ff 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f6:	e00b      	b.n	8003810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f9fb 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	e007      	b.n	8003810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f9f7 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800380e:	e1dc      	b.n	8003bca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	bf00      	nop
    return;
 8003812:	e1da      	b.n	8003bca <HAL_UART_IRQHandler+0x66e>
 8003814:	10000001 	.word	0x10000001
 8003818:	04000120 	.word	0x04000120
 800381c:	080045f7 	.word	0x080045f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 8170 	bne.w	8003b0a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8169 	beq.w	8003b0a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8162 	beq.w	8003b0a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	f040 80d8 	bne.w	8003a0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800386c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80af 	beq.w	80039d4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800387c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003880:	429a      	cmp	r2, r3
 8003882:	f080 80a7 	bcs.w	80039d4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8087 	bne.w	80039b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1da      	bne.n	80038a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003912:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003916:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800391a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e1      	bne.n	80038ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800393a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800393c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800394e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003950:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003954:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800395c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e3      	bne.n	800392a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800397e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003980:	f023 0310 	bic.w	r3, r3, #16
 8003984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003992:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e4      	bne.n	8003970 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fcac 	bl	800130a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f91b 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039d2:	e0fc      	b.n	8003bce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039de:	429a      	cmp	r2, r3
 80039e0:	f040 80f5 	bne.w	8003bce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	f040 80eb 	bne.w	8003bce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8fe 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
      return;
 8003a0c:	e0df      	b.n	8003bce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80d1 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80cc 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e4      	bne.n	8003a3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e1      	bne.n	8003a70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0310 	bic.w	r3, r3, #16
 8003ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	69b9      	ldr	r1, [r7, #24]
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	617b      	str	r3, [r7, #20]
   return(result);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e4      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f880 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b08:	e063      	b.n	8003bd2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00e      	beq.n	8003b34 <HAL_UART_IRQHandler+0x5d8>
 8003b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fd9f 	bl	8004670 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b32:	e051      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d014      	beq.n	8003b6a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03a      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
    }
    return;
 8003b68:	e035      	b.n	8003bd6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_UART_IRQHandler+0x62e>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fd49 	bl	800461a <UART_EndTransmit_IT>
    return;
 8003b88:	e026      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x64e>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fd78 	bl	8004698 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ba8:	e016      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d010      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0c      	bge.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fd60 	bl	8004684 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bc4:	e008      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003bc6:	bf00      	nop
 8003bc8:	e006      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8003bca:	bf00      	nop
 8003bcc:	e004      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8003bd6:	bf00      	nop
  }
}
 8003bd8:	37e8      	adds	r7, #232	@ 0xe8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop

08003be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b08c      	sub	sp, #48	@ 0x30
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4bab      	ldr	r3, [pc, #684]	@ (8003efc <UART_SetConfig+0x2dc>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4aa0      	ldr	r2, [pc, #640]	@ (8003f00 <UART_SetConfig+0x2e0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	f023 010f 	bic.w	r1, r3, #15
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a91      	ldr	r2, [pc, #580]	@ (8003f04 <UART_SetConfig+0x2e4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d125      	bne.n	8003d10 <UART_SetConfig+0xf0>
 8003cc4:	4b90      	ldr	r3, [pc, #576]	@ (8003f08 <UART_SetConfig+0x2e8>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d81a      	bhi.n	8003d08 <UART_SetConfig+0xe8>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <UART_SetConfig+0xb8>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d01 	.word	0x08003d01
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cee:	e0d6      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf6:	e0d2      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfe:	e0ce      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d00:	2308      	movs	r3, #8
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d06:	e0ca      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0e:	e0c6      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7d      	ldr	r2, [pc, #500]	@ (8003f0c <UART_SetConfig+0x2ec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d138      	bne.n	8003d8c <UART_SetConfig+0x16c>
 8003d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f08 <UART_SetConfig+0x2e8>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d82d      	bhi.n	8003d84 <UART_SetConfig+0x164>
 8003d28:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <UART_SetConfig+0x110>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d65 	.word	0x08003d65
 8003d34:	08003d85 	.word	0x08003d85
 8003d38:	08003d85 	.word	0x08003d85
 8003d3c:	08003d85 	.word	0x08003d85
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003d85 	.word	0x08003d85
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d85 	.word	0x08003d85
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	08003d85 	.word	0x08003d85
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d7d 	.word	0x08003d7d
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6a:	e098      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d72:	e094      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7a:	e090      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d82:	e08c      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8a:	e088      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5f      	ldr	r2, [pc, #380]	@ (8003f10 <UART_SetConfig+0x2f0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d125      	bne.n	8003de2 <UART_SetConfig+0x1c2>
 8003d96:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <UART_SetConfig+0x2e8>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003da0:	2b30      	cmp	r3, #48	@ 0x30
 8003da2:	d016      	beq.n	8003dd2 <UART_SetConfig+0x1b2>
 8003da4:	2b30      	cmp	r3, #48	@ 0x30
 8003da6:	d818      	bhi.n	8003dda <UART_SetConfig+0x1ba>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d00a      	beq.n	8003dc2 <UART_SetConfig+0x1a2>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d814      	bhi.n	8003dda <UART_SetConfig+0x1ba>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <UART_SetConfig+0x19a>
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d008      	beq.n	8003dca <UART_SetConfig+0x1aa>
 8003db8:	e00f      	b.n	8003dda <UART_SetConfig+0x1ba>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc0:	e06d      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc8:	e069      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd0:	e065      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd8:	e061      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003dda:	2310      	movs	r3, #16
 8003ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de0:	e05d      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4b      	ldr	r2, [pc, #300]	@ (8003f14 <UART_SetConfig+0x2f4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d125      	bne.n	8003e38 <UART_SetConfig+0x218>
 8003dec:	4b46      	ldr	r3, [pc, #280]	@ (8003f08 <UART_SetConfig+0x2e8>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df8:	d016      	beq.n	8003e28 <UART_SetConfig+0x208>
 8003dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dfc:	d818      	bhi.n	8003e30 <UART_SetConfig+0x210>
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d00a      	beq.n	8003e18 <UART_SetConfig+0x1f8>
 8003e02:	2b80      	cmp	r3, #128	@ 0x80
 8003e04:	d814      	bhi.n	8003e30 <UART_SetConfig+0x210>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <UART_SetConfig+0x1f0>
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x200>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x210>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e16:	e042      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e1e:	e03e      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e26:	e03a      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2e:	e036      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e36:	e032      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <UART_SetConfig+0x2e0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12a      	bne.n	8003e98 <UART_SetConfig+0x278>
 8003e42:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <UART_SetConfig+0x2e8>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e50:	d01a      	beq.n	8003e88 <UART_SetConfig+0x268>
 8003e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0x270>
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5c:	d00c      	beq.n	8003e78 <UART_SetConfig+0x258>
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e62:	d815      	bhi.n	8003e90 <UART_SetConfig+0x270>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <UART_SetConfig+0x250>
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0x260>
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x270>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e012      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e00e      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	e00a      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8e:	e006      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e96:	e002      	b.n	8003e9e <UART_SetConfig+0x27e>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	@ (8003f00 <UART_SetConfig+0x2e0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	f040 80a8 	bne.w	8003ffa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d834      	bhi.n	8003f1c <UART_SetConfig+0x2fc>
 8003eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <UART_SetConfig+0x298>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003f1d 	.word	0x08003f1d
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003eeb 	.word	0x08003eeb
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003ef3 	.word	0x08003ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003edc:	f7fe fb2c 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee2:	e021      	b.n	8003f28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <UART_SetConfig+0x2f8>)
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ee8:	e01e      	b.n	8003f28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eea:	f7fe fab7 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003eee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ef0:	e01a      	b.n	8003f28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ef8:	e016      	b.n	8003f28 <UART_SetConfig+0x308>
 8003efa:	bf00      	nop
 8003efc:	cfff69f3 	.word	0xcfff69f3
 8003f00:	40008000 	.word	0x40008000
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40004c00 	.word	0x40004c00
 8003f18:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 812a 	beq.w	8004184 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	4a9e      	ldr	r2, [pc, #632]	@ (80041b0 <UART_SetConfig+0x590>)
 8003f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d305      	bcc.n	8003f60 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d903      	bls.n	8003f68 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f66:	e10d      	b.n	8004184 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	4a8e      	ldr	r2, [pc, #568]	@ (80041b0 <UART_SetConfig+0x590>)
 8003f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f8a:	f7fc f945 	bl	8000218 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	020b      	lsls	r3, r1, #8
 8003fa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fa4:	0202      	lsls	r2, r0, #8
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	6849      	ldr	r1, [r1, #4]
 8003faa:	0849      	lsrs	r1, r1, #1
 8003fac:	2000      	movs	r0, #0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	eb12 0804 	adds.w	r8, r2, r4
 8003fb6:	eb43 0905 	adc.w	r9, r3, r5
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	469a      	mov	sl, r3
 8003fc2:	4693      	mov	fp, r2
 8003fc4:	4652      	mov	r2, sl
 8003fc6:	465b      	mov	r3, fp
 8003fc8:	4640      	mov	r0, r8
 8003fca:	4649      	mov	r1, r9
 8003fcc:	f7fc f924 	bl	8000218 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fde:	d308      	bcc.n	8003ff2 <UART_SetConfig+0x3d2>
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe6:	d204      	bcs.n	8003ff2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	e0c8      	b.n	8004184 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ff8:	e0c4      	b.n	8004184 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004002:	d167      	bne.n	80040d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004004:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004008:	2b08      	cmp	r3, #8
 800400a:	d828      	bhi.n	800405e <UART_SetConfig+0x43e>
 800400c:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <UART_SetConfig+0x3f4>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	0800405f 	.word	0x0800405f
 8004024:	0800404f 	.word	0x0800404f
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800405f 	.word	0x0800405f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe fa7e 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 800403c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800403e:	e014      	b.n	800406a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe fa90 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004046:	e010      	b.n	800406a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <UART_SetConfig+0x594>)
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800404c:	e00d      	b.n	800406a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe fa05 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8004052:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004054:	e009      	b.n	800406a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800405c:	e005      	b.n	800406a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8089 	beq.w	8004184 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	4a4e      	ldr	r2, [pc, #312]	@ (80041b0 <UART_SetConfig+0x590>)
 8004078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407c:	461a      	mov	r2, r3
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	fbb3 f3f2 	udiv	r3, r3, r2
 8004084:	005a      	lsls	r2, r3, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	441a      	add	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d916      	bls.n	80040cc <UART_SetConfig+0x4ac>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a4:	d212      	bcs.n	80040cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f023 030f 	bic.w	r3, r3, #15
 80040ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	8bfb      	ldrh	r3, [r7, #30]
 80040be:	4313      	orrs	r3, r2
 80040c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	8bfa      	ldrh	r2, [r7, #30]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e05b      	b.n	8004184 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040d2:	e057      	b.n	8004184 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d828      	bhi.n	800412e <UART_SetConfig+0x50e>
 80040dc:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <UART_SetConfig+0x4c4>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004109 	.word	0x08004109
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004119 	.word	0x08004119
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	0800411f 	.word	0x0800411f
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800412f 	.word	0x0800412f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004108:	f7fe fa16 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 800410c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800410e:	e014      	b.n	800413a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004110:	f7fe fa28 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8004114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b26      	ldr	r3, [pc, #152]	@ (80041b4 <UART_SetConfig+0x594>)
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7fe f99d 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8004122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004124:	e009      	b.n	800413a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004138:	bf00      	nop
    }

    if (pclk != 0U)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d021      	beq.n	8004184 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <UART_SetConfig+0x590>)
 8004146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800414a:	461a      	mov	r2, r3
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	441a      	add	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	d909      	bls.n	800417e <UART_SetConfig+0x55e>
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004170:	d205      	bcs.n	800417e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	b29a      	uxth	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	e002      	b.n	8004184 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2201      	movs	r2, #1
 8004188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2201      	movs	r2, #1
 8004190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3730      	adds	r7, #48	@ 0x30
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	080053c8 	.word	0x080053c8
 80041b4:	00f42400 	.word	0x00f42400

080041b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01a      	beq.n	80042ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b6:	d10a      	bne.n	80042ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b098      	sub	sp, #96	@ 0x60
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800430c:	f7fc fec0 	bl	8001090 <HAL_GetTick>
 8004310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d12f      	bne.n	8004380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	2200      	movs	r2, #0
 800432a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f88e 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d022      	beq.n	8004380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800434e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004358:	647b      	str	r3, [r7, #68]	@ 0x44
 800435a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800435e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e063      	b.n	8004448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d149      	bne.n	8004422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f857 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d03c      	beq.n	8004422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	623b      	str	r3, [r7, #32]
   return(result);
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	617b      	str	r3, [r7, #20]
   return(result);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e012      	b.n	8004448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3758      	adds	r7, #88	@ 0x58
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004460:	e04f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d04b      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fc fe11 	bl	8001090 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <UART_WaitOnFlagUntilTimeout+0x30>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e04e      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d037      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d034      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d031      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d110      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f838 	bl	800452a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2208      	movs	r2, #8
 80044be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e029      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044dc:	d111      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f81e 	bl	800452a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e00f      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0a0      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800452a:	b480      	push	{r7}
 800452c:	b095      	sub	sp, #84	@ 0x54
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
 8004552:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	61fb      	str	r3, [r7, #28]
   return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d118      	bne.n	80045d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0310 	bic.w	r3, r3, #16
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	613b      	str	r3, [r7, #16]
   return(result);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045ea:	bf00      	nop
 80045ec:	3754      	adds	r7, #84	@ 0x54
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff faf1 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	613b      	str	r3, [r7, #16]
   return(result);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fabc 	bl	8003be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004668:	bf00      	nop
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80046be:	2302      	movs	r3, #2
 80046c0:	e027      	b.n	8004712 <HAL_UARTEx_DisableFifoMode+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2224      	movs	r2, #36	@ 0x24
 80046ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80046f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004732:	2302      	movs	r3, #2
 8004734:	e02d      	b.n	8004792 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2224      	movs	r2, #36	@ 0x24
 8004742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f850 	bl	8004818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e02d      	b.n	800480e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2224      	movs	r2, #36	@ 0x24
 80047be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f812 	bl	8004818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004838:	e031      	b.n	800489e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800483a:	2308      	movs	r3, #8
 800483c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800483e:	2308      	movs	r3, #8
 8004840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	0f5b      	lsrs	r3, r3, #29
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	7b3a      	ldrb	r2, [r7, #12]
 8004866:	4911      	ldr	r1, [pc, #68]	@ (80048ac <UARTEx_SetNbDataToProcess+0x94>)
 8004868:	5c8a      	ldrb	r2, [r1, r2]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800486e:	7b3a      	ldrb	r2, [r7, #12]
 8004870:	490f      	ldr	r1, [pc, #60]	@ (80048b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004874:	fb93 f3f2 	sdiv	r3, r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	7b7a      	ldrb	r2, [r7, #13]
 8004884:	4909      	ldr	r1, [pc, #36]	@ (80048ac <UARTEx_SetNbDataToProcess+0x94>)
 8004886:	5c8a      	ldrb	r2, [r1, r2]
 8004888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800488c:	7b7a      	ldrb	r2, [r7, #13]
 800488e:	4908      	ldr	r1, [pc, #32]	@ (80048b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004892:	fb93 f3f2 	sdiv	r3, r3, r2
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	080053e0 	.word	0x080053e0
 80048b0:	080053e8 	.word	0x080053e8

080048b4 <std>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	e9c0 3300 	strd	r3, r3, [r0]
 80048be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048c2:	6083      	str	r3, [r0, #8]
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c8:	81c2      	strh	r2, [r0, #14]
 80048ca:	6183      	str	r3, [r0, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2208      	movs	r2, #8
 80048d0:	305c      	adds	r0, #92	@ 0x5c
 80048d2:	f000 faa3 	bl	8004e1c <memset>
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x58>)
 80048d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x5c>)
 80048dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x60>)
 80048e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x64>)
 80048e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <std+0x68>)
 80048e8:	6224      	str	r4, [r4, #32]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d006      	beq.n	80048fc <std+0x48>
 80048ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d002      	beq.n	80048fc <std+0x48>
 80048f6:	33d0      	adds	r3, #208	@ 0xd0
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d105      	bne.n	8004908 <std+0x54>
 80048fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f000 bb02 	b.w	8004f0c <__retarget_lock_init_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004c6d 	.word	0x08004c6d
 8004910:	08004c8f 	.word	0x08004c8f
 8004914:	08004cc7 	.word	0x08004cc7
 8004918:	08004ceb 	.word	0x08004ceb
 800491c:	200002ec 	.word	0x200002ec

08004920 <stdio_exit_handler>:
 8004920:	4a02      	ldr	r2, [pc, #8]	@ (800492c <stdio_exit_handler+0xc>)
 8004922:	4903      	ldr	r1, [pc, #12]	@ (8004930 <stdio_exit_handler+0x10>)
 8004924:	4803      	ldr	r0, [pc, #12]	@ (8004934 <stdio_exit_handler+0x14>)
 8004926:	f000 b869 	b.w	80049fc <_fwalk_sglue>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	0800521d 	.word	0x0800521d
 8004934:	2000001c 	.word	0x2000001c

08004938 <cleanup_stdio>:
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <cleanup_stdio+0x34>)
 800493c:	4299      	cmp	r1, r3
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	d001      	beq.n	8004948 <cleanup_stdio+0x10>
 8004944:	f000 fc6a 	bl	800521c <_fflush_r>
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <cleanup_stdio+0x38>)
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <cleanup_stdio+0x1e>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fc63 	bl	800521c <_fflush_r>
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <cleanup_stdio+0x3c>)
 800495a:	4299      	cmp	r1, r3
 800495c:	d004      	beq.n	8004968 <cleanup_stdio+0x30>
 800495e:	4620      	mov	r0, r4
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f000 bc5a 	b.w	800521c <_fflush_r>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	200002ec 	.word	0x200002ec
 8004970:	20000354 	.word	0x20000354
 8004974:	200003bc 	.word	0x200003bc

08004978 <global_stdio_init.part.0>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x30>)
 800497c:	4c0b      	ldr	r4, [pc, #44]	@ (80049ac <global_stdio_init.part.0+0x34>)
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <global_stdio_init.part.0+0x38>)
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4620      	mov	r0, r4
 8004984:	2200      	movs	r2, #0
 8004986:	2104      	movs	r1, #4
 8004988:	f7ff ff94 	bl	80048b4 <std>
 800498c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004990:	2201      	movs	r2, #1
 8004992:	2109      	movs	r1, #9
 8004994:	f7ff ff8e 	bl	80048b4 <std>
 8004998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800499c:	2202      	movs	r2, #2
 800499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a2:	2112      	movs	r1, #18
 80049a4:	f7ff bf86 	b.w	80048b4 <std>
 80049a8:	20000424 	.word	0x20000424
 80049ac:	200002ec 	.word	0x200002ec
 80049b0:	08004921 	.word	0x08004921

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	@ (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 baaa 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	2000042d 	.word	0x2000042d

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	@ (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 baa5 	b.w	8004f10 <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	2000042d 	.word	0x2000042d

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sfp_lock_acquire>
 80049d4:	6a23      	ldr	r3, [r4, #32]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sfp_lock_release>
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x28>)
 80049e2:	6223      	str	r3, [r4, #32]
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <__sinit+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f5      	bne.n	80049d8 <__sinit+0xc>
 80049ec:	f7ff ffc4 	bl	8004978 <global_stdio_init.part.0>
 80049f0:	e7f2      	b.n	80049d8 <__sinit+0xc>
 80049f2:	bf00      	nop
 80049f4:	08004939 	.word	0x08004939
 80049f8:	20000424 	.word	0x20000424

080049fc <_fwalk_sglue>:
 80049fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	4607      	mov	r7, r0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	2600      	movs	r6, #0
 8004a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a10:	d505      	bpl.n	8004a1e <_fwalk_sglue+0x22>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f7      	bne.n	8004a08 <_fwalk_sglue+0xc>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d907      	bls.n	8004a34 <_fwalk_sglue+0x38>
 8004a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	d003      	beq.n	8004a34 <_fwalk_sglue+0x38>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	@ 0x68
 8004a36:	e7e9      	b.n	8004a0c <_fwalk_sglue+0x10>

08004a38 <_puts_r>:
 8004a38:	6a03      	ldr	r3, [r0, #32]
 8004a3a:	b570      	push	{r4, r5, r6, lr}
 8004a3c:	6884      	ldr	r4, [r0, #8]
 8004a3e:	4605      	mov	r5, r0
 8004a40:	460e      	mov	r6, r1
 8004a42:	b90b      	cbnz	r3, 8004a48 <_puts_r+0x10>
 8004a44:	f7ff ffc2 	bl	80049cc <__sinit>
 8004a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a4a:	07db      	lsls	r3, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_puts_r+0x22>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	0598      	lsls	r0, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_puts_r+0x22>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f000 fa5a 	bl	8004f0e <__retarget_lock_acquire_recursive>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	0719      	lsls	r1, r3, #28
 8004a5e:	d502      	bpl.n	8004a66 <_puts_r+0x2e>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d135      	bne.n	8004ad2 <_puts_r+0x9a>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f981 	bl	8004d70 <__swsetup_r>
 8004a6e:	b380      	cbz	r0, 8004ad2 <_puts_r+0x9a>
 8004a70:	f04f 35ff 	mov.w	r5, #4294967295
 8004a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a76:	07da      	lsls	r2, r3, #31
 8004a78:	d405      	bmi.n	8004a86 <_puts_r+0x4e>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	d402      	bmi.n	8004a86 <_puts_r+0x4e>
 8004a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a82:	f000 fa45 	bl	8004f10 <__retarget_lock_release_recursive>
 8004a86:	4628      	mov	r0, r5
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da04      	bge.n	8004a98 <_puts_r+0x60>
 8004a8e:	69a2      	ldr	r2, [r4, #24]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	dc17      	bgt.n	8004ac4 <_puts_r+0x8c>
 8004a94:	290a      	cmp	r1, #10
 8004a96:	d015      	beq.n	8004ac4 <_puts_r+0x8c>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	7019      	strb	r1, [r3, #0]
 8004aa0:	68a3      	ldr	r3, [r4, #8]
 8004aa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60a3      	str	r3, [r4, #8]
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d1ed      	bne.n	8004a8a <_puts_r+0x52>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da11      	bge.n	8004ad6 <_puts_r+0x9e>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	210a      	movs	r1, #10
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f91b 	bl	8004cf2 <__swbuf_r>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0d7      	beq.n	8004a70 <_puts_r+0x38>
 8004ac0:	250a      	movs	r5, #10
 8004ac2:	e7d7      	b.n	8004a74 <_puts_r+0x3c>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f913 	bl	8004cf2 <__swbuf_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1e7      	bne.n	8004aa0 <_puts_r+0x68>
 8004ad0:	e7ce      	b.n	8004a70 <_puts_r+0x38>
 8004ad2:	3e01      	subs	r6, #1
 8004ad4:	e7e4      	b.n	8004aa0 <_puts_r+0x68>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	220a      	movs	r2, #10
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e7ee      	b.n	8004ac0 <_puts_r+0x88>
	...

08004ae4 <puts>:
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <puts+0xc>)
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f7ff bfa5 	b.w	8004a38 <_puts_r>
 8004aee:	bf00      	nop
 8004af0:	20000018 	.word	0x20000018

08004af4 <setbuf>:
 8004af4:	fab1 f281 	clz	r2, r1
 8004af8:	0952      	lsrs	r2, r2, #5
 8004afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004afe:	0052      	lsls	r2, r2, #1
 8004b00:	f000 b800 	b.w	8004b04 <setvbuf>

08004b04 <setvbuf>:
 8004b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b08:	461d      	mov	r5, r3
 8004b0a:	4b57      	ldr	r3, [pc, #348]	@ (8004c68 <setvbuf+0x164>)
 8004b0c:	681f      	ldr	r7, [r3, #0]
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460e      	mov	r6, r1
 8004b12:	4690      	mov	r8, r2
 8004b14:	b127      	cbz	r7, 8004b20 <setvbuf+0x1c>
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	b913      	cbnz	r3, 8004b20 <setvbuf+0x1c>
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f7ff ff56 	bl	80049cc <__sinit>
 8004b20:	f1b8 0f02 	cmp.w	r8, #2
 8004b24:	d006      	beq.n	8004b34 <setvbuf+0x30>
 8004b26:	f1b8 0f01 	cmp.w	r8, #1
 8004b2a:	f200 809a 	bhi.w	8004c62 <setvbuf+0x15e>
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	f2c0 8097 	blt.w	8004c62 <setvbuf+0x15e>
 8004b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b36:	07d9      	lsls	r1, r3, #31
 8004b38:	d405      	bmi.n	8004b46 <setvbuf+0x42>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	059a      	lsls	r2, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <setvbuf+0x42>
 8004b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b42:	f000 f9e4 	bl	8004f0e <__retarget_lock_acquire_recursive>
 8004b46:	4621      	mov	r1, r4
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f000 fb67 	bl	800521c <_fflush_r>
 8004b4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b50:	b141      	cbz	r1, 8004b64 <setvbuf+0x60>
 8004b52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b56:	4299      	cmp	r1, r3
 8004b58:	d002      	beq.n	8004b60 <setvbuf+0x5c>
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f9da 	bl	8004f14 <_free_r>
 8004b60:	2300      	movs	r3, #0
 8004b62:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b64:	2300      	movs	r3, #0
 8004b66:	61a3      	str	r3, [r4, #24]
 8004b68:	6063      	str	r3, [r4, #4]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	d503      	bpl.n	8004b78 <setvbuf+0x74>
 8004b70:	6921      	ldr	r1, [r4, #16]
 8004b72:	4638      	mov	r0, r7
 8004b74:	f000 f9ce 	bl	8004f14 <_free_r>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	f1b8 0f02 	cmp.w	r8, #2
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	d061      	beq.n	8004c4e <setvbuf+0x14a>
 8004b8a:	ab01      	add	r3, sp, #4
 8004b8c:	466a      	mov	r2, sp
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4638      	mov	r0, r7
 8004b92:	f000 fb6b 	bl	800526c <__swhatbuf_r>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	4318      	orrs	r0, r3
 8004b9a:	81a0      	strh	r0, [r4, #12]
 8004b9c:	bb2d      	cbnz	r5, 8004bea <setvbuf+0xe6>
 8004b9e:	9d00      	ldr	r5, [sp, #0]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 fa01 	bl	8004fa8 <malloc>
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d152      	bne.n	8004c52 <setvbuf+0x14e>
 8004bac:	f8dd 9000 	ldr.w	r9, [sp]
 8004bb0:	45a9      	cmp	r9, r5
 8004bb2:	d140      	bne.n	8004c36 <setvbuf+0x132>
 8004bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	f043 0202 	orr.w	r2, r3, #2
 8004bc0:	81a2      	strh	r2, [r4, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	60a2      	str	r2, [r4, #8]
 8004bc6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	6122      	str	r2, [r4, #16]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6162      	str	r2, [r4, #20]
 8004bd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bd4:	07d6      	lsls	r6, r2, #31
 8004bd6:	d404      	bmi.n	8004be2 <setvbuf+0xde>
 8004bd8:	0598      	lsls	r0, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <setvbuf+0xde>
 8004bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bde:	f000 f997 	bl	8004f10 <__retarget_lock_release_recursive>
 8004be2:	4628      	mov	r0, r5
 8004be4:	b003      	add	sp, #12
 8004be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d0d8      	beq.n	8004ba0 <setvbuf+0x9c>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	b913      	cbnz	r3, 8004bf8 <setvbuf+0xf4>
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f7ff feea 	bl	80049cc <__sinit>
 8004bf8:	f1b8 0f01 	cmp.w	r8, #1
 8004bfc:	bf08      	it	eq
 8004bfe:	89a3      	ldrheq	r3, [r4, #12]
 8004c00:	6026      	str	r6, [r4, #0]
 8004c02:	bf04      	itt	eq
 8004c04:	f043 0301 	orreq.w	r3, r3, #1
 8004c08:	81a3      	strheq	r3, [r4, #12]
 8004c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0e:	f013 0208 	ands.w	r2, r3, #8
 8004c12:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004c16:	d01e      	beq.n	8004c56 <setvbuf+0x152>
 8004c18:	07d9      	lsls	r1, r3, #31
 8004c1a:	bf41      	itttt	mi
 8004c1c:	2200      	movmi	r2, #0
 8004c1e:	426d      	negmi	r5, r5
 8004c20:	60a2      	strmi	r2, [r4, #8]
 8004c22:	61a5      	strmi	r5, [r4, #24]
 8004c24:	bf58      	it	pl
 8004c26:	60a5      	strpl	r5, [r4, #8]
 8004c28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c2a:	07d2      	lsls	r2, r2, #31
 8004c2c:	d401      	bmi.n	8004c32 <setvbuf+0x12e>
 8004c2e:	059b      	lsls	r3, r3, #22
 8004c30:	d513      	bpl.n	8004c5a <setvbuf+0x156>
 8004c32:	2500      	movs	r5, #0
 8004c34:	e7d5      	b.n	8004be2 <setvbuf+0xde>
 8004c36:	4648      	mov	r0, r9
 8004c38:	f000 f9b6 	bl	8004fa8 <malloc>
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d0b8      	beq.n	8004bb4 <setvbuf+0xb0>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	464d      	mov	r5, r9
 8004c4c:	e7cf      	b.n	8004bee <setvbuf+0xea>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	e7b2      	b.n	8004bb8 <setvbuf+0xb4>
 8004c52:	46a9      	mov	r9, r5
 8004c54:	e7f5      	b.n	8004c42 <setvbuf+0x13e>
 8004c56:	60a2      	str	r2, [r4, #8]
 8004c58:	e7e6      	b.n	8004c28 <setvbuf+0x124>
 8004c5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5c:	f000 f958 	bl	8004f10 <__retarget_lock_release_recursive>
 8004c60:	e7e7      	b.n	8004c32 <setvbuf+0x12e>
 8004c62:	f04f 35ff 	mov.w	r5, #4294967295
 8004c66:	e7bc      	b.n	8004be2 <setvbuf+0xde>
 8004c68:	20000018 	.word	0x20000018

08004c6c <__sread>:
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	460c      	mov	r4, r1
 8004c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c74:	f000 f8fc 	bl	8004e70 <_read_r>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	bfab      	itete	ge
 8004c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c80:	181b      	addge	r3, r3, r0
 8004c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c86:	bfac      	ite	ge
 8004c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c8a:	81a3      	strhlt	r3, [r4, #12]
 8004c8c:	bd10      	pop	{r4, pc}

08004c8e <__swrite>:
 8004c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c92:	461f      	mov	r7, r3
 8004c94:	898b      	ldrh	r3, [r1, #12]
 8004c96:	05db      	lsls	r3, r3, #23
 8004c98:	4605      	mov	r5, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	d505      	bpl.n	8004cac <__swrite+0x1e>
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f000 f8d0 	bl	8004e4c <_lseek_r>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	4632      	mov	r2, r6
 8004cba:	463b      	mov	r3, r7
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	f000 b8e7 	b.w	8004e94 <_write_r>

08004cc6 <__sseek>:
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	460c      	mov	r4, r1
 8004cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cce:	f000 f8bd 	bl	8004e4c <_lseek_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	bf15      	itete	ne
 8004cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ce2:	81a3      	strheq	r3, [r4, #12]
 8004ce4:	bf18      	it	ne
 8004ce6:	81a3      	strhne	r3, [r4, #12]
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <__sclose>:
 8004cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cee:	f000 b89d 	b.w	8004e2c <_close_r>

08004cf2 <__swbuf_r>:
 8004cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf4:	460e      	mov	r6, r1
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <__swbuf_r+0x12>
 8004cfc:	6a03      	ldr	r3, [r0, #32]
 8004cfe:	b90b      	cbnz	r3, 8004d04 <__swbuf_r+0x12>
 8004d00:	f7ff fe64 	bl	80049cc <__sinit>
 8004d04:	69a3      	ldr	r3, [r4, #24]
 8004d06:	60a3      	str	r3, [r4, #8]
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	071a      	lsls	r2, r3, #28
 8004d0c:	d501      	bpl.n	8004d12 <__swbuf_r+0x20>
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	b943      	cbnz	r3, 8004d24 <__swbuf_r+0x32>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f82b 	bl	8004d70 <__swsetup_r>
 8004d1a:	b118      	cbz	r0, 8004d24 <__swbuf_r+0x32>
 8004d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d20:	4638      	mov	r0, r7
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	6922      	ldr	r2, [r4, #16]
 8004d28:	1a98      	subs	r0, r3, r2
 8004d2a:	6963      	ldr	r3, [r4, #20]
 8004d2c:	b2f6      	uxtb	r6, r6
 8004d2e:	4283      	cmp	r3, r0
 8004d30:	4637      	mov	r7, r6
 8004d32:	dc05      	bgt.n	8004d40 <__swbuf_r+0x4e>
 8004d34:	4621      	mov	r1, r4
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fa70 	bl	800521c <_fflush_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d1ed      	bne.n	8004d1c <__swbuf_r+0x2a>
 8004d40:	68a3      	ldr	r3, [r4, #8]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60a3      	str	r3, [r4, #8]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	701e      	strb	r6, [r3, #0]
 8004d4e:	6962      	ldr	r2, [r4, #20]
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d004      	beq.n	8004d60 <__swbuf_r+0x6e>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	07db      	lsls	r3, r3, #31
 8004d5a:	d5e1      	bpl.n	8004d20 <__swbuf_r+0x2e>
 8004d5c:	2e0a      	cmp	r6, #10
 8004d5e:	d1df      	bne.n	8004d20 <__swbuf_r+0x2e>
 8004d60:	4621      	mov	r1, r4
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 fa5a 	bl	800521c <_fflush_r>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d0d9      	beq.n	8004d20 <__swbuf_r+0x2e>
 8004d6c:	e7d6      	b.n	8004d1c <__swbuf_r+0x2a>
	...

08004d70 <__swsetup_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4b29      	ldr	r3, [pc, #164]	@ (8004e18 <__swsetup_r+0xa8>)
 8004d74:	4605      	mov	r5, r0
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	460c      	mov	r4, r1
 8004d7a:	b118      	cbz	r0, 8004d84 <__swsetup_r+0x14>
 8004d7c:	6a03      	ldr	r3, [r0, #32]
 8004d7e:	b90b      	cbnz	r3, 8004d84 <__swsetup_r+0x14>
 8004d80:	f7ff fe24 	bl	80049cc <__sinit>
 8004d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d88:	0719      	lsls	r1, r3, #28
 8004d8a:	d422      	bmi.n	8004dd2 <__swsetup_r+0x62>
 8004d8c:	06da      	lsls	r2, r3, #27
 8004d8e:	d407      	bmi.n	8004da0 <__swsetup_r+0x30>
 8004d90:	2209      	movs	r2, #9
 8004d92:	602a      	str	r2, [r5, #0]
 8004d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9e:	e033      	b.n	8004e08 <__swsetup_r+0x98>
 8004da0:	0758      	lsls	r0, r3, #29
 8004da2:	d512      	bpl.n	8004dca <__swsetup_r+0x5a>
 8004da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004da6:	b141      	cbz	r1, 8004dba <__swsetup_r+0x4a>
 8004da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dac:	4299      	cmp	r1, r3
 8004dae:	d002      	beq.n	8004db6 <__swsetup_r+0x46>
 8004db0:	4628      	mov	r0, r5
 8004db2:	f000 f8af 	bl	8004f14 <_free_r>
 8004db6:	2300      	movs	r3, #0
 8004db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	b94b      	cbnz	r3, 8004dea <__swsetup_r+0x7a>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d003      	beq.n	8004dea <__swsetup_r+0x7a>
 8004de2:	4621      	mov	r1, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 fa67 	bl	80052b8 <__smakebuf_r>
 8004dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dee:	f013 0201 	ands.w	r2, r3, #1
 8004df2:	d00a      	beq.n	8004e0a <__swsetup_r+0x9a>
 8004df4:	2200      	movs	r2, #0
 8004df6:	60a2      	str	r2, [r4, #8]
 8004df8:	6962      	ldr	r2, [r4, #20]
 8004dfa:	4252      	negs	r2, r2
 8004dfc:	61a2      	str	r2, [r4, #24]
 8004dfe:	6922      	ldr	r2, [r4, #16]
 8004e00:	b942      	cbnz	r2, 8004e14 <__swsetup_r+0xa4>
 8004e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e06:	d1c5      	bne.n	8004d94 <__swsetup_r+0x24>
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	0799      	lsls	r1, r3, #30
 8004e0c:	bf58      	it	pl
 8004e0e:	6962      	ldrpl	r2, [r4, #20]
 8004e10:	60a2      	str	r2, [r4, #8]
 8004e12:	e7f4      	b.n	8004dfe <__swsetup_r+0x8e>
 8004e14:	2000      	movs	r0, #0
 8004e16:	e7f7      	b.n	8004e08 <__swsetup_r+0x98>
 8004e18:	20000018 	.word	0x20000018

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <_close_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	@ (8004e48 <_close_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fc f81f 	bl	8000e7a <_close>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_close_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_close_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000428 	.word	0x20000428

08004e4c <_lseek_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d07      	ldr	r5, [pc, #28]	@ (8004e6c <_lseek_r+0x20>)
 8004e50:	4604      	mov	r4, r0
 8004e52:	4608      	mov	r0, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f7fc f834 	bl	8000ec8 <_lseek>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_lseek_r+0x1e>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_lseek_r+0x1e>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000428 	.word	0x20000428

08004e70 <_read_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d07      	ldr	r5, [pc, #28]	@ (8004e90 <_read_r+0x20>)
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7fb ffde 	bl	8000e40 <_read>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_read_r+0x1e>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_read_r+0x1e>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	20000428 	.word	0x20000428

08004e94 <_write_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	@ (8004eb4 <_write_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fb fb30 	bl	8000508 <_write>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_write_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_write_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000428 	.word	0x20000428

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	@ (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000018 	.word	0x20000018

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f000 fa5c 	bl	8005394 <_init>
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	080053f8 	.word	0x080053f8
 8004f00:	080053f8 	.word	0x080053f8
 8004f04:	080053f8 	.word	0x080053f8
 8004f08:	080053fc 	.word	0x080053fc

08004f0c <__retarget_lock_init_recursive>:
 8004f0c:	4770      	bx	lr

08004f0e <__retarget_lock_acquire_recursive>:
 8004f0e:	4770      	bx	lr

08004f10 <__retarget_lock_release_recursive>:
 8004f10:	4770      	bx	lr
	...

08004f14 <_free_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4605      	mov	r5, r0
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d041      	beq.n	8004fa0 <_free_r+0x8c>
 8004f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f20:	1f0c      	subs	r4, r1, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfb8      	it	lt
 8004f26:	18e4      	addlt	r4, r4, r3
 8004f28:	f000 f8e8 	bl	80050fc <__malloc_lock>
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <_free_r+0x90>)
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	b933      	cbnz	r3, 8004f40 <_free_r+0x2c>
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	6014      	str	r4, [r2, #0]
 8004f36:	4628      	mov	r0, r5
 8004f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f3c:	f000 b8e4 	b.w	8005108 <__malloc_unlock>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d908      	bls.n	8004f56 <_free_r+0x42>
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	1821      	adds	r1, r4, r0
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf01      	itttt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	1809      	addeq	r1, r1, r0
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	e7ed      	b.n	8004f32 <_free_r+0x1e>
 8004f56:	461a      	mov	r2, r3
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b10b      	cbz	r3, 8004f60 <_free_r+0x4c>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d9fa      	bls.n	8004f56 <_free_r+0x42>
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	1850      	adds	r0, r2, r1
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d10b      	bne.n	8004f80 <_free_r+0x6c>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	4401      	add	r1, r0
 8004f6c:	1850      	adds	r0, r2, r1
 8004f6e:	4283      	cmp	r3, r0
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	d1e0      	bne.n	8004f36 <_free_r+0x22>
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	6053      	str	r3, [r2, #4]
 8004f7a:	4408      	add	r0, r1
 8004f7c:	6010      	str	r0, [r2, #0]
 8004f7e:	e7da      	b.n	8004f36 <_free_r+0x22>
 8004f80:	d902      	bls.n	8004f88 <_free_r+0x74>
 8004f82:	230c      	movs	r3, #12
 8004f84:	602b      	str	r3, [r5, #0]
 8004f86:	e7d6      	b.n	8004f36 <_free_r+0x22>
 8004f88:	6820      	ldr	r0, [r4, #0]
 8004f8a:	1821      	adds	r1, r4, r0
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	bf04      	itt	eq
 8004f90:	6819      	ldreq	r1, [r3, #0]
 8004f92:	685b      	ldreq	r3, [r3, #4]
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	bf04      	itt	eq
 8004f98:	1809      	addeq	r1, r1, r0
 8004f9a:	6021      	streq	r1, [r4, #0]
 8004f9c:	6054      	str	r4, [r2, #4]
 8004f9e:	e7ca      	b.n	8004f36 <_free_r+0x22>
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000434 	.word	0x20000434

08004fa8 <malloc>:
 8004fa8:	4b02      	ldr	r3, [pc, #8]	@ (8004fb4 <malloc+0xc>)
 8004faa:	4601      	mov	r1, r0
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f000 b825 	b.w	8004ffc <_malloc_r>
 8004fb2:	bf00      	nop
 8004fb4:	20000018 	.word	0x20000018

08004fb8 <sbrk_aligned>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4e0f      	ldr	r6, [pc, #60]	@ (8004ff8 <sbrk_aligned+0x40>)
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	6831      	ldr	r1, [r6, #0]
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	b911      	cbnz	r1, 8004fca <sbrk_aligned+0x12>
 8004fc4:	f000 f9d6 	bl	8005374 <_sbrk_r>
 8004fc8:	6030      	str	r0, [r6, #0]
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f9d1 	bl	8005374 <_sbrk_r>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	d103      	bne.n	8004fde <sbrk_aligned+0x26>
 8004fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8004fda:	4620      	mov	r0, r4
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	1cc4      	adds	r4, r0, #3
 8004fe0:	f024 0403 	bic.w	r4, r4, #3
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d0f8      	beq.n	8004fda <sbrk_aligned+0x22>
 8004fe8:	1a21      	subs	r1, r4, r0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f9c2 	bl	8005374 <_sbrk_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d1f2      	bne.n	8004fda <sbrk_aligned+0x22>
 8004ff4:	e7ef      	b.n	8004fd6 <sbrk_aligned+0x1e>
 8004ff6:	bf00      	nop
 8004ff8:	20000430 	.word	0x20000430

08004ffc <_malloc_r>:
 8004ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005000:	1ccd      	adds	r5, r1, #3
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	2d00      	cmp	r5, #0
 8005010:	4606      	mov	r6, r0
 8005012:	db01      	blt.n	8005018 <_malloc_r+0x1c>
 8005014:	42a9      	cmp	r1, r5
 8005016:	d904      	bls.n	8005022 <_malloc_r+0x26>
 8005018:	230c      	movs	r3, #12
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	2000      	movs	r0, #0
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050f8 <_malloc_r+0xfc>
 8005026:	f000 f869 	bl	80050fc <__malloc_lock>
 800502a:	f8d8 3000 	ldr.w	r3, [r8]
 800502e:	461c      	mov	r4, r3
 8005030:	bb44      	cbnz	r4, 8005084 <_malloc_r+0x88>
 8005032:	4629      	mov	r1, r5
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff ffbf 	bl	8004fb8 <sbrk_aligned>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	4604      	mov	r4, r0
 800503e:	d158      	bne.n	80050f2 <_malloc_r+0xf6>
 8005040:	f8d8 4000 	ldr.w	r4, [r8]
 8005044:	4627      	mov	r7, r4
 8005046:	2f00      	cmp	r7, #0
 8005048:	d143      	bne.n	80050d2 <_malloc_r+0xd6>
 800504a:	2c00      	cmp	r4, #0
 800504c:	d04b      	beq.n	80050e6 <_malloc_r+0xea>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	4639      	mov	r1, r7
 8005052:	4630      	mov	r0, r6
 8005054:	eb04 0903 	add.w	r9, r4, r3
 8005058:	f000 f98c 	bl	8005374 <_sbrk_r>
 800505c:	4581      	cmp	r9, r0
 800505e:	d142      	bne.n	80050e6 <_malloc_r+0xea>
 8005060:	6821      	ldr	r1, [r4, #0]
 8005062:	1a6d      	subs	r5, r5, r1
 8005064:	4629      	mov	r1, r5
 8005066:	4630      	mov	r0, r6
 8005068:	f7ff ffa6 	bl	8004fb8 <sbrk_aligned>
 800506c:	3001      	adds	r0, #1
 800506e:	d03a      	beq.n	80050e6 <_malloc_r+0xea>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	442b      	add	r3, r5
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	f8d8 3000 	ldr.w	r3, [r8]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	bb62      	cbnz	r2, 80050d8 <_malloc_r+0xdc>
 800507e:	f8c8 7000 	str.w	r7, [r8]
 8005082:	e00f      	b.n	80050a4 <_malloc_r+0xa8>
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	1b52      	subs	r2, r2, r5
 8005088:	d420      	bmi.n	80050cc <_malloc_r+0xd0>
 800508a:	2a0b      	cmp	r2, #11
 800508c:	d917      	bls.n	80050be <_malloc_r+0xc2>
 800508e:	1961      	adds	r1, r4, r5
 8005090:	42a3      	cmp	r3, r4
 8005092:	6025      	str	r5, [r4, #0]
 8005094:	bf18      	it	ne
 8005096:	6059      	strne	r1, [r3, #4]
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	bf08      	it	eq
 800509c:	f8c8 1000 	streq.w	r1, [r8]
 80050a0:	5162      	str	r2, [r4, r5]
 80050a2:	604b      	str	r3, [r1, #4]
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 f82f 	bl	8005108 <__malloc_unlock>
 80050aa:	f104 000b 	add.w	r0, r4, #11
 80050ae:	1d23      	adds	r3, r4, #4
 80050b0:	f020 0007 	bic.w	r0, r0, #7
 80050b4:	1ac2      	subs	r2, r0, r3
 80050b6:	bf1c      	itt	ne
 80050b8:	1a1b      	subne	r3, r3, r0
 80050ba:	50a3      	strne	r3, [r4, r2]
 80050bc:	e7af      	b.n	800501e <_malloc_r+0x22>
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	bf0c      	ite	eq
 80050c4:	f8c8 2000 	streq.w	r2, [r8]
 80050c8:	605a      	strne	r2, [r3, #4]
 80050ca:	e7eb      	b.n	80050a4 <_malloc_r+0xa8>
 80050cc:	4623      	mov	r3, r4
 80050ce:	6864      	ldr	r4, [r4, #4]
 80050d0:	e7ae      	b.n	8005030 <_malloc_r+0x34>
 80050d2:	463c      	mov	r4, r7
 80050d4:	687f      	ldr	r7, [r7, #4]
 80050d6:	e7b6      	b.n	8005046 <_malloc_r+0x4a>
 80050d8:	461a      	mov	r2, r3
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d1fb      	bne.n	80050d8 <_malloc_r+0xdc>
 80050e0:	2300      	movs	r3, #0
 80050e2:	6053      	str	r3, [r2, #4]
 80050e4:	e7de      	b.n	80050a4 <_malloc_r+0xa8>
 80050e6:	230c      	movs	r3, #12
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	4630      	mov	r0, r6
 80050ec:	f000 f80c 	bl	8005108 <__malloc_unlock>
 80050f0:	e794      	b.n	800501c <_malloc_r+0x20>
 80050f2:	6005      	str	r5, [r0, #0]
 80050f4:	e7d6      	b.n	80050a4 <_malloc_r+0xa8>
 80050f6:	bf00      	nop
 80050f8:	20000434 	.word	0x20000434

080050fc <__malloc_lock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__malloc_lock+0x8>)
 80050fe:	f7ff bf06 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 8005102:	bf00      	nop
 8005104:	2000042c 	.word	0x2000042c

08005108 <__malloc_unlock>:
 8005108:	4801      	ldr	r0, [pc, #4]	@ (8005110 <__malloc_unlock+0x8>)
 800510a:	f7ff bf01 	b.w	8004f10 <__retarget_lock_release_recursive>
 800510e:	bf00      	nop
 8005110:	2000042c 	.word	0x2000042c

08005114 <__sflush_r>:
 8005114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	0716      	lsls	r6, r2, #28
 800511e:	4605      	mov	r5, r0
 8005120:	460c      	mov	r4, r1
 8005122:	d454      	bmi.n	80051ce <__sflush_r+0xba>
 8005124:	684b      	ldr	r3, [r1, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	dc02      	bgt.n	8005130 <__sflush_r+0x1c>
 800512a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	dd48      	ble.n	80051c2 <__sflush_r+0xae>
 8005130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005132:	2e00      	cmp	r6, #0
 8005134:	d045      	beq.n	80051c2 <__sflush_r+0xae>
 8005136:	2300      	movs	r3, #0
 8005138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800513c:	682f      	ldr	r7, [r5, #0]
 800513e:	6a21      	ldr	r1, [r4, #32]
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	d030      	beq.n	80051a6 <__sflush_r+0x92>
 8005144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	0759      	lsls	r1, r3, #29
 800514a:	d505      	bpl.n	8005158 <__sflush_r+0x44>
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	1ad2      	subs	r2, r2, r3
 8005150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005152:	b10b      	cbz	r3, 8005158 <__sflush_r+0x44>
 8005154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005156:	1ad2      	subs	r2, r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800515c:	6a21      	ldr	r1, [r4, #32]
 800515e:	4628      	mov	r0, r5
 8005160:	47b0      	blx	r6
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	d106      	bne.n	8005176 <__sflush_r+0x62>
 8005168:	6829      	ldr	r1, [r5, #0]
 800516a:	291d      	cmp	r1, #29
 800516c:	d82b      	bhi.n	80051c6 <__sflush_r+0xb2>
 800516e:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <__sflush_r+0x104>)
 8005170:	410a      	asrs	r2, r1
 8005172:	07d6      	lsls	r6, r2, #31
 8005174:	d427      	bmi.n	80051c6 <__sflush_r+0xb2>
 8005176:	2200      	movs	r2, #0
 8005178:	6062      	str	r2, [r4, #4]
 800517a:	04d9      	lsls	r1, r3, #19
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	6022      	str	r2, [r4, #0]
 8005180:	d504      	bpl.n	800518c <__sflush_r+0x78>
 8005182:	1c42      	adds	r2, r0, #1
 8005184:	d101      	bne.n	800518a <__sflush_r+0x76>
 8005186:	682b      	ldr	r3, [r5, #0]
 8005188:	b903      	cbnz	r3, 800518c <__sflush_r+0x78>
 800518a:	6560      	str	r0, [r4, #84]	@ 0x54
 800518c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800518e:	602f      	str	r7, [r5, #0]
 8005190:	b1b9      	cbz	r1, 80051c2 <__sflush_r+0xae>
 8005192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005196:	4299      	cmp	r1, r3
 8005198:	d002      	beq.n	80051a0 <__sflush_r+0x8c>
 800519a:	4628      	mov	r0, r5
 800519c:	f7ff feba 	bl	8004f14 <_free_r>
 80051a0:	2300      	movs	r3, #0
 80051a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80051a4:	e00d      	b.n	80051c2 <__sflush_r+0xae>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b0      	blx	r6
 80051ac:	4602      	mov	r2, r0
 80051ae:	1c50      	adds	r0, r2, #1
 80051b0:	d1c9      	bne.n	8005146 <__sflush_r+0x32>
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0c6      	beq.n	8005146 <__sflush_r+0x32>
 80051b8:	2b1d      	cmp	r3, #29
 80051ba:	d001      	beq.n	80051c0 <__sflush_r+0xac>
 80051bc:	2b16      	cmp	r3, #22
 80051be:	d11e      	bne.n	80051fe <__sflush_r+0xea>
 80051c0:	602f      	str	r7, [r5, #0]
 80051c2:	2000      	movs	r0, #0
 80051c4:	e022      	b.n	800520c <__sflush_r+0xf8>
 80051c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ca:	b21b      	sxth	r3, r3
 80051cc:	e01b      	b.n	8005206 <__sflush_r+0xf2>
 80051ce:	690f      	ldr	r7, [r1, #16]
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	d0f6      	beq.n	80051c2 <__sflush_r+0xae>
 80051d4:	0793      	lsls	r3, r2, #30
 80051d6:	680e      	ldr	r6, [r1, #0]
 80051d8:	bf08      	it	eq
 80051da:	694b      	ldreq	r3, [r1, #20]
 80051dc:	600f      	str	r7, [r1, #0]
 80051de:	bf18      	it	ne
 80051e0:	2300      	movne	r3, #0
 80051e2:	eba6 0807 	sub.w	r8, r6, r7
 80051e6:	608b      	str	r3, [r1, #8]
 80051e8:	f1b8 0f00 	cmp.w	r8, #0
 80051ec:	dde9      	ble.n	80051c2 <__sflush_r+0xae>
 80051ee:	6a21      	ldr	r1, [r4, #32]
 80051f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051f2:	4643      	mov	r3, r8
 80051f4:	463a      	mov	r2, r7
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b0      	blx	r6
 80051fa:	2800      	cmp	r0, #0
 80051fc:	dc08      	bgt.n	8005210 <__sflush_r+0xfc>
 80051fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005210:	4407      	add	r7, r0
 8005212:	eba8 0800 	sub.w	r8, r8, r0
 8005216:	e7e7      	b.n	80051e8 <__sflush_r+0xd4>
 8005218:	dfbffffe 	.word	0xdfbffffe

0800521c <_fflush_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	690b      	ldr	r3, [r1, #16]
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	b913      	cbnz	r3, 800522c <_fflush_r+0x10>
 8005226:	2500      	movs	r5, #0
 8005228:	4628      	mov	r0, r5
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	b118      	cbz	r0, 8005236 <_fflush_r+0x1a>
 800522e:	6a03      	ldr	r3, [r0, #32]
 8005230:	b90b      	cbnz	r3, 8005236 <_fflush_r+0x1a>
 8005232:	f7ff fbcb 	bl	80049cc <__sinit>
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f3      	beq.n	8005226 <_fflush_r+0xa>
 800523e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005240:	07d0      	lsls	r0, r2, #31
 8005242:	d404      	bmi.n	800524e <_fflush_r+0x32>
 8005244:	0599      	lsls	r1, r3, #22
 8005246:	d402      	bmi.n	800524e <_fflush_r+0x32>
 8005248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800524a:	f7ff fe60 	bl	8004f0e <__retarget_lock_acquire_recursive>
 800524e:	4628      	mov	r0, r5
 8005250:	4621      	mov	r1, r4
 8005252:	f7ff ff5f 	bl	8005114 <__sflush_r>
 8005256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005258:	07da      	lsls	r2, r3, #31
 800525a:	4605      	mov	r5, r0
 800525c:	d4e4      	bmi.n	8005228 <_fflush_r+0xc>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	059b      	lsls	r3, r3, #22
 8005262:	d4e1      	bmi.n	8005228 <_fflush_r+0xc>
 8005264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005266:	f7ff fe53 	bl	8004f10 <__retarget_lock_release_recursive>
 800526a:	e7dd      	b.n	8005228 <_fflush_r+0xc>

0800526c <__swhatbuf_r>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	460c      	mov	r4, r1
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	2900      	cmp	r1, #0
 8005276:	b096      	sub	sp, #88	@ 0x58
 8005278:	4615      	mov	r5, r2
 800527a:	461e      	mov	r6, r3
 800527c:	da0d      	bge.n	800529a <__swhatbuf_r+0x2e>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	bf14      	ite	ne
 800528a:	2340      	movne	r3, #64	@ 0x40
 800528c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005290:	2000      	movs	r0, #0
 8005292:	6031      	str	r1, [r6, #0]
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	b016      	add	sp, #88	@ 0x58
 8005298:	bd70      	pop	{r4, r5, r6, pc}
 800529a:	466a      	mov	r2, sp
 800529c:	f000 f848 	bl	8005330 <_fstat_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	dbec      	blt.n	800527e <__swhatbuf_r+0x12>
 80052a4:	9901      	ldr	r1, [sp, #4]
 80052a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052ae:	4259      	negs	r1, r3
 80052b0:	4159      	adcs	r1, r3
 80052b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b6:	e7eb      	b.n	8005290 <__swhatbuf_r+0x24>

080052b8 <__smakebuf_r>:
 80052b8:	898b      	ldrh	r3, [r1, #12]
 80052ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052bc:	079d      	lsls	r5, r3, #30
 80052be:	4606      	mov	r6, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	d507      	bpl.n	80052d4 <__smakebuf_r+0x1c>
 80052c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	2301      	movs	r3, #1
 80052ce:	6163      	str	r3, [r4, #20]
 80052d0:	b003      	add	sp, #12
 80052d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d4:	ab01      	add	r3, sp, #4
 80052d6:	466a      	mov	r2, sp
 80052d8:	f7ff ffc8 	bl	800526c <__swhatbuf_r>
 80052dc:	9f00      	ldr	r7, [sp, #0]
 80052de:	4605      	mov	r5, r0
 80052e0:	4639      	mov	r1, r7
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fe8a 	bl	8004ffc <_malloc_r>
 80052e8:	b948      	cbnz	r0, 80052fe <__smakebuf_r+0x46>
 80052ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ee:	059a      	lsls	r2, r3, #22
 80052f0:	d4ee      	bmi.n	80052d0 <__smakebuf_r+0x18>
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	e7e2      	b.n	80052c4 <__smakebuf_r+0xc>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	6020      	str	r0, [r4, #0]
 8005302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800530e:	b15b      	cbz	r3, 8005328 <__smakebuf_r+0x70>
 8005310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005314:	4630      	mov	r0, r6
 8005316:	f000 f81d 	bl	8005354 <_isatty_r>
 800531a:	b128      	cbz	r0, 8005328 <__smakebuf_r+0x70>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	431d      	orrs	r5, r3
 800532c:	81a5      	strh	r5, [r4, #12]
 800532e:	e7cf      	b.n	80052d0 <__smakebuf_r+0x18>

08005330 <_fstat_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	@ (8005350 <_fstat_r+0x20>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	602b      	str	r3, [r5, #0]
 800533e:	f7fb fda8 	bl	8000e92 <_fstat>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d102      	bne.n	800534c <_fstat_r+0x1c>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	b103      	cbz	r3, 800534c <_fstat_r+0x1c>
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	bd38      	pop	{r3, r4, r5, pc}
 800534e:	bf00      	nop
 8005350:	20000428 	.word	0x20000428

08005354 <_isatty_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d06      	ldr	r5, [pc, #24]	@ (8005370 <_isatty_r+0x1c>)
 8005358:	2300      	movs	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	f7fb fda7 	bl	8000eb2 <_isatty>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_isatty_r+0x1a>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_isatty_r+0x1a>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000428 	.word	0x20000428

08005374 <_sbrk_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d06      	ldr	r5, [pc, #24]	@ (8005390 <_sbrk_r+0x1c>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fb fdb0 	bl	8000ee4 <_sbrk>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_sbrk_r+0x1a>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_sbrk_r+0x1a>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	20000428 	.word	0x20000428

08005394 <_init>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr

080053a0 <_fini>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr
